[{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\block-navigation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\lcov-report\\block-navigation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\lcov-report\\prettify.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\lcov-report\\sorter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\prettify.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\coverage\\sorter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\e2e\\auth.setup.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":22,"column":5,"severity":1,"nodeType":null,"fix":{"range":[771,809],"text":" "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_navigationError' is defined but never used.","line":136,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_screenshotError' is defined but never used.","line":203,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_saveError' is defined but never used.","line":217,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":24}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":28,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":14,"suggestions":[{"fix":{"range":[923,974],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":30,"endColumn":14,"suggestions":[{"fix":{"range":[1018,1052],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":32,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":14,"suggestions":[{"fix":{"range":[1096,1143],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":49,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":49,"endColumn":22,"suggestions":[{"fix":{"range":[1690,1730],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":71,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":71,"endColumn":24,"suggestions":[{"fix":{"range":[2431,2479],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":75,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":24,"suggestions":[{"fix":{"range":[2617,2665],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":79,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":79,"endColumn":22,"suggestions":[{"fix":{"range":[2754,2796],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":84,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":84,"endColumn":18,"suggestions":[{"fix":{"range":[2888,2943],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":96,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":96,"endColumn":16,"suggestions":[{"fix":{"range":[3214,3259],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":105,"endColumn":16,"suggestions":[{"fix":{"range":[3573,3617],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":116,"endColumn":16,"suggestions":[{"fix":{"range":[4059,4099],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":125,"endColumn":16,"suggestions":[{"fix":{"range":[4451,4494],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":130,"endColumn":16,"suggestions":[{"fix":{"range":[4633,4680],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":135,"endColumn":18,"suggestions":[{"fix":{"range":[4885,4947],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":143,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":143,"endColumn":20,"suggestions":[{"fix":{"range":[5291,5356],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":149,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":149,"endColumn":22,"suggestions":[{"fix":{"range":[5574,5628],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":161,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":161,"endColumn":22,"suggestions":[{"fix":{"range":[6126,6176],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":164,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":164,"endColumn":22,"suggestions":[{"fix":{"range":[6253,6325],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":180,"endColumn":16,"suggestions":[{"fix":{"range":[6728,6795],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":185,"endColumn":16,"suggestions":[{"fix":{"range":[6955,6998],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":189,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":189,"endColumn":18,"suggestions":[{"fix":{"range":[7127,7190],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":192,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":192,"endColumn":18,"suggestions":[{"fix":{"range":[7255,7333],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":202,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":202,"endColumn":18,"suggestions":[{"fix":{"range":[7613,7690],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":205,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":205,"endColumn":18,"suggestions":[{"fix":{"range":[7775,7825],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":216,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":216,"endColumn":18,"suggestions":[{"fix":{"range":[8163,8216],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":219,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":219,"endColumn":18,"suggestions":[{"fix":{"range":[8295,8348],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":224,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":224,"endColumn":16,"suggestions":[{"fix":{"range":[8443,8476],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { chromium } from '@playwright/test';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load environment variables from .env.local\ndotenv.config({ path: '.env.local' });\ndotenv.config({ path: '.env' });\n\nasync function globalSetup() {\n  const email = process.env.E2E_EMAIL || 'contact@autoscaleai.ca';\n  const password = process.env.E2E_PASSWORD || 'Test1234!';\n  const supabaseUrl = process.env.VITE_SUPABASE_URL;\n  const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n  if (!supabaseUrl || !supabaseKey) {\n    // eslint-disable-next-line no-console\n    console.error('Missing Supabase configuration');\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('🔐 Setting up E2E authentication...');\n  // eslint-disable-next-line no-console\n  console.log(`📧 Email: ${email}`);\n  // eslint-disable-next-line no-console\n  console.log(`🌐 Supabase URL: ${supabaseUrl}`);\n\n  // First, ensure the test user exists using service role key\n  if (serviceRoleKey) {\n    try {\n      // Check if user exists\n      const checkResponse = await fetch(`${supabaseUrl}/auth/v1/admin/users?email=${email}`, {\n        headers: {\n          'Authorization': `Bearer ${serviceRoleKey}`,\n          'apikey': serviceRoleKey,\n        }\n      });\n\n      if (checkResponse.ok) {\n        const data = await checkResponse.json();\n        if (!data.users || data.users.length === 0) {\n          // eslint-disable-next-line no-console\n          console.log('📝 Creating test user...');\n          // Create user if doesn't exist\n          const createResponse = await fetch(`${supabaseUrl}/auth/v1/admin/users`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${serviceRoleKey}`,\n              'apikey': serviceRoleKey,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              email,\n              password,\n              email_confirm: true,\n              user_metadata: {\n                name: 'E2E Test User',\n                role: 'test'\n              }\n            })\n          });\n\n          if (createResponse.ok) {\n            // eslint-disable-next-line no-console\n            console.log('✅ Test user created successfully');\n          } else {\n            const error = await createResponse.text();\n            // eslint-disable-next-line no-console\n            console.log('⚠️ Could not create user:', error);\n          }\n        } else {\n          // eslint-disable-next-line no-console\n          console.log('✅ Test user already exists');\n        }\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('⚠️ Could not verify/create user:', error);\n    }\n  }\n\n  // Launch browser and authenticate\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n\n  try {\n    // Navigate to the app auth page\n    // eslint-disable-next-line no-console\n    console.log('🌐 Navigating to auth page...');\n    await page.goto('http://localhost:4173/auth');\n\n    // Wait for auth page to load\n    await page.waitForLoadState('domcontentloaded');\n    await page.waitForTimeout(2000); // Allow React to hydrate\n\n    // Updated selectors based on actual AuthNew.tsx structure\n    // eslint-disable-next-line no-console\n    console.log('🔍 Looking for login form...');\n\n    // The form uses react-hook-form with specific placeholders\n    const emailInput = page.locator('input[placeholder=\"Email\"]');\n    const passwordInput = page.locator('input[placeholder=\"Mot de passe\"]');\n\n    // Wait for form elements to be visible\n    await emailInput.waitFor({ state: 'visible', timeout: 10000 });\n    await passwordInput.waitFor({ state: 'visible', timeout: 10000 });\n\n    // eslint-disable-next-line no-console\n    console.log('📝 Filling login form...');\n    await emailInput.fill(email);\n    await passwordInput.fill(password);\n\n    // Find the submit button - it shows \"Se connecter\" in login mode\n    const submitButton = page.locator('button[type=\"submit\"]:has-text(\"Se connecter\")');\n    await submitButton.waitFor({ state: 'visible', timeout: 5000 });\n\n    // eslint-disable-next-line no-console\n    console.log('🚀 Submitting login form...');\n    await submitButton.click();\n\n    // Wait for one of several possible post-login states\n    // eslint-disable-next-line no-console\n    console.log('⏳ Waiting for authentication...');\n    try {\n      // Wait for navigation to dashboard or any authenticated page\n      await page.waitForURL(/\\/(dashboard|home|app)/, { timeout: 15000 });\n      // eslint-disable-next-line no-console\n      console.log('✅ Successfully navigated to authenticated page');\n    } catch (_navigationError) {\n      // Check if we're still on auth page with success message\n      const successAlert = page.locator('.border-green-500, .text-green-600, :has-text(\"Connexion réussie\")');\n      const isSuccess = await successAlert.count() > 0;\n\n      if (isSuccess) {\n        // eslint-disable-next-line no-console\n        console.log('✅ Login success detected, waiting for redirect...');\n        await page.waitForTimeout(3000);\n\n        // Try navigating to dashboard manually if auto-redirect failed\n        if (page.url().includes('/auth')) {\n          // eslint-disable-next-line no-console\n          console.log('🔄 Manually navigating to dashboard...');\n          await page.goto('http://localhost:4173/dashboard');\n          await page.waitForLoadState('domcontentloaded');\n        }\n      } else {\n        // Check for error messages\n        const errorAlert = page.locator('.border-destructive, .text-destructive, :has-text(\"Erreur\")');\n        const errorCount = await errorAlert.count();\n\n        if (errorCount > 0) {\n          const errorText = await errorAlert.first().textContent();\n          // eslint-disable-next-line no-console\n          console.log('❌ Login error detected:', errorText);\n        } else {\n          // eslint-disable-next-line no-console\n          console.log('⚠️ Navigation timeout but no clear error - continuing...');\n        }\n      }\n    }\n\n    // Wait for the page to stabilize\n    await page.waitForTimeout(2000);\n\n    // Save the authenticated state\n    const authDir = path.join(__dirname, '.auth');\n    if (!fs.existsSync(authDir)) {\n      fs.mkdirSync(authDir, { recursive: true });\n    }\n\n    await context.storageState({ path: path.join(authDir, 'user.json') });\n    // eslint-disable-next-line no-console\n    console.log('✅ Authentication state saved to e2e/.auth/user.json');\n\n    // Verify we have a valid session by checking for authenticated content\n    const currentUrl = page.url();\n    // eslint-disable-next-line no-console\n    console.log(`📍 Final URL: ${currentUrl}`);\n\n    if (currentUrl.includes('/dashboard') || currentUrl.includes('/app')) {\n      // eslint-disable-next-line no-console\n      console.log('🎉 Authentication setup completed successfully!');\n    } else {\n      // eslint-disable-next-line no-console\n      console.log('⚠️ Authentication may not be complete - check session manually');\n    }\n\n  } catch (error) {\n    console.error('❌ Authentication setup failed:', error);\n\n    // Save a screenshot for debugging\n    try {\n      await page.screenshot({ path: 'e2e-results/auth-setup-error.png', fullPage: true });\n      // eslint-disable-next-line no-console\n      console.log('📸 Error screenshot saved to e2e-results/auth-setup-error.png');\n    } catch (_screenshotError) {\n      // eslint-disable-next-line no-console\n      console.log('⚠️ Could not save error screenshot');\n    }\n\n    // Try to save whatever state we have\n    try {\n      const authDir = path.join(__dirname, '.auth');\n      if (!fs.existsSync(authDir)) {\n        fs.mkdirSync(authDir, { recursive: true });\n      }\n      await context.storageState({ path: path.join(authDir, 'user.json') });\n      // eslint-disable-next-line no-console\n      console.log('⚠️ Partial state saved despite errors');\n    } catch (_saveError) {\n      // eslint-disable-next-line no-console\n      console.log('❌ Could not save authentication state');\n    }\n  } finally {\n    await browser.close();\n    // eslint-disable-next-line no-console\n    console.log('🔒 Browser closed');\n  }\n}\n\nexport default globalSetup;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\e2e\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\e2e\\smoke.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\alerts\\AlertBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\AnalyticsErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\AnalyticsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\AnalyticsLoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\KpiCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\PerformanceMetrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[381,384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[381,384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface RealTimeMetrics {\n  totalCalls: number;\n  activeCalls: number;\n  completedCalls: number;\n  urgentCalls: number;\n  avgDuration: number;\n  successRate: number;\n}\n\ninterface PerformanceMetricsProps {\n  realTimeMetrics: RealTimeMetrics;\n  calls: any[];\n}\n\nexport const PerformanceMetrics = ({ realTimeMetrics, calls }: PerformanceMetricsProps) => {\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"title-md\">Métriques de Performance</CardTitle>\n          <p className=\"caption text-muted-foreground\">\n            Indicateurs en temps réel\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex justify-between items-center p-3 bg-surface rounded-lg\">\n            <span className=\"font-medium\">Taux de réponse</span>\n            <Badge variant=\"default\" className=\"bg-success text-success-foreground\">\n              {realTimeMetrics.successRate}%\n            </Badge>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-surface rounded-lg\">\n            <span className=\"font-medium\">Appels urgents (P1)</span>\n            <Badge variant=\"destructive\">{realTimeMetrics.urgentCalls}</Badge>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-surface rounded-lg\">\n            <span className=\"font-medium\">Temps moyen de résolution</span>\n            <Badge variant=\"outline\">{realTimeMetrics.avgDuration}min</Badge>\n          </div>\n          <div className=\"flex justify-between items-center p-3 bg-surface rounded-lg\">\n            <span className=\"font-medium\">Appels actifs maintenant</span>\n            <Badge variant=\"secondary\">{realTimeMetrics.activeCalls}</Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"title-md\">Répartition par Statut</CardTitle>\n          <p className=\"caption text-muted-foreground\">\n            Distribution des appels par état\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between p-3 bg-surface rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-success rounded-full\" />\n              <span className=\"font-medium\">Terminés</span>\n            </div>\n            <span className=\"font-bold text-success\">{realTimeMetrics.completedCalls}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-3 bg-surface rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-primary rounded-full\" />\n              <span className=\"font-medium\">En cours</span>\n            </div>\n            <span className=\"font-bold text-primary\">{realTimeMetrics.activeCalls}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-3 bg-surface rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-secondary rounded-full\" />\n              <span className=\"font-medium\">En attente</span>\n            </div>\n            <span className=\"font-bold text-secondary-foreground\">\n              {calls?.filter(c => c.status === 'pending')?.length || 0}\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\PeriodSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\analytics\\SearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\common\\PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\common\\PermissionGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\common\\QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\common\\SearchFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\common\\StatsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\crm\\ClientCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\crm\\ClientDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\crm\\ClientRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\crm\\ClientTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\error\\ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":40},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":288,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":288,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw, Bug, Home } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ErrorHandler } from '@/lib/errors/ErrorHandler';\nimport { AppError } from '@/lib/errors/AppError';\nimport { ErrorCategory, ErrorSeverity } from '@/lib/errors/types';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  level?: 'page' | 'component' | 'feature';\n  name?: string;\n  onError?: (error: AppError, errorInfo: ErrorInfo) => void;\n  enableRecovery?: boolean;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: AppError;\n  errorInfo?: ErrorInfo;\n  retryCount: number;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  private errorHandler: ErrorHandler;\n  private readonly maxRetries = 3;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      retryCount: 0\n    };\n    this.errorHandler = ErrorHandler.getInstance();\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return { hasError: true };\n  }\n\n  async componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Convert to AppError for standardized handling\n    const appError = new AppError({\n      code: 'UNK_002',\n      message: error.message,\n      category: ErrorCategory.UNKNOWN,\n      severity: this.getSeverityFromLevel(),\n      source: this.props.name || 'ErrorBoundary',\n      details: {\n        componentStack: errorInfo.componentStack,\n        errorBoundaryLevel: this.props.level || 'component',\n        retryCount: this.state.retryCount\n      },\n      cause: error\n    });\n\n    // Handle error through centralized handler\n    await this.errorHandler.handleError(error, {\n      component: this.props.name || 'ErrorBoundary',\n      operation: 'render',\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      additionalData: {\n        level: this.props.level,\n        componentStack: errorInfo.componentStack\n      }\n    }, {\n      enableUserFeedback: false, // We'll handle it here\n      enableRecovery: this.props.enableRecovery\n    });\n\n    this.setState({ error: appError, errorInfo });\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(appError, errorInfo);\n    }\n  }\n\n  private getSeverityFromLevel(): ErrorSeverity {\n    switch (this.props.level) {\n      case 'page':\n        return ErrorSeverity.HIGH;\n      case 'feature':\n        return ErrorSeverity.MEDIUM;\n      case 'component':\n      default:\n        return ErrorSeverity.LOW;\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n      retryCount: this.state.retryCount + 1\n    });\n  };\n\n  goHome = () => {\n    window.location.href = '/';\n  };\n\n  reportError = () => {\n    if (this.state.error) {\n      // Create error report\n      const report = {\n        error: this.state.error.toJSON(),\n        errorInfo: this.state.errorInfo,\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        timestamp: new Date().toISOString()\n      };\n\n      // Copy to clipboard for user to send\n      navigator.clipboard.writeText(JSON.stringify(report, null, 2));\n\n      // Could also open email client or feedback form\n      const subject = encodeURIComponent(`Erreur Application: ${this.state.error.code}`);\n      const body = encodeURIComponent(`Une erreur s'est produite:\\n\\nCode: ${this.state.error.code}\\nMessage: ${this.state.error.message}\\n\\nLes détails techniques ont été copiés dans le presse-papiers.`);\n      window.open(`mailto:support@example.com?subject=${subject}&body=${body}`);\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Use custom fallback if provided\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      const error = this.state.error;\n      const level = this.props.level || 'component';\n      const canRetry = this.state.retryCount < this.maxRetries;\n      const showDetailedError = process.env.NODE_ENV === 'development';\n\n      // Component-level errors show smaller UI\n      if (level === 'component') {\n        return (\n          <div className=\"border border-destructive/20 rounded-lg p-4 bg-destructive/5\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n              <span className=\"text-sm font-medium text-destructive\">Erreur de Composant</span>\n              {error && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {error.code}\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              {error?.userMessage || 'Un composant a rencontré une erreur.'}\n            </p>\n\n            {showDetailedError && error && (\n              <details className=\"text-xs bg-background p-2 rounded border mb-3\">\n                <summary className=\"cursor-pointer font-medium\">Détails techniques</summary>\n                <pre className=\"mt-2 text-xs overflow-auto\">\n                  {error.message}\n                </pre>\n              </details>\n            )}\n\n            <div className=\"flex gap-2\">\n              {canRetry && (\n                <Button size=\"sm\" onClick={this.reset} className=\"gap-1\">\n                  <RefreshCw className=\"h-3 w-3\" />\n                  Réessayer\n                </Button>\n              )}\n              <Button size=\"sm\" variant=\"outline\" onClick={() => window.location.reload()}>\n                Recharger\n              </Button>\n            </div>\n          </div>\n        );\n      }\n\n      // Page-level or feature-level errors show full-screen UI\n      return (\n        <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n          <Card className=\"w-full max-w-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-destructive flex items-center justify-center gap-2\">\n                {level === 'page' ? 'Erreur de Page' : 'Erreur de Fonctionnalité'}\n                {error && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    {error.code}\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <p className=\"text-muted-foreground\">\n                  {error?.userMessage || 'Une erreur inattendue s\\'est produite.'}\n                </p>\n\n                {error?.severity === ErrorSeverity.HIGH && (\n                  <p className=\"text-sm text-destructive mt-2\">\n                    Cette erreur nécessite une attention immédiate.\n                  </p>\n                )}\n              </div>\n\n              {showDetailedError && error && (\n                <details className=\"text-left text-sm bg-destructive/5 p-3 rounded border\">\n                  <summary className=\"cursor-pointer font-medium mb-2\">\n                    Détails de l'erreur\n                  </summary>\n                  <div className=\"space-y-2\">\n                    <div>\n                      <strong>Message:</strong> <code className=\"text-xs\">{error.message}</code>\n                    </div>\n                    <div>\n                      <strong>Source:</strong> <code className=\"text-xs\">{error.source}</code>\n                    </div>\n                    <div>\n                      <strong>Catégorie:</strong> <code className=\"text-xs\">{error.category}</code>\n                    </div>\n                    <div>\n                      <strong>ID:</strong> <code className=\"text-xs\">{error.id}</code>\n                    </div>\n                    {this.state.errorInfo?.componentStack && (\n                      <div>\n                        <strong>Stack:</strong>\n                        <pre className=\"text-xs mt-1 overflow-auto max-h-32 bg-background p-2 rounded\">\n                          {this.state.errorInfo.componentStack}\n                        </pre>\n                      </div>\n                    )}\n                  </div>\n                </details>\n              )}\n\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"flex gap-2 justify-center\">\n                  {canRetry && (\n                    <Button onClick={this.reset} className=\"gap-2\">\n                      <RefreshCw className=\"h-4 w-4\" />\n                      Réessayer {this.state.retryCount > 0 && `(${this.state.retryCount}/${this.maxRetries})`}\n                    </Button>\n                  )}\n\n                  <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                    Recharger la page\n                  </Button>\n                </div>\n\n                <div className=\"flex gap-2 justify-center\">\n                  <Button variant=\"ghost\" onClick={this.goHome} className=\"gap-2\">\n                    <Home className=\"h-4 w-4\" />\n                    Retour à l'accueil\n                  </Button>\n\n                  <Button variant=\"ghost\" onClick={this.reportError} className=\"gap-2\">\n                    <Bug className=\"h-4 w-4\" />\n                    Signaler l'erreur\n                  </Button>\n                </div>\n\n                {this.state.retryCount >= this.maxRetries && (\n                  <div className=\"text-center text-sm text-muted-foreground mt-4 p-3 bg-muted rounded\">\n                    Trop de tentatives échouées. Veuillez recharger la page ou contacter le support.\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n\n// Hook for functional components error handling\nexport const useErrorBoundary = () => {\n  const throwError = (error: Error | AppError) => {\n    throw error;\n  };\n\n  return { throwError };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\layout\\MobileBottomNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\layout\\ModernDashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\providers\\ToastProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":15,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":15,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\sidebar\\AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\support\\ChatBot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\support\\ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\support\\QuickActionCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\support\\SupportWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":48,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":48,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\custom-toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\enhanced-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":130,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":130,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\loading-states.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\navigation-menu.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":112,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":112,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\search-bar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":637,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":637,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":4,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":4,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\config\\api.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\config\\api.secure.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\config\\unified.api.config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4304,4307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4304,4307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4364,4367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4364,4367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified API Configuration\n * Consolidates all API configuration patterns into a single, secure source\n * - Environment-based configuration with validation\n * - Feature flags for conditional service enabling\n * - Security-first design with proper secret handling\n * - Type-safe configuration interfaces\n * - Runtime validation and health checks\n */\n\nimport { logger } from '@/lib/logger';\n\n// Environment variable validation\ninterface EnvironmentConfig {\n  // Core API\n  API_BASE_URL: string;\n  NODE_ENV: 'development' | 'production' | 'test';\n  \n  // Supabase\n  VITE_SUPABASE_URL: string;\n  VITE_SUPABASE_ANON_KEY: string;\n  \n  // VAPI (Voice AI)\n  VITE_VAPI_PUBLIC_KEY?: string;\n  VITE_VAPI_ASSISTANT_ID?: string;\n  VITE_VAPI_WEBHOOK_URL?: string;\n  \n  // Google Maps\n  VITE_GOOGLE_MAPS_API_KEY?: string;\n  \n  // Twilio\n  VITE_TWILIO_ACCOUNT_SID?: string;\n  \n  // n8n Automation\n  VITE_N8N_BASE_URL?: string;\n  \n  // Feature flags\n  VITE_ENABLE_VAPI?: string;\n  VITE_ENABLE_MAPS?: string;\n  VITE_ENABLE_SMS?: string;\n  VITE_ENABLE_AUTOMATION?: string;\n  VITE_ENABLE_ANALYTICS?: string;\n}\n\n// Unified configuration interface\nexport interface UnifiedAPIConfig {\n  // Environment\n  environment: 'development' | 'production' | 'test';\n  isDevelopment: boolean;\n  isProduction: boolean;\n  \n  // Core API settings\n  api: {\n    baseUrl: string;\n    timeout: number;\n    retries: number;\n    enableLogging: boolean;\n  };\n  \n  // Authentication & Security\n  auth: {\n    supabaseUrl: string;\n    supabaseAnonKey: string;\n    enableAutoRefresh: boolean;\n    tokenExpiryBuffer: number; // seconds\n  };\n  \n  // Feature-based service configuration\n  services: {\n    vapi: {\n      enabled: boolean;\n      publicKey?: string;\n      assistantId?: string;\n      webhookUrl?: string;\n      apiUrl: string;\n    };\n    maps: {\n      enabled: boolean;\n      apiKey?: string;\n      apiUrl: string;\n    };\n    sms: {\n      enabled: boolean;\n      accountSid?: string;\n      apiUrl: string;\n    };\n    automation: {\n      enabled: boolean;\n      baseUrl?: string;\n      apiUrl: string;\n    };\n    analytics: {\n      enabled: boolean;\n      apiUrl: string;\n    };\n  };\n  \n  // Request defaults\n  defaults: {\n    headers: Record<string, string>;\n    timeout: number;\n    retries: number;\n    cacheTimeout: number;\n  };\n  \n  // Circuit breaker settings\n  circuitBreaker: {\n    enabled: boolean;\n    failureThreshold: number;\n    recoveryTimeout: number;\n    monitoringPeriod: number;\n  };\n  \n  // Rate limiting\n  rateLimit: {\n    enabled: boolean;\n    requestsPerMinute: number;\n    burstLimit: number;\n  };\n  \n  // Caching\n  cache: {\n    enabled: boolean;\n    defaultTtl: number;\n    maxSize: number;\n  };\n}\n\n/**\n * Environment variable loading with validation\n */\nfunction getEnvironmentConfig(): EnvironmentConfig {\n  // Get environment variables with proper typing\n  const env = {\n    API_BASE_URL: getEnvVar('VITE_API_BASE_URL', 'http://localhost:8080'),\n    NODE_ENV: (getEnvVar('NODE_ENV', 'development') as 'development' | 'production' | 'test'),\n    \n    // Required Supabase config\n    VITE_SUPABASE_URL: getEnvVar('VITE_SUPABASE_URL', '', true),\n    VITE_SUPABASE_ANON_KEY: getEnvVar('VITE_SUPABASE_ANON_KEY', '', true),\n    \n    // Optional service configs\n    VITE_VAPI_PUBLIC_KEY: getEnvVar('VITE_VAPI_PUBLIC_KEY'),\n    VITE_VAPI_ASSISTANT_ID: getEnvVar('VITE_VAPI_ASSISTANT_ID'),\n    VITE_VAPI_WEBHOOK_URL: getEnvVar('VITE_VAPI_WEBHOOK_URL'),\n    \n    VITE_GOOGLE_MAPS_API_KEY: getEnvVar('VITE_GOOGLE_MAPS_API_KEY'),\n    \n    VITE_TWILIO_ACCOUNT_SID: getEnvVar('VITE_TWILIO_ACCOUNT_SID'),\n    \n    VITE_N8N_BASE_URL: getEnvVar('VITE_N8N_BASE_URL'),\n    \n    // Feature flags\n    VITE_ENABLE_VAPI: getEnvVar('VITE_ENABLE_VAPI', 'true'),\n    VITE_ENABLE_MAPS: getEnvVar('VITE_ENABLE_MAPS', 'true'),\n    VITE_ENABLE_SMS: getEnvVar('VITE_ENABLE_SMS', 'true'),\n    VITE_ENABLE_AUTOMATION: getEnvVar('VITE_ENABLE_AUTOMATION', 'true'),\n    VITE_ENABLE_ANALYTICS: getEnvVar('VITE_ENABLE_ANALYTICS', 'true'),\n  };\n  \n  // Validate required variables\n  validateRequiredConfig(env);\n  \n  return env;\n}\n\n/**\n * Get environment variable with optional validation\n */\nfunction getEnvVar(key: string, defaultValue?: string, required = false): string {\n  const value = import.meta.env?.[key] || \n               (globalThis as any)?.process?.env?.[key] || \n               (globalThis as any)?.[key] ||\n               defaultValue;\n  \n  if (required && !value) {\n    throw new Error(`Required environment variable ${key} is not set`);\n  }\n  \n  return value || '';\n}\n\n/**\n * Validate required configuration\n */\nfunction validateRequiredConfig(env: EnvironmentConfig): void {\n  const requiredFields: Array<keyof EnvironmentConfig> = [\n    'VITE_SUPABASE_URL',\n    'VITE_SUPABASE_ANON_KEY',\n  ];\n  \n  const missing = requiredFields.filter(field => !env[field]);\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n  }\n  \n  // Validate URLs\n  validateUrl(env.VITE_SUPABASE_URL, 'VITE_SUPABASE_URL');\n  if (env.VITE_N8N_BASE_URL) {\n    validateUrl(env.VITE_N8N_BASE_URL, 'VITE_N8N_BASE_URL');\n  }\n}\n\n/**\n * Validate URL format\n */\nfunction validateUrl(url: string, name: string): void {\n  try {\n    new URL(url);\n  } catch {\n    throw new Error(`Invalid URL format for ${name}: ${url}`);\n  }\n}\n\n/**\n * Check if feature is enabled\n */\nfunction isFeatureEnabled(feature: string, env: EnvironmentConfig): boolean {\n  const envKey = `VITE_ENABLE_${feature.toUpperCase()}` as keyof EnvironmentConfig;\n  const value = env[envKey];\n  return value === 'true' || value === '1';\n}\n\n/**\n * Create unified configuration from environment\n */\nfunction createUnifiedConfig(): UnifiedAPIConfig {\n  const env = getEnvironmentConfig();\n  \n  return {\n    environment: env.NODE_ENV,\n    isDevelopment: env.NODE_ENV === 'development',\n    isProduction: env.NODE_ENV === 'production',\n    \n    api: {\n      baseUrl: env.API_BASE_URL,\n      timeout: 30000,\n      retries: 3,\n      enableLogging: env.NODE_ENV === 'development',\n    },\n    \n    auth: {\n      supabaseUrl: env.VITE_SUPABASE_URL,\n      supabaseAnonKey: env.VITE_SUPABASE_ANON_KEY,\n      enableAutoRefresh: true,\n      tokenExpiryBuffer: 300, // 5 minutes\n    },\n    \n    services: {\n      vapi: {\n        enabled: isFeatureEnabled('vapi', env) && Boolean(env.VITE_VAPI_PUBLIC_KEY),\n        publicKey: env.VITE_VAPI_PUBLIC_KEY,\n        assistantId: env.VITE_VAPI_ASSISTANT_ID,\n        webhookUrl: env.VITE_VAPI_WEBHOOK_URL,\n        apiUrl: 'https://api.vapi.ai',\n      },\n      maps: {\n        enabled: isFeatureEnabled('maps', env) && Boolean(env.VITE_GOOGLE_MAPS_API_KEY),\n        apiKey: env.VITE_GOOGLE_MAPS_API_KEY,\n        apiUrl: 'https://maps.googleapis.com/maps/api',\n      },\n      sms: {\n        enabled: isFeatureEnabled('sms', env) && Boolean(env.VITE_TWILIO_ACCOUNT_SID),\n        accountSid: env.VITE_TWILIO_ACCOUNT_SID,\n        apiUrl: 'https://api.twilio.com',\n      },\n      automation: {\n        enabled: isFeatureEnabled('automation', env) && Boolean(env.VITE_N8N_BASE_URL),\n        baseUrl: env.VITE_N8N_BASE_URL,\n        apiUrl: env.VITE_N8N_BASE_URL || 'http://localhost:5678',\n      },\n      analytics: {\n        enabled: isFeatureEnabled('analytics', env),\n        apiUrl: `${env.API_BASE_URL}/api/analytics`,\n      },\n    },\n    \n    defaults: {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'X-Client-Version': '1.0.0',\n      },\n      timeout: 30000,\n      retries: 3,\n      cacheTimeout: 5 * 60 * 1000, // 5 minutes\n    },\n    \n    circuitBreaker: {\n      enabled: true,\n      failureThreshold: 5,\n      recoveryTimeout: 60000, // 1 minute\n      monitoringPeriod: 10000, // 10 seconds\n    },\n    \n    rateLimit: {\n      enabled: true,\n      requestsPerMinute: env.NODE_ENV === 'production' ? 60 : 200,\n      burstLimit: env.NODE_ENV === 'production' ? 10 : 50,\n    },\n    \n    cache: {\n      enabled: true,\n      defaultTtl: 5 * 60 * 1000, // 5 minutes\n      maxSize: 100, // 100 entries\n    },\n  };\n}\n\n/**\n * Configuration validation\n */\nexport function validateConfig(config: UnifiedAPIConfig): {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n} {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // Validate required fields\n  if (!config.auth.supabaseUrl) {\n    errors.push('Supabase URL is required');\n  }\n  \n  if (!config.auth.supabaseAnonKey) {\n    errors.push('Supabase anonymous key is required');\n  }\n  \n  // Check service configuration\n  if (config.services.vapi.enabled && !config.services.vapi.publicKey) {\n    warnings.push('VAPI service enabled but public key not configured');\n  }\n  \n  if (config.services.maps.enabled && !config.services.maps.apiKey) {\n    warnings.push('Maps service enabled but API key not configured');\n  }\n  \n  if (config.services.sms.enabled && !config.services.sms.accountSid) {\n    warnings.push('SMS service enabled but account SID not configured');\n  }\n  \n  // Validate timeout values\n  if (config.api.timeout < 1000) {\n    warnings.push('API timeout is very low (<1s)');\n  }\n  \n  if (config.api.timeout > 60000) {\n    warnings.push('API timeout is very high (>60s)');\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n  };\n}\n\n/**\n * Get service health check endpoints\n */\nexport function getHealthCheckEndpoints(config: UnifiedAPIConfig): Record<string, string> {\n  const endpoints: Record<string, string> = {\n    api: `${config.api.baseUrl}/health`,\n    supabase: `${config.auth.supabaseUrl}/rest/v1/`,\n  };\n  \n  if (config.services.vapi.enabled) {\n    endpoints.vapi = `${config.services.vapi.apiUrl}/health`;\n  }\n  \n  if (config.services.automation.enabled && config.services.automation.baseUrl) {\n    endpoints.n8n = `${config.services.automation.baseUrl}/healthz`;\n  }\n  \n  return endpoints;\n}\n\n/**\n * Create configuration singleton\n */\nlet configInstance: UnifiedAPIConfig | null = null;\n\nexport function getUnifiedConfig(): UnifiedAPIConfig {\n  if (!configInstance) {\n    try {\n      configInstance = createUnifiedConfig();\n      \n      // Validate configuration\n      const validation = validateConfig(configInstance);\n      \n      if (!validation.valid) {\n        logger.error('Configuration validation failed', {\n          errors: validation.errors,\n        });\n        throw new Error(`Configuration errors: ${validation.errors.join(', ')}`);\n      }\n      \n      if (validation.warnings.length > 0) {\n        logger.warn('Configuration warnings', {\n          warnings: validation.warnings,\n        });\n      }\n      \n      logger.info('Unified API configuration initialized', {\n        environment: configInstance.environment,\n        enabledServices: Object.entries(configInstance.services)\n          .filter(([, service]) => service.enabled)\n          .map(([name]) => name),\n      });\n      \n    } catch (error) {\n      logger.error('Failed to initialize configuration', { error });\n      throw error;\n    }\n  }\n  \n  return configInstance;\n}\n\n/**\n * Reset configuration (useful for testing)\n */\nexport function resetConfig(): void {\n  configInstance = null;\n}\n\n/**\n * Check if a service is properly configured and enabled\n */\nexport function isServiceEnabled(serviceName: keyof UnifiedAPIConfig['services']): boolean {\n  const config = getUnifiedConfig();\n  return config.services[serviceName].enabled;\n}\n\n/**\n * Get service configuration\n */\nexport function getServiceConfig<T extends keyof UnifiedAPIConfig['services']>(\n  serviceName: T\n): UnifiedAPIConfig['services'][T] {\n  const config = getUnifiedConfig();\n  return config.services[serviceName];\n}\n\n/**\n * Export the unified configuration\n */\nexport const unifiedConfig = getUnifiedConfig();\n\n// Export configuration object for backwards compatibility\nexport default unifiedConfig;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\contexts\\AuthContext.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\analytics\\CallsChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\analytics\\ConversionFunnel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\analytics\\RevenueChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\analytics\\__tests__\\CallsChart.smoke.spec.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[366,369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[366,369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport CallsChart from '../CallsChart';\n\n// Mock chart components\nvi.mock('recharts', () => ({\n  ResponsiveContainer: ({ children }: any) => <div>{children}</div>,\n  LineChart: ({ children }: any) => <div>{children}</div>,\n  Line: () => null,\n  XAxis: () => null,\n  YAxis: () => null,\n  CartesianGrid: () => null,\n  Tooltip: () => null,\n  Legend: () => null,\n}));\n\ndescribe('CallsChart - Smoke Test', () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n  it('should render without crashing', () => {\n    const { container } = render(\n      <QueryClientProvider client={queryClient}>\n        <CallsChart />\n      </QueryClientProvider>\n    );\n\n    expect(container).toBeTruthy();\n  });\n\n  it('should have proper structure', () => {\n    const { container } = render(\n      <QueryClientProvider client={queryClient}>\n        <CallsChart />\n      </QueryClientProvider>\n    );\n\n    const chartElement = container.querySelector('div');\n    expect(chartElement).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\crm\\CRMDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":98,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":20}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5197,5200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5197,5200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  Users, \n  MessageSquare, \n  Calendar, \n  DollarSign,\n  AlertTriangle,\n  TrendingUp,\n  Clock,\n  Activity\n} from 'lucide-react';\nimport { statsService, alertService, interventionService, smsService, realtimeService } from '@/services/crm/client';\nimport type { InternalAlert, Intervention, SMSMessage } from '@/shared/types/crm';\nimport { ClientsView } from './ClientsView';\nimport { cn } from '@/lib/utils';\nimport { toast } from 'sonner';\n\nexport function CRMDashboard() {\n  const [activeView, setActiveView] = useState<'dashboard' | 'clients' | 'sms' | 'interventions' | 'alerts'>('dashboard');\n  const [_realtimeAlerts, setRealtimeAlerts] = useState<InternalAlert[]>([]);\n\n  // Fetch statistics\n  const { data: stats } = useQuery({\n    queryKey: ['crm-stats'],\n    queryFn: () => statsService.getStats(),\n    refetchInterval: 60000 // Refresh every minute\n  });\n\n  // Fetch active alerts\n  const { data: alerts = [], refetch: refetchAlerts } = useQuery({\n    queryKey: ['active-alerts'],\n    queryFn: () => alertService.getActiveAlerts(),\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  // Fetch today's interventions\n  const { data: todayInterventions = [] } = useQuery({\n    queryKey: ['today-interventions'],\n    queryFn: () => interventionService.getTodayInterventions(),\n    refetchInterval: 60000\n  });\n\n  // Fetch recent SMS\n  const { data: recentSMS = [] } = useQuery({\n    queryKey: ['recent-sms'],\n    queryFn: () => smsService.getSMSMessages({ \n      dateFrom: new Date().toISOString().split('T')[0] \n    }),\n    refetchInterval: 30000\n  });\n\n  // Setup real-time subscriptions\n  useEffect(() => {\n    // Subscribe to alerts\n    const alertChannel = realtimeService.subscribeToAlerts((payload) => {\n      if (payload.eventType === 'INSERT') {\n        const newAlert = payload.new as InternalAlert;\n        setRealtimeAlerts(prev => [newAlert, ...prev]);\n        toast.error(`🚨 Nouvelle alerte ${newAlert.priority}!`, {\n          description: newAlert.title,\n          duration: 10000\n        });\n        refetchAlerts();\n      }\n    });\n\n    // Subscribe to SMS\n    const smsChannel = realtimeService.subscribeToSMS((payload) => {\n      if (payload.eventType === 'INSERT') {\n        toast.success('📱 SMS envoyé', {\n          description: 'Un nouveau SMS a été envoyé à l\\'équipe'\n        });\n      }\n    });\n\n    // Subscribe to interventions\n    const interventionChannel = realtimeService.subscribeToInterventions((payload) => {\n      if (payload.eventType === 'UPDATE' && payload.new.status === 'completed') {\n        toast.success('✅ Intervention complétée', {\n          description: `Service complété pour ${payload.new.client_name}`\n        });\n      }\n    });\n\n    return () => {\n      realtimeService.unsubscribe(alertChannel);\n      realtimeService.unsubscribe(smsChannel);\n      realtimeService.unsubscribe(interventionChannel);\n    };\n  }, [refetchAlerts]);\n\n  const handleAcknowledgeAlert = async (alertId: string) => {\n    try {\n      await alertService.acknowledgeAlert(alertId, 'current-user');\n      toast.success('Alerte confirmée');\n      refetchAlerts();\n    } catch (_error) {\n      toast.error('Erreur lors de la confirmation');\n    }\n  };\n\n  const handleResolveAlert = async (alertId: string) => {\n    try {\n      await alertService.resolveAlert(alertId, 'current-user');\n      toast.success('Alerte résolue');\n      refetchAlerts();\n    } catch (_error) {\n      toast.error('Erreur lors de la résolution');\n    }\n  };\n\n  const formatCurrency = (amount?: number) => {\n    return new Intl.NumberFormat('fr-CA', {\n      style: 'currency',\n      currency: 'CAD'\n    }).format(amount || 0);\n  };\n\n  // Removed getPriorityColor - using global function at bottom of file\n\n  // Navigation tabs\n  const tabs = [\n    { id: 'dashboard', label: 'Tableau de bord', icon: Activity },\n    { id: 'clients', label: 'Clients', icon: Users },\n    { id: 'interventions', label: 'Interventions', icon: Calendar },\n    { id: 'sms', label: 'Messages SMS', icon: MessageSquare },\n    { id: 'alerts', label: 'Alertes', icon: AlertTriangle, badge: alerts.length }\n  ];\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">CRM Drain Fortin</h1>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-sm text-gray-500\">\n              {new Date().toLocaleDateString('fr-CA', { \n                weekday: 'long', \n                year: 'numeric', \n                month: 'long', \n                day: 'numeric' \n              })}\n            </span>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"flex gap-2 mt-4\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onClick={() => setActiveView(tab.id as any)}\n                className={cn(\n                  \"flex items-center gap-2 px-4 py-2 rounded-lg transition-colors relative\",\n                  activeView === tab.id \n                    ? \"bg-blue-600 text-white\" \n                    : \"hover:bg-gray-100 text-gray-700\"\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n                {tab.badge && tab.badge > 0 && (\n                  <span className={cn(\n                    \"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs font-bold rounded-full\",\n                    activeView === tab.id ? \"bg-red-500 text-white\" : \"bg-red-600 text-white\"\n                  )}>\n                    {tab.badge}\n                  </span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {activeView === 'dashboard' && (\n          <div className=\"p-6 space-y-6 overflow-y-auto h-full\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <StatCard\n                title=\"Clients actifs\"\n                value={stats?.activeClients || 0}\n                total={stats?.totalClients || 0}\n                icon={Users}\n                color=\"blue\"\n              />\n              <StatCard\n                title=\"Interventions aujourd'hui\"\n                value={stats?.todayInterventions || 0}\n                total={stats?.totalInterventions || 0}\n                icon={Calendar}\n                color=\"green\"\n              />\n              <StatCard\n                title=\"SMS envoyés\"\n                value={stats?.todaySMS || 0}\n                total={stats?.totalSMS || 0}\n                icon={MessageSquare}\n                color=\"purple\"\n              />\n              <StatCard\n                title=\"Revenus du mois\"\n                value={formatCurrency(stats?.monthRevenue)}\n                subtitle={`Total: ${formatCurrency(stats?.totalRevenue)}`}\n                icon={DollarSign}\n                color=\"yellow\"\n              />\n            </div>\n\n            {/* Active Alerts */}\n            {alerts.length > 0 && (\n              <div className=\"bg-white rounded-lg border\">\n                <div className=\"p-4 border-b\">\n                  <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                    Alertes actives ({alerts.length})\n                  </h2>\n                </div>\n                <div className=\"divide-y max-h-64 overflow-y-auto\">\n                  {alerts.slice(0, 5).map((alert) => (\n                    <AlertItem \n                      key={alert.id} \n                      alert={alert}\n                      onAcknowledge={handleAcknowledgeAlert}\n                      onResolve={handleResolveAlert}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Today's Interventions */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white rounded-lg border\">\n                <div className=\"p-4 border-b\">\n                  <h2 className=\"text-lg font-semibold\">Interventions du jour</h2>\n                </div>\n                <div className=\"divide-y max-h-96 overflow-y-auto\">\n                  {todayInterventions.length === 0 ? (\n                    <div className=\"p-8 text-center text-gray-500\">\n                      Aucune intervention prévue aujourd'hui\n                    </div>\n                  ) : (\n                    todayInterventions.map((intervention) => (\n                      <InterventionItem key={intervention.id} intervention={intervention} />\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Recent SMS */}\n              <div className=\"bg-white rounded-lg border\">\n                <div className=\"p-4 border-b\">\n                  <h2 className=\"text-lg font-semibold\">SMS récents</h2>\n                </div>\n                <div className=\"divide-y max-h-96 overflow-y-auto\">\n                  {recentSMS.length === 0 ? (\n                    <div className=\"p-8 text-center text-gray-500\">\n                      Aucun SMS envoyé aujourd'hui\n                    </div>\n                  ) : (\n                    recentSMS.slice(0, 5).map((sms) => (\n                      <SMSItem key={sms.id} sms={sms} />\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Performance Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <MetricCard\n                title=\"Temps de réponse moyen\"\n                value={`${stats?.averageResponseTime || 15} min`}\n                icon={Clock}\n                trend=\"+5%\"\n                trendUp={false}\n              />\n              <MetricCard\n                title=\"Satisfaction client\"\n                value={`${stats?.customerSatisfaction || 4.7}/5`}\n                icon={TrendingUp}\n                trend=\"+0.2\"\n                trendUp={true}\n              />\n              <MetricCard\n                title=\"Alertes P1/P2\"\n                value={`${stats?.p1Alerts || 0} / ${stats?.p2Alerts || 0}`}\n                icon={AlertTriangle}\n                subtitle=\"Urgentes / Prioritaires\"\n              />\n            </div>\n          </div>\n        )}\n\n        {activeView === 'clients' && <ClientsView />}\n        \n        {/* Other views would be implemented similarly */}\n        {activeView === 'interventions' && (\n          <div className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Gestion des interventions</h2>\n            {/* InterventionsView component */}\n          </div>\n        )}\n        \n        {activeView === 'sms' && (\n          <div className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Historique SMS</h2>\n            {/* SMSView component */}\n          </div>\n        )}\n        \n        {activeView === 'alerts' && (\n          <div className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Centre d'alertes</h2>\n            {/* AlertsView component */}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Stat Card Component\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  total?: string | number;\n  subtitle?: string;\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  color: 'blue' | 'green' | 'purple' | 'orange' | 'red';\n}\n\nfunction StatCard({\n  title,\n  value,\n  total,\n  subtitle,\n  icon: Icon,\n  color\n}: StatCardProps) {\n  const colorClasses = {\n    blue: 'bg-blue-50 text-blue-600',\n    green: 'bg-green-50 text-green-600',\n    purple: 'bg-purple-50 text-purple-600',\n    yellow: 'bg-yellow-50 text-yellow-600'\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-semibold mt-1\">{value}</p>\n          {total && (\n            <p className=\"text-sm text-gray-500 mt-1\">\n              sur {total} total\n            </p>\n          )}\n          {subtitle && (\n            <p className=\"text-sm text-gray-500 mt-1\">{subtitle}</p>\n          )}\n        </div>\n        <div className={cn(\n          \"p-3 rounded-lg\",\n          colorClasses[color as keyof typeof colorClasses]\n        )}>\n          <Icon className=\"h-6 w-6\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Metric Card Component\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  trend?: string;\n  trendUp?: boolean;\n  subtitle?: string;\n}\n\nfunction MetricCard({ title, value, icon: Icon, trend, trendUp, subtitle }: MetricCardProps) {\n  return (\n    <div className=\"bg-white rounded-lg border p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <Icon className=\"h-5 w-5 text-gray-400\" />\n        {trend && (\n          <span className={cn(\n            \"text-sm font-medium\",\n            trendUp ? \"text-green-600\" : \"text-red-600\"\n          )}>\n            {trend}\n          </span>\n        )}\n      </div>\n      <p className=\"text-2xl font-semibold\">{value}</p>\n      <p className=\"text-sm text-gray-600 mt-1\">{title}</p>\n      {subtitle && (\n        <p className=\"text-xs text-gray-500 mt-1\">{subtitle}</p>\n      )}\n    </div>\n  );\n}\n\n// Alert Item Component\ninterface AlertItemProps {\n  alert: {\n    id: string;\n    type: string;\n    title: string;\n    message: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    timestamp: string;\n  };\n  onAcknowledge: (id: string) => void;\n  onResolve: (id: string) => void;\n}\n\nfunction AlertItem({ alert, onAcknowledge, onResolve }: AlertItemProps) {\n  return (\n    <div className=\"p-4 hover:bg-gray-50\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2\">\n            <span className={cn(\n              \"px-2 py-0.5 text-xs font-medium rounded-full border\",\n              getPriorityColor(alert.priority)\n            )}>\n              {alert.priority}\n            </span>\n            <h3 className=\"font-medium\">{alert.title}</h3>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Client: {alert.client_name} - {alert.client_phone}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Il y a {alert.minutes_since_created} minutes\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {alert.status === 'pending' && (\n            <button\n              onClick={() => onAcknowledge(alert.id)}\n              className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Confirmer\n            </button>\n          )}\n          {alert.status === 'acknowledged' && (\n            <button\n              onClick={() => onResolve(alert.id)}\n              className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              Résoudre\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Intervention Item Component\nfunction InterventionItem({ intervention }: { intervention: Intervention }) {\n  const statusColors: Record<string, string> = {\n    pending: 'bg-gray-100 text-gray-600',\n    scheduled: 'bg-blue-100 text-blue-600',\n    in_progress: 'bg-yellow-100 text-yellow-600',\n    completed: 'bg-green-100 text-green-600',\n    cancelled: 'bg-red-100 text-red-600'\n  };\n\n  return (\n    <div className=\"p-4 hover:bg-gray-50\">\n      <div className=\"flex items-start justify-between\">\n        <div>\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium\">{intervention.service_type}</h3>\n            <span className={cn(\n              \"px-2 py-0.5 text-xs rounded-full\",\n              statusColors[intervention.status || 'pending']\n            )}>\n              {intervention.status}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {intervention.client_name} - {intervention.client_phone}\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            {intervention.service_address}\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-sm font-medium\">\n            {intervention.scheduled_time}\n          </p>\n          {intervention.technician_name && (\n            <p className=\"text-xs text-gray-500\">\n              {intervention.technician_name}\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// SMS Item Component\nfunction SMSItem({ sms }: { sms: SMSMessage }) {\n  return (\n    <div className=\"p-4 hover:bg-gray-50\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2\">\n            <span className={cn(\n              \"px-2 py-0.5 text-xs rounded-full\",\n              sms.status === 'sent' ? 'bg-green-100 text-green-600' : \n              sms.status === 'failed' ? 'bg-red-100 text-red-600' : \n              'bg-gray-100 text-gray-600'\n            )}>\n              {sms.status}\n            </span>\n            {sms.priority && (\n              <span className={cn(\n                \"px-2 py-0.5 text-xs font-medium rounded-full border\",\n                getPriorityColor(sms.priority)\n              )}>\n                {sms.priority}\n              </span>\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n            {sms.message}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            À: {sms.to_number} • {new Date(sms.sent_at || '').toLocaleTimeString('fr-CA')}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getPriorityColor(priority?: string): string {\n  switch (priority) {\n    case 'P1': return 'text-red-600 bg-red-100 border-red-200';\n    case 'P2': return 'text-orange-600 bg-orange-100 border-orange-200';\n    case 'P3': return 'text-yellow-600 bg-yellow-100 border-yellow-200';\n    case 'P4': return 'text-green-600 bg-green-100 border-green-200';\n    default: return 'text-gray-600 bg-gray-100 border-gray-200';\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\crm\\ClientsView.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[18,54],"text":""}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onUpdate' is defined but never used. Allowed unused args must match /^_/u.","line":223,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  Search, \n  Phone, \n  Mail, \n  MapPin, \n  User,\n  Plus,\n  ChevronRight\n} from 'lucide-react';\nimport { clientService } from '@/services/crm/client';\nimport type { Client, CRMFilters } from '@/shared/types/crm';\nimport { cn } from '@/lib/utils';\n\nexport function ClientsView() {\n  const [filters, setFilters] = useState<CRMFilters>({});\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Fetch clients\n  const { data: clients = [], isLoading, refetch } = useQuery({\n    queryKey: ['clients', filters],\n    queryFn: () => clientService.getClients(filters),\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  // Update filters when search changes\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFilters(prev => ({ ...prev, search: searchTerm }));\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n\n  const getPriorityColor = (priority?: string) => {\n    switch (priority) {\n      case 'P1': return 'text-red-600 bg-red-100';\n      case 'P2': return 'text-orange-600 bg-orange-100';\n      case 'P3': return 'text-yellow-600 bg-yellow-100';\n      case 'P4': return 'text-green-600 bg-green-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'inactive': return 'text-gray-600 bg-gray-100';\n      case 'blacklist': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const formatPhone = (phone: string) => {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length === 10) {\n      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    }\n    return phone;\n  };\n\n  const formatCurrency = (amount?: number) => {\n    return new Intl.NumberFormat('fr-CA', {\n      style: 'currency',\n      currency: 'CAD'\n    }).format(amount || 0);\n  };\n\n  return (\n    <div className=\"flex h-full\">\n      {/* Client List */}\n      <div className={cn(\n        \"flex-1 flex flex-col border-r\",\n        selectedClient && \"max-w-md\"\n      )}>\n        {/* Header */}\n        <div className=\"p-4 border-b bg-white\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold\">Clients</h2>\n            <button className=\"p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n              <Plus className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Rechercher par nom, téléphone, email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-2 mt-3\">\n            <select \n              className=\"px-3 py-1 text-sm border rounded-lg\"\n              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value ? [e.target.value] : undefined }))}\n            >\n              <option value=\"\">Tous les statuts</option>\n              <option value=\"active\">Actifs</option>\n              <option value=\"inactive\">Inactifs</option>\n            </select>\n            <select \n              className=\"px-3 py-1 text-sm border rounded-lg\"\n              onChange={(e) => setFilters(prev => ({ ...prev, priority: e.target.value ? [e.target.value] : undefined }))}\n            >\n              <option value=\"\">Toutes priorités</option>\n              <option value=\"P1\">P1 - Urgent</option>\n              <option value=\"P2\">P2 - Municipal</option>\n              <option value=\"P3\">P3 - Majeur</option>\n              <option value=\"P4\">P4 - Standard</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Client List */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : clients.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-32 text-gray-500\">\n              <User className=\"h-8 w-8 mb-2\" />\n              <p>Aucun client trouvé</p>\n            </div>\n          ) : (\n            <div className=\"divide-y\">\n              {clients.map((client) => (\n                <div\n                  key={client.id}\n                  onClick={() => setSelectedClient(client)}\n                  className={cn(\n                    \"p-4 hover:bg-gray-50 cursor-pointer transition-colors\",\n                    selectedClient?.id === client.id && \"bg-blue-50\"\n                  )}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-medium text-gray-900\">\n                          {client.first_name} {client.last_name}\n                          {client.company_name && (\n                            <span className=\"text-gray-500 text-sm ml-2\">\n                              ({client.company_name})\n                            </span>\n                          )}\n                        </h3>\n                        {client.priority_level && (\n                          <span className={cn(\n                            \"px-2 py-0.5 text-xs font-medium rounded-full\",\n                            getPriorityColor(client.priority_level)\n                          )}>\n                            {client.priority_level}\n                          </span>\n                        )}\n                      </div>\n\n                      <div className=\"mt-1 space-y-1\">\n                        <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            {formatPhone(client.phone)}\n                          </div>\n                          {client.email && (\n                            <div className=\"flex items-center gap-1\">\n                              <Mail className=\"h-3 w-3\" />\n                              {client.email}\n                            </div>\n                          )}\n                        </div>\n\n                        {client.address && (\n                          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {client.address}, {client.city}\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                          <span>{client.total_interventions || 0} interventions</span>\n                          <span>{client.total_sms || 0} SMS</span>\n                          <span className=\"font-medium\">\n                            {formatCurrency(client.lifetime_value)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <ChevronRight className=\"h-5 w-5 text-gray-400 mt-1\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Client Details */}\n      {selectedClient && (\n        <div className=\"flex-1 bg-white\">\n          <ClientDetails \n            client={selectedClient}\n            onClose={() => setSelectedClient(null)}\n            onUpdate={() => refetch()}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Client Details Component\nfunction ClientDetails({ \n  client, \n  onClose, \n  onUpdate \n}: { \n  client: Client;\n  onClose: () => void;\n  onUpdate: () => void;\n}) {\n  const { data: history, isLoading } = useQuery({\n    queryKey: ['client-history', client.id],\n    queryFn: () => clientService.getClientHistory(client.id),\n    enabled: !!client.id\n  });\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold\">\n              {client.first_name} {client.last_name}\n            </h2>\n            {client.company_name && (\n              <p className=\"text-gray-600\">{client.company_name}</p>\n            )}\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg\"\n          >\n            ×\n          </button>\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"mt-4 grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm text-gray-500\">Téléphone</label>\n            <p className=\"font-medium\">{formatPhone(client.phone)}</p>\n          </div>\n          {client.email && (\n            <div>\n              <label className=\"text-sm text-gray-500\">Email</label>\n              <p className=\"font-medium\">{client.email}</p>\n            </div>\n          )}\n          {client.address && (\n            <div className=\"col-span-2\">\n              <label className=\"text-sm text-gray-500\">Adresse</label>\n              <p className=\"font-medium\">\n                {client.address}, {client.city} {client.postal_code}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Stats */}\n        <div className=\"mt-4 flex gap-4\">\n          <div className=\"flex-1 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-500\">Interventions</p>\n            <p className=\"text-xl font-semibold\">{client.total_interventions || 0}</p>\n          </div>\n          <div className=\"flex-1 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-500\">SMS envoyés</p>\n            <p className=\"text-xl font-semibold\">{client.total_sms || 0}</p>\n          </div>\n          <div className=\"flex-1 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-500\">Valeur totale</p>\n            <p className=\"text-xl font-semibold\">\n              {formatCurrency(client.lifetime_value)}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* History Tabs */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Interventions */}\n            <div>\n              <h3 className=\"font-medium mb-3\">Interventions récentes</h3>\n              {history?.interventions.length === 0 ? (\n                <p className=\"text-sm text-gray-500\">Aucune intervention</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {history?.interventions.slice(0, 5).map((intervention: {\n                    id: string;\n                    service_type: string;\n                    created_at: string;\n                    status?: string;\n                    description?: string;\n                  }) => (\n                    <div key={intervention.id} className=\"p-3 border rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{intervention.service_type}</span>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(intervention.created_at).toLocaleDateString('fr-CA')}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {intervention.problem_description}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* SMS History */}\n            <div>\n              <h3 className=\"font-medium mb-3\">SMS récents</h3>\n              {history?.sms.length === 0 ? (\n                <p className=\"text-sm text-gray-500\">Aucun SMS</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {history?.sms.slice(0, 5).map((sms: {\n                    id: string;\n                    message: string;\n                    sent_at: string;\n                    status?: string;\n                    direction?: 'inbound' | 'outbound';\n                  }) => (\n                    <div key={sms.id} className=\"p-3 border rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className={cn(\n                          \"px-2 py-0.5 text-xs font-medium rounded-full\",\n                          sms.status === 'sent' ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'\n                        )}>\n                          {sms.status}\n                        </span>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(sms.sent_at).toLocaleDateString('fr-CA')}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                        {sms.message}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction formatPhone(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, '');\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n  return phone;\n}\n\nfunction formatCurrency(amount?: number): string {\n  return new Intl.NumberFormat('fr-CA', {\n    style: 'currency',\n    currency: 'CAD'\n  }).format(amount || 0);\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\dashboard\\CallsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\dashboard\\LiveCallCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\dashboard\\MetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\dashboard\\OnboardingChecklist.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\features\\dashboard\\__tests__\\MetricsCard.smoke.spec.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":119,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/useToast';\nimport { useEmergencyCalls, useClients } from '@/hooks/useProductionData';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Analytics, DashboardMetrics } from \"@/shared/types\";\nimport { logger } from '@/lib/logger';\n\nexport function useAnalytics(dateFrom?: string, dateTo?: string) {\n  const params = new URLSearchParams();\n  if (dateFrom) params.append(\"dateFrom\", dateFrom);\n  if (dateTo) params.append(\"dateTo\", dateTo);\n\n  return useQuery<Analytics[]>({\n    queryKey: [\"/api/analytics\", params.toString()],\n  });\n}\n\nexport function useDashboardMetrics() {\n  return useQuery<DashboardMetrics>({\n    queryKey: [\"/api/analytics/dashboard\"],\n    refetchInterval: 180000, // Optimisé: refresh toutes les 3 minutes\n    staleTime: 120000, // Données fraîches pendant 2 minutes\n    cacheTime: 600000, // Garde en cache 10 minutes\n  });\n}\n\nexport function useCreateAnalytics() {\n  return useMutation({\n    mutationFn: async (analytics: Partial<Analytics>) => {\n      const res = await apiRequest(\"POST\", \"/api/analytics\", analytics);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n    },\n  });\n}\n\n// Enhanced analytics hook for complete page logic\nexport const useAnalyticsPage = () => {\n  const { canAccess } = useAuth();\n  const { success, error: showError } = useToast();\n  const canReadAnalytics = canAccess('analytics', 'read');\n\n  // Use production data hooks\n  const { calls, loading: callsLoading, error: callsError, fetchCalls } = useEmergencyCalls();\n  const { clients, error: clientsError, fetchClients } = useClients();\n\n  // Analytics state\n  const [analytics, setAnalytics] = useState<DashboardMetrics | null>(null);\n  const [analyticsLoading, setAnalyticsLoading] = useState(true);\n  const [analyticsError, setAnalyticsError] = useState<string | null>(null);\n\n  // UI state\n  const [selectedPeriod, setSelectedPeriod] = useState('24h');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  // Fetch analytics with proper error handling\n  const fetchAnalytics = useCallback(async (period: string = selectedPeriod) => {\n    if (!canReadAnalytics) {\n      return;\n    }\n    try {\n      setAnalyticsLoading(true);\n      setAnalyticsError(null);\n\n      const { data, error } = await supabase\n        .rpc('get_dashboard_metrics_optimized', { time_period: period });\n\n      if (error) throw error;\n\n      if (data && typeof data === 'object' && !Array.isArray(data)) {\n        setAnalytics(data as unknown as DashboardMetrics);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Erreur de chargement analytics';\n      setAnalyticsError(errorMessage);\n\n      // Only show toast for critical errors\n      if (process.env.NODE_ENV === 'development') {\n        showError(\"Erreur Analytics\", errorMessage);\n      }\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  }, [selectedPeriod, showError, canReadAnalytics]);\n\n  // Load analytics on mount and period change\n  useEffect(() => {\n    if (!canReadAnalytics) {\n      return;\n    }\n    fetchAnalytics();\n  }, [fetchAnalytics, canReadAnalytics]);\n\n  // Handle period change\n  const handlePeriodChange = useCallback(async (period: string) => {\n    setSelectedPeriod(period);\n    await fetchAnalytics(period);\n  }, [fetchAnalytics]);\n\n  // Handle refresh\n  const handleRefresh = useCallback(async () => {\n    if (!canReadAnalytics) {\n      return;\n    }\n    setIsRefreshing(true);\n    try {\n      await Promise.all([\n        fetchAnalytics(selectedPeriod),\n        fetchCalls(),\n        fetchClients()\n      ]);\n      success(\"Données actualisées\", \"Les métriques ont été mises à jour\");\n    } catch (error) {\n      // Error handling is done in individual functions\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [fetchAnalytics, selectedPeriod, fetchCalls, fetchClients, success, canReadAnalytics]);\n\n  // Real-time metrics calculation\n  const realTimeMetrics = useMemo(() => {\n    try {\n      const safeCallsLength = calls?.length || 0;\n      const activeCalls = calls?.filter(c => c.status === 'active')?.length || 0;\n      const completedCalls = calls?.filter(c => c.status === 'completed')?.length || 0;\n      const urgentCalls = calls?.filter(c => c.priority === 'P1')?.length || 0;\n\n      const totalDuration = calls?.reduce((acc, call) => acc + (call.duration || 0), 0) || 0;\n      const avgDuration = safeCallsLength > 0 ? Math.round(totalDuration / safeCallsLength) : 0;\n\n      const successRate = safeCallsLength > 0\n        ? Math.round((completedCalls / safeCallsLength) * 100)\n        : 0;\n\n      return {\n        totalCalls: safeCallsLength,\n        activeCalls,\n        completedCalls,\n        urgentCalls,\n        avgDuration,\n        successRate\n      };\n    } catch (error) {\n      logger.error('Error calculating real-time metrics', error as Error);\n      return {\n        totalCalls: 0,\n        activeCalls: 0,\n        completedCalls: 0,\n        urgentCalls: 0,\n        avgDuration: 0,\n        successRate: 0\n      };\n    }\n  }, [calls]);\n\n  return {\n    // Data\n    analytics,\n    calls,\n    clients,\n    realTimeMetrics,\n\n    // Loading states\n    analyticsLoading,\n    callsLoading,\n    isRefreshing,\n    isExporting,\n\n    // Error states\n    analyticsError,\n    callsError,\n    clientsError,\n\n    // UI state\n    selectedPeriod,\n\n    // Actions\n    handlePeriodChange,\n    handleRefresh,\n    setIsExporting,\n\n    // Permissions\n    canReadAnalytics\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useAnalyticsExport.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[225,228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[225,228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useToast } from '@/hooks/useToast';\nimport { DashboardMetrics } from '@/types/dashboard';\n\ninterface ExportData {\n  period: string;\n  analytics: DashboardMetrics | null;\n  calls: any[];\n  clients: any[];\n}\n\nexport const useAnalyticsExport = () => {\n  const { success, error: showError } = useToast();\n\n  const handleExport = useCallback(async (\n    format: 'csv' | 'pdf',\n    data: ExportData,\n    setIsExporting: (value: boolean) => void\n  ) => {\n    setIsExporting(true);\n    try {\n      // Simulate export process with validation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const exportData = {\n        period: data.period,\n        analytics: data.analytics || {},\n        calls: data.calls.slice(0, 100), // Limit for performance\n        clients: data.clients.slice(0, 100),\n        exportDate: new Date().toISOString(),\n        exportFormat: format,\n        totalRecords: {\n          calls: data.calls.length,\n          clients: data.clients.length\n        }\n      };\n\n      if (format === 'csv') {\n        const csvContent = [\n          ['Date Export', 'Période', 'Total Appels', 'Appels Actifs', 'Taux Succès', 'Durée Moyenne'],\n          [\n            new Date().toLocaleDateString('fr-FR'),\n            data.period,\n            data.analytics?.totalCalls || data.calls.length,\n            data.analytics?.activeCalls || data.calls.filter(c => c.status === 'active').length,\n            `${data.analytics?.successRate || 0}%`,\n            `${data.analytics?.avgResponseTime || 0}min`\n          ]\n        ].map(row =>\n          row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(',')\n        ).join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `drain-fortin-analytics-${data.period}-${new Date().toISOString().split('T')[0]}.csv`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }\n\n      success(\"Export réussi\", `Rapport ${format.toUpperCase()} généré avec succès`);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Erreur d\\'export';\n      showError(\"Erreur d'export\", `Impossible de générer le rapport: ${errorMessage}`);\n    } finally {\n      setIsExporting(false);\n    }\n  }, [success, showError]);\n\n  return { handleExport };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useAuditLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useCalls.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useClientActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useCompliance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[182,185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[182,185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\n\ninterface FilterConfig<T> {\n  searchFields: (keyof T)[];\n  defaultFilter?: string;\n}\n\nexport function useFilters<T extends Record<string, any>>(\n  items: T[],\n  config: FilterConfig<T>\n) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(config.defaultFilter || \"tous\");\n\n  const filteredItems = useMemo(() => {\n    return items.filter(item => {\n      // Search filter\n      const matchesSearch = config.searchFields.some(field => {\n        const value = item[field];\n        if (typeof value === 'string') {\n          return value.toLowerCase().includes(searchTerm.toLowerCase());\n        }\n        if (typeof value === 'number') {\n          return value.toString().includes(searchTerm);\n        }\n        return false;\n      });\n\n      // Status filter\n      const matchesStatus = statusFilter === \"tous\" || item.status === statusFilter;\n\n      return matchesSearch && matchesStatus;\n    });\n  }, [items, searchTerm, statusFilter, config.searchFields]);\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    statusFilter,\n    setStatusFilter,\n    filteredItems\n  };\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useInterventions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updates' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Intervention } from '@/types/models.types';\n\nexport const useInterventions = () => ({\n  interventions: [{id: '1', status: 'pending'}] as Intervention[],\n  loading: false,\n  error: null,\n  createIntervention: (_: Partial<Intervention>) => Promise.resolve(),\n  updateIntervention: (id: string, updates: Partial<Intervention>) => Promise.resolve(),\n  deleteIntervention: (id: string) => Promise.resolve()\n})","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useNotifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\usePaginatedCRM.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useProductionData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useRealtimeSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useSupabaseData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is defined but never used. Allowed unused args must match /^_/u.","line":66,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { supabaseServices } from \"@/services/supabaseServices\";\nimport type { VapiCall, Lead, SMSLog } from \"@/shared/types/supabase\";\nimport type { SupabaseRealtimePayload } from \"@/shared/types/supabase\";\nimport api from \"@/services/legacyApi\";\n\n// Hook pour récupérer les appels depuis Supabase avec optimisations\nexport function useSupabaseCalls(limit = 10) {\n  return useQuery({\n    queryKey: ['supabase', 'calls', limit],\n    queryFn: () => supabaseServices.getRecentCalls(limit),\n    refetchInterval: 10000, // Refresh toutes les 10 secondes\n    staleTime: 5000, // Data stays fresh for 5 seconds\n    gcTime: 300000, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: false, // Prevent refetch on tab focus\n    refetchOnMount: 'always',\n  });\n}\n\n// Hook pour récupérer les leads\nexport function useSupabaseLeads(limit = 50) {\n  return useQuery({\n    queryKey: ['supabase', 'leads', limit],\n    queryFn: () => supabaseServices.getLeads(),\n    refetchInterval: 30000, // Refresh toutes les 30 secondes\n  });\n}\n\n// Hook pour récupérer les logs SMS\nexport function useSupabaseSMSLogs(limit = 20) {\n  const queryClient = useQueryClient();\n  const query = useQuery({\n    queryKey: ['supabase', 'sms_logs', limit],\n    queryFn: () => supabaseServices.getSMSLogs(limit),\n  });\n\n  useEffect(() => {\n    const subscription = supabaseServices.subscribeToSMSLogs((payload: SupabaseRealtimePayload<SMSLog>) => {\n      queryClient.invalidateQueries({ queryKey: ['supabase', 'sms_logs'] });\n    });\n\n    return () => {\n      supabaseServices.unsubscribeFromTable(subscription);\n    };\n  }, [queryClient]);\n\n  return query;\n}\n\n// Hook pour les métriques du dashboard\nexport function useSupabaseDashboardMetrics() {\n  return useQuery({\n    queryKey: ['supabase', 'dashboard_metrics'],\n    queryFn: () => supabaseServices.getDashboardMetrics(),\n    refetchInterval: 60000, // Refresh chaque minute\n  });\n}\n\n// Hook pour les appels temps réel\nexport function useRealtimeCalls() {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const subscription = supabaseServices.subscribeToNewCalls((payload: SupabaseRealtimePayload<VapiCall>) => {\n      // Invalider et refetch les queries relatives aux appels\n      queryClient.invalidateQueries({ queryKey: ['supabase', 'calls'] });\n      queryClient.invalidateQueries({ queryKey: ['supabase', 'dashboard_metrics'] });\n\n      // Notification removed for production\n    });\n\n    return () => {\n      supabaseServices.unsubscribeFromTable(subscription);\n    };\n  }, [queryClient]);\n}\n\n// Hook pour tester la connexion\nexport function useConnectionStatus() {\n  return useQuery({\n    queryKey: ['connection', 'status'],\n    queryFn: () => api.testConnection(),\n    refetchInterval: 30000, // Test toutes les 30 secondes\n    staleTime: 20000,\n  });\n}\n\n// Hook pour créer un lead\nexport function useCreateLead() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (lead: Partial<Lead>) => {\n      return supabase\n        .from('leads')\n        .insert(lead)\n        .select()\n        .single();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['supabase', 'leads'] });\n    },\n  });\n}\n\n// Hook pour mettre à jour un appel\nexport function useUpdateCall() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<VapiCall> }) => {\n      return supabase\n        .from('vapi_calls')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['supabase', 'calls'] });\n    },\n  });\n}\n\n// Hook pour récupérer les contraintes depuis la DB\nexport function useConstraints() {\n  return useQuery({\n    queryKey: ['supabase', 'constraints'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('system_constraints')\n        .select('*')\n        .order('category', { ascending: true });\n\n      if (error) {\n        // Error handled silently in production\n        return [];\n      }\n\n      return data || [];\n    },\n    staleTime: 300000, // Cache pour 5 minutes\n  });\n}\n\n// Hook pour récupérer les règles de tarification\nexport function usePricingRules() {\n  return useQuery({\n    queryKey: ['supabase', 'pricing_rules'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('pricing_rules')\n        .select('*')\n        .order('priority', { ascending: true });\n\n      if (error) {\n        // Error handled silently in production\n        return [];\n      }\n\n      return data || [];\n    },\n    staleTime: 300000,\n  });\n}\n\n// Types for dashboard data response\ninterface DashboardMetrics {\n  totalCalls: number;\n  totalLeads: number;\n  urgentCalls: number;\n  avgDuration: number;\n  conversionRate: number;\n}\n\ninterface ConnectionStatus {\n  backend: boolean;\n  supabase: boolean;\n  timestamp?: Date;\n  details?: Record<string, unknown>;\n}\n\n// Hook combiné pour toutes les métriques\nexport function useDashboardData() {\n  const calls = useSupabaseCalls(20);\n  const leads = useSupabaseLeads(10);\n  const metrics = useSupabaseDashboardMetrics();\n  const connection = useConnectionStatus();\n\n  // Activer les mises à jour temps réel\n  useRealtimeCalls();\n\n  const defaultMetrics: DashboardMetrics = {\n    totalCalls: 0,\n    totalLeads: 0,\n    urgentCalls: 0,\n    avgDuration: 0,\n    conversionRate: 0\n  };\n\n  const defaultConnection: ConnectionStatus = {\n    backend: false,\n    supabase: false\n  };\n\n  return {\n    calls: Array.isArray(calls.data) ? calls.data : [],\n    leads: Array.isArray(leads.data) ? leads.data : [],\n    metrics: metrics.data || defaultMetrics,\n    connectionStatus: connection.data || defaultConnection,\n    isLoading: calls.isLoading || leads.isLoading || metrics.isLoading,\n    error: calls.error || leads.error || metrics.error,\n  };\n}\n\nexport default {\n  useSupabaseCalls,\n  useSupabaseLeads,\n  useSupabaseSMSLogs,\n  useSupabaseDashboardMetrics,\n  useRealtimeCalls,\n  useConnectionStatus,\n  useCreateLead,\n  useUpdateCall,\n  useConstraints,\n  usePricingRules,\n  useDashboardData,\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useSupport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useUltraFastDashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\hooks\\useWebSocket.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleVapiEvent'. Either include it or remove the dependency array.","line":170,"column":6,"nodeType":"ArrayExpression","endLine":170,"endColumn":125,"suggestions":[{"desc":"Update the dependencies array to be: [getWebSocketUrl, onConnect, handleVapiEvent, onMessage, onError, onDisconnect, reconnectCount, maxReconnectAttempts, reconnectInterval]","fix":{"range":[4826,4945],"text":"[getWebSocketUrl, onConnect, handleVapiEvent, onMessage, onError, onDisconnect, reconnectCount, maxReconnectAttempts, reconnectInterval]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connect' and 'disconnect'. Either include them or remove the dependency array.","line":258,"column":6,"nodeType":"ArrayExpression","endLine":258,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [connect, disconnect]","fix":{"range":[7004,7006],"text":"[connect, disconnect]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ULTRA-OPTIMIZED WEBSOCKET HOOK\n * Real-time updates with automatic reconnection and event handling\n */\n\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { toast } from 'sonner';\nimport { logger } from '@/lib/logger';\nimport type {\n  VAPIWebSocketMessage,\n  AlertWebSocketMessage\n} from '@/types/api.types';\n\nexport interface WebSocketMessage {\n  type: string;\n  data?: {\n    phoneNumber?: string;\n    duration?: number;\n    callId?: string;\n    transcription?: string;\n    severity?: 'low' | 'medium' | 'high' | 'critical';\n    message?: string;\n    [key: string]: unknown;\n  };\n  timestamp?: string;\n}\n\ninterface UseWebSocketOptions {\n  url?: string;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  onMessage?: (message: WebSocketMessage) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n}\n\nexport function useWebSocket({\n  url,\n  reconnectInterval = 3000,\n  maxReconnectAttempts = 5,\n  onMessage,\n  onConnect,\n  onDisconnect,\n  onError\n}: UseWebSocketOptions = {}) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [reconnectCount, setReconnectCount] = useState(0);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const pingIntervalRef = useRef<NodeJS.Timeout>();\n  \n  // Get WebSocket URL\n  const getWebSocketUrl = useCallback(() => {\n    if (url) return url;\n    const envUrl = import.meta.env?.VITE_WS_URL as string | undefined;\n    if (envUrl && typeof envUrl === 'string') return envUrl;\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    return `${protocol}//${host}/ws`;\n  }, [url]);\n\n  // Connect to WebSocket\n  const connect = useCallback(() => {\n    try {\n      const wsUrl = getWebSocketUrl();\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        setIsConnected(true);\n        setReconnectCount(0);\n        onConnect?.();\n        \n        // Subscribe to VAPI events\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          channel: 'vapi-events'\n        }));\n        \n        // Start ping interval to keep connection alive\n        pingIntervalRef.current = setInterval(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({ type: 'ping' }));\n          }\n        }, 30000); // Ping every 30 seconds\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data) as WebSocketMessage;\n          \n          // Handle different message types\n          switch (message.type) {\n            case 'connected':\n              break;\n              \n            case 'pong':\n              // Ping response, connection is alive\n              break;\n              \n            case 'vapi-event':\n              handleVapiEvent(message.data);\n              break;\n              \n            case 'call-started':\n              toast.info(`New call started: ${message.data?.phoneNumber}`);\n              break;\n              \n            case 'call-ended':\n              toast.success(`Call completed (${message.data?.duration}s)`);\n              break;\n              \n            case 'speech-update':\n              // Real-time transcription update\n              break;\n              \n            case 'handoff-triggered':\n              toast.warning('Call requires human intervention!', {\n                duration: 10000,\n                important: true\n              });\n              break;\n              \n            case 'alert':\n              handleAlert(message.data);\n              break;\n              \n            default:\n              onMessage?.(message);\n          }\n        } catch (error) {\n          logger.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      ws.onerror = (error) => {\n        logger.error('WebSocket error:', error);\n        onError?.(error);\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        onDisconnect?.();\n        \n        // Clear ping interval\n        if (pingIntervalRef.current) {\n          clearInterval(pingIntervalRef.current);\n        }\n        \n        // Attempt reconnection\n        if (reconnectCount < maxReconnectAttempts) {\n          const nextReconnectCount = reconnectCount + 1;\n          setReconnectCount(nextReconnectCount);\n          \n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectInterval);\n        } else {\n          toast.error('WebSocket connection lost. Please refresh the page.');\n        }\n      };\n      \n    } catch (error) {\n      logger.error('Failed to establish WebSocket connection:', error);\n      onError?.(error as Event);\n    }\n  }, [getWebSocketUrl, onConnect, onDisconnect, onError, onMessage, reconnectCount, reconnectInterval, maxReconnectAttempts]);\n\n  // Disconnect from WebSocket\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setReconnectCount(0);\n  }, []);\n\n  // Send message through WebSocket\n  const sendMessage = useCallback((message: {\n    type: string;\n    channel?: string;\n    data?: Record<string, unknown>;\n    [key: string]: unknown;\n  }) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    logger.warn('WebSocket not connected, message not sent:', message);\n    return false;\n  }, []);\n\n  // Handle VAPI events\n  const handleVapiEvent = (data: VAPIWebSocketMessage['data']) => {\n    \n    // Update UI based on event type\n    switch (data.type) {\n      case 'assistant-request':\n        // Assistant is processing\n        break;\n      case 'assistant-response':\n        // Assistant responded\n        break;\n      case 'tool-call':\n        // Tool was executed\n        break;\n      default:\n        // Generic VAPI event\n        break;\n    }\n    \n    // Pass to parent handler\n    onMessage?.({\n      type: 'vapi-event',\n      data,\n      timestamp: new Date().toISOString()\n    });\n  };\n\n  // Handle alerts\n  const handleAlert = (alert: AlertWebSocketMessage) => {\n    const severity = alert.severity || 'info';\n    const message = alert.message || 'System alert';\n    \n    switch (severity) {\n      case 'high':\n      case 'critical':\n        toast.error(message, { duration: 10000, important: true });\n        break;\n      case 'medium':\n        toast.warning(message, { duration: 7000 });\n        break;\n      default:\n        toast.info(message);\n    }\n  };\n\n  // Setup and cleanup\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, []); // Empty deps, only run once\n\n  // Public API\n  return {\n    isConnected,\n    reconnectCount,\n    sendMessage,\n    connect,\n    disconnect\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\errors\\AppError.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorContext' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AppError Class - Standardized error implementation\n * Extends the native Error class with additional metadata and functionality\n */\n\nimport {\n  AppError as IAppError,\n  ErrorCategory,\n  ErrorSeverity,\n  ErrorCode,\n  ErrorContext,\n  UserMessages\n} from './types';\n\nexport class AppError extends Error implements IAppError {\n  readonly id: string;\n  readonly code: ErrorCode;\n  readonly category: ErrorCategory;\n  readonly severity: ErrorSeverity;\n  readonly userMessage: string;\n  readonly context?: Record<string, unknown>;\n  readonly timestamp: string;\n  readonly source: string;\n  readonly correlationId?: string;\n  readonly retryable: boolean;\n  readonly retryAfter?: number;\n  readonly details?: Record<string, unknown>;\n\n  constructor(options: {\n    code: ErrorCode;\n    message: string;\n    category: ErrorCategory;\n    severity: ErrorSeverity;\n    source: string;\n    userMessage?: string;\n    context?: Record<string, unknown>;\n    correlationId?: string;\n    retryable?: boolean;\n    retryAfter?: number;\n    details?: Record<string, unknown>;\n    cause?: Error;\n  }) {\n    super(options.message);\n\n    this.name = 'AppError';\n    this.id = crypto.randomUUID();\n    this.code = options.code;\n    this.category = options.category;\n    this.severity = options.severity;\n    this.source = options.source;\n    this.timestamp = new Date().toISOString();\n    this.context = options.context;\n    this.correlationId = options.correlationId;\n    this.retryable = options.retryable ?? this.getDefaultRetryable();\n    this.retryAfter = options.retryAfter;\n    this.details = options.details;\n\n    // Set user message with fallback\n    this.userMessage = options.userMessage ||\n                      UserMessages[options.code] ||\n                      'Une erreur inattendue s\\'est produite.';\n\n    // Preserve the original error stack if provided\n    if (options.cause) {\n      this.stack = options.cause.stack;\n      this.cause = options.cause;\n    }\n\n    // Ensure stack trace is captured\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AppError);\n    }\n  }\n\n  /**\n   * Determine default retryable status based on category\n   */\n  private getDefaultRetryable(): boolean {\n    switch (this.category) {\n      case ErrorCategory.NETWORK:\n      case ErrorCategory.TIMEOUT:\n      case ErrorCategory.SERVER:\n      case ErrorCategory.EXTERNAL_SERVICE:\n      case ErrorCategory.DATABASE:\n        return true;\n\n      case ErrorCategory.RATE_LIMIT:\n        return true; // But with delay\n\n      case ErrorCategory.VALIDATION:\n      case ErrorCategory.AUTHENTICATION:\n      case ErrorCategory.AUTHORIZATION:\n      case ErrorCategory.NOT_FOUND:\n      case ErrorCategory.BUSINESS_LOGIC:\n      case ErrorCategory.CONFIGURATION:\n        return false;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Convert error to JSON for serialization\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      id: this.id,\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      userMessage: this.userMessage,\n      category: this.category,\n      severity: this.severity,\n      source: this.source,\n      timestamp: this.timestamp,\n      correlationId: this.correlationId,\n      retryable: this.retryable,\n      retryAfter: this.retryAfter,\n      context: this.context,\n      details: this.details,\n      stack: this.stack\n    };\n  }\n\n  /**\n   * Create a sanitized version for API responses (no stack trace)\n   */\n  toSafeJSON(): Record<string, unknown> {\n    const json = this.toJSON();\n    delete json.stack;\n    delete json.details; // May contain sensitive info\n    return json;\n  }\n\n  /**\n   * Check if this error should be retried\n   */\n  shouldRetry(currentAttempt: number, maxAttempts: number): boolean {\n    return this.retryable && currentAttempt < maxAttempts;\n  }\n\n  /**\n   * Get retry delay in milliseconds\n   */\n  getRetryDelay(attempt: number, baseDelay = 1000): number {\n    if (this.retryAfter) {\n      return this.retryAfter;\n    }\n\n    // Exponential backoff with jitter\n    const delay = baseDelay * Math.pow(2, attempt - 1);\n    const jitter = Math.random() * 0.1 * delay;\n    return Math.min(delay + jitter, 30000); // Max 30 seconds\n  }\n\n  /**\n   * Create AppError from native Error\n   */\n  static fromError(\n    error: Error,\n    source: string,\n    category?: ErrorCategory,\n    code?: ErrorCode\n  ): AppError {\n    return new AppError({\n      code: code || 'UNK_001',\n      message: error.message,\n      category: category || ErrorCategory.UNKNOWN,\n      severity: ErrorSeverity.MEDIUM,\n      source,\n      cause: error,\n      context: {\n        originalErrorName: error.name,\n        originalErrorStack: error.stack\n      }\n    });\n  }\n\n  /**\n   * Create AppError from HTTP response\n   */\n  static fromHttpError(\n    status: number,\n    statusText: string,\n    data: unknown,\n    source: string\n  ): AppError {\n    const category = AppError.categorizeHttpStatus(status);\n    const severity = AppError.getSeverityFromStatus(status);\n    const code = AppError.getCodeFromStatus(status);\n\n    return new AppError({\n      code,\n      message: `HTTP ${status}: ${statusText}`,\n      category,\n      severity,\n      source,\n      retryable: AppError.isHttpStatusRetryable(status),\n      details: {\n        status,\n        statusText,\n        response: data\n      }\n    });\n  }\n\n  /**\n   * Create validation error\n   */\n  static validation(\n    field: string,\n    value: unknown,\n    rule: string,\n    source: string\n  ): AppError {\n    return new AppError({\n      code: 'VAL_002',\n      message: `Validation failed for ${field}: ${rule}`,\n      category: ErrorCategory.VALIDATION,\n      severity: ErrorSeverity.LOW,\n      source,\n      userMessage: `Le champ ${field} n'est pas valide.`,\n      details: { field, value, rule }\n    });\n  }\n\n  /**\n   * Create business logic error\n   */\n  static businessLogic(\n    operation: string,\n    reason: string,\n    source: string,\n    code: ErrorCode = 'BIZ_002'\n  ): AppError {\n    return new AppError({\n      code,\n      message: `Business rule violation: ${operation} - ${reason}`,\n      category: ErrorCategory.BUSINESS_LOGIC,\n      severity: ErrorSeverity.MEDIUM,\n      source,\n      details: { operation, reason }\n    });\n  }\n\n  /**\n   * Helper methods for HTTP error categorization\n   */\n  private static categorizeHttpStatus(status: number): ErrorCategory {\n    if (status === 401) return ErrorCategory.AUTHENTICATION;\n    if (status === 403) return ErrorCategory.AUTHORIZATION;\n    if (status === 404) return ErrorCategory.NOT_FOUND;\n    if (status === 422) return ErrorCategory.VALIDATION;\n    if (status === 429) return ErrorCategory.RATE_LIMIT;\n    if (status >= 400 && status < 500) return ErrorCategory.VALIDATION;\n    if (status >= 500) return ErrorCategory.SERVER;\n    return ErrorCategory.UNKNOWN;\n  }\n\n  private static getSeverityFromStatus(status: number): ErrorSeverity {\n    if (status === 401 || status === 403) return ErrorSeverity.MEDIUM;\n    if (status === 404) return ErrorSeverity.LOW;\n    if (status === 422) return ErrorSeverity.LOW;\n    if (status === 429) return ErrorSeverity.MEDIUM;\n    if (status >= 500) return ErrorSeverity.HIGH;\n    return ErrorSeverity.MEDIUM;\n  }\n\n  private static getCodeFromStatus(status: number): ErrorCode {\n    switch (status) {\n      case 401: return 'AUTH_001';\n      case 403: return 'AUTH_003';\n      case 404: return 'VAL_001';\n      case 422: return 'VAL_002';\n      case 429: return 'NET_004';\n      case 500: return 'UNK_002';\n      case 502:\n      case 503:\n      case 504: return 'NET_003';\n      default: return 'UNK_001';\n    }\n  }\n\n  private static isHttpStatusRetryable(status: number): boolean {\n    // Retry on server errors and specific client errors\n    const retryableStatuses = [408, 429, 500, 502, 503, 504];\n    return retryableStatuses.includes(status);\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\errors\\ErrorHandler.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":331,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":331,"endColumn":20,"suggestions":[{"fix":{"range":[9282,9336],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'code' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":508,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced ErrorHandler - Centralized error handling with recovery and monitoring\n * Replaces the existing error handler with improved functionality\n */\n\nimport { AppError } from './AppError';\nimport {\n  ErrorCategory,\n  ErrorSeverity,\n  ErrorContext,\n  ErrorHandlerConfig,\n  ErrorMonitoringData,\n  RecoveryStrategy,\n  ErrorRecoveryOptions,\n  ErrorFeedbackConfig,\n  ErrorFeedbackType\n} from './types';\nimport { logger } from '../logger';\n\nexport class ErrorHandler {\n  private static instance: ErrorHandler;\n  private config: ErrorHandlerConfig;\n  private errorCounts = new Map<string, { count: number; lastReset: number }>();\n  private recoveryStrategies = new Map<string, ErrorRecoveryOptions>();\n\n  private constructor(config: ErrorHandlerConfig) {\n    this.config = config;\n    this.setupDefaultRecoveryStrategies();\n  }\n\n  static getInstance(config?: Partial<ErrorHandlerConfig>): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      const defaultConfig = ErrorHandler.getDefaultConfig();\n      ErrorHandler.instance = new ErrorHandler({ ...defaultConfig, ...config });\n    }\n    return ErrorHandler.instance;\n  }\n\n  /**\n   * Main error handling entry point\n   */\n  async handleError(\n    error: unknown,\n    context: ErrorContext,\n    options?: {\n      enableRecovery?: boolean;\n      enableUserFeedback?: boolean;\n      customRecovery?: ErrorRecoveryOptions;\n    }\n  ): Promise<AppError> {\n    // Convert to AppError if needed\n    const appError = this.toAppError(error, context);\n\n    // Log the error\n    this.logError(appError, context);\n\n    // Track error patterns\n    this.trackErrorPattern(appError);\n\n    // Send to monitoring if configured\n    await this.sendToMonitoring(appError, context);\n\n    // Send critical error notifications\n    if (appError.severity === ErrorSeverity.CRITICAL) {\n      await this.sendCriticalNotification(appError, context);\n    }\n\n    // Attempt recovery if enabled\n    if (options?.enableRecovery !== false && this.config.enableRecovery) {\n      const recovery = options?.customRecovery || this.getRecoveryStrategy(appError);\n      if (recovery.strategy !== RecoveryStrategy.NONE) {\n        await this.attemptRecovery(appError, recovery);\n      }\n    }\n\n    // Show user feedback if enabled\n    if (options?.enableUserFeedback !== false && this.config.enableUserFeedback) {\n      await this.showUserFeedback(appError);\n    }\n\n    return appError;\n  }\n\n  /**\n   * Handle errors with automatic retry logic\n   */\n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    context: ErrorContext,\n    options?: {\n      maxRetries?: number;\n      retryDelay?: number;\n      retryableCategories?: ErrorCategory[];\n    }\n  ): Promise<T> {\n    const maxRetries = options?.maxRetries ?? this.config.maxRetries;\n    const baseDelay = options?.retryDelay ?? this.config.retryDelay;\n    const retryableCategories = options?.retryableCategories ?? [\n      ErrorCategory.NETWORK,\n      ErrorCategory.TIMEOUT,\n      ErrorCategory.SERVER,\n      ErrorCategory.EXTERNAL_SERVICE\n    ];\n\n    let lastError: AppError;\n    let attempt = 1;\n\n    while (attempt <= maxRetries) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = await this.handleError(error, {\n          ...context,\n          additionalData: { attempt, maxRetries }\n        }, { enableUserFeedback: false }); // Don't show feedback during retries\n\n        // Check if we should retry\n        if (\n          attempt === maxRetries ||\n          !lastError.retryable ||\n          !retryableCategories.includes(lastError.category)\n        ) {\n          break;\n        }\n\n        // Calculate delay and wait\n        const delay = lastError.getRetryDelay(attempt, baseDelay);\n        logger.info('Retrying operation', {\n          source: context.component || 'unknown',\n          operation: context.operation,\n          attempt,\n          maxRetries,\n          delay,\n          error: lastError.code\n        });\n\n        await this.sleep(delay);\n        attempt++;\n      }\n    }\n\n    throw lastError!;\n  }\n\n  /**\n   * Convert any error to AppError\n   */\n  private toAppError(error: unknown, context: ErrorContext): AppError {\n    if (error instanceof AppError) {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      return AppError.fromError(error, context.component || 'unknown');\n    }\n\n    // Handle fetch/HTTP errors\n    if (error && typeof error === 'object' && 'status' in error) {\n      const httpError = error as { status: number; statusText?: string; data?: unknown };\n      return AppError.fromHttpError(\n        httpError.status,\n        httpError.statusText || 'Unknown',\n        httpError.data,\n        context.component || 'unknown'\n      );\n    }\n\n    // Fallback for unknown error types\n    return new AppError({\n      code: 'UNK_001',\n      message: String(error),\n      category: ErrorCategory.UNKNOWN,\n      severity: ErrorSeverity.MEDIUM,\n      source: context.component || 'unknown',\n      context: { originalError: error }\n    });\n  }\n\n  /**\n   * Log error based on severity\n   */\n  private logError(error: AppError, context: ErrorContext): void {\n    const logData = {\n      errorId: error.id,\n      code: error.code,\n      category: error.category,\n      severity: error.severity,\n      source: error.source,\n      component: context.component,\n      operation: context.operation,\n      userId: context.userId,\n      correlationId: error.correlationId,\n      message: error.message,\n      userMessage: error.userMessage,\n      retryable: error.retryable,\n      url: context.url,\n      userAgent: context.userAgent\n    };\n\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n        logger.error('CRITICAL ERROR', logData);\n        break;\n      case ErrorSeverity.HIGH:\n        logger.error('High severity error', logData);\n        break;\n      case ErrorSeverity.MEDIUM:\n        logger.warn('Medium severity error', logData);\n        break;\n      case ErrorSeverity.LOW:\n        if (this.config.logLevel === 'debug') {\n          logger.debug('Low severity error', logData);\n        }\n        break;\n    }\n  }\n\n  /**\n   * Track error patterns for analysis\n   */\n  private trackErrorPattern(error: AppError): void {\n    const key = `${error.source}:${error.code}`;\n    const now = Date.now();\n    const hourMs = 60 * 60 * 1000;\n\n    let errorCount = this.errorCounts.get(key);\n\n    if (!errorCount || (now - errorCount.lastReset) > hourMs) {\n      errorCount = { count: 0, lastReset: now };\n      this.errorCounts.set(key, errorCount);\n    }\n\n    errorCount.count++;\n\n    // Alert on error patterns\n    if (errorCount.count > 10) {\n      logger.warn('High error rate detected', {\n        source: error.source,\n        code: error.code,\n        count: errorCount.count,\n        timeWindow: '1 hour'\n      });\n    }\n  }\n\n  /**\n   * Send error to monitoring service\n   */\n  private async sendToMonitoring(error: AppError, context: ErrorContext): Promise<void> {\n    if (!this.config.monitoringEndpoint) {\n      return;\n    }\n\n    try {\n      const monitoringData: ErrorMonitoringData = {\n        error,\n        context,\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV || 'unknown',\n        version: process.env.VITE_APP_VERSION || 'unknown',\n        sessionId: context.sessionId,\n        userId: context.userId\n      };\n\n      await fetch(this.config.monitoringEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(monitoringData)\n      });\n    } catch (monitoringError) {\n      logger.error('Failed to send error to monitoring', {\n        originalError: error.id,\n        monitoringError: monitoringError instanceof Error ?\n          monitoringError.message : String(monitoringError)\n      });\n    }\n  }\n\n  /**\n   * Send critical error notifications\n   */\n  private async sendCriticalNotification(error: AppError, context: ErrorContext): Promise<void> {\n    if (!this.config.notificationWebhook) {\n      return;\n    }\n\n    try {\n      const payload = {\n        type: 'critical_error',\n        error: error.toJSON(),\n        context,\n        timestamp: new Date().toISOString()\n      };\n\n      await fetch(this.config.notificationWebhook, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n    } catch (notificationError) {\n      logger.error('Failed to send critical error notification', {\n        originalError: error.id,\n        notificationError: notificationError instanceof Error ?\n          notificationError.message : String(notificationError)\n      });\n    }\n  }\n\n  /**\n   * Setup default recovery strategies\n   */\n  private setupDefaultRecoveryStrategies(): void {\n    // Network errors - retry\n    this.recoveryStrategies.set('NET_001', {\n      strategy: RecoveryStrategy.RETRY,\n      maxRetries: 3\n    });\n\n    // Timeout errors - retry with backoff\n    this.recoveryStrategies.set('NET_002', {\n      strategy: RecoveryStrategy.RETRY,\n      maxRetries: 2,\n      retryDelay: 2000\n    });\n\n    // Service unavailable - fallback\n    this.recoveryStrategies.set('NET_003', {\n      strategy: RecoveryStrategy.FALLBACK,\n      fallbackAction: () => {\n        // Could show cached data or offline mode\n        console.log('Using fallback for service unavailable');\n      }\n    });\n\n    // Authentication errors - redirect to login\n    this.recoveryStrategies.set('AUTH_001', {\n      strategy: RecoveryStrategy.REDIRECT,\n      redirectUrl: '/auth/login'\n    });\n\n    // Token expired - refresh\n    this.recoveryStrategies.set('AUTH_002', {\n      strategy: RecoveryStrategy.REFRESH,\n      refreshTarget: 'auth-token'\n    });\n  }\n\n  /**\n   * Get recovery strategy for error\n   */\n  private getRecoveryStrategy(error: AppError): ErrorRecoveryOptions {\n    const strategy = this.recoveryStrategies.get(error.code);\n    if (strategy) {\n      return strategy;\n    }\n\n    // Default strategies based on category\n    switch (error.category) {\n      case ErrorCategory.NETWORK:\n      case ErrorCategory.TIMEOUT:\n        return { strategy: RecoveryStrategy.RETRY, maxRetries: 2 };\n\n      case ErrorCategory.AUTHENTICATION:\n        return {\n          strategy: RecoveryStrategy.REDIRECT,\n          redirectUrl: '/auth/login'\n        };\n\n      default:\n        return { strategy: RecoveryStrategy.NONE };\n    }\n  }\n\n  /**\n   * Attempt error recovery\n   */\n  private async attemptRecovery(error: AppError, recovery: ErrorRecoveryOptions): Promise<void> {\n    try {\n      switch (recovery.strategy) {\n        case RecoveryStrategy.RETRY:\n          // Retry is handled in executeWithRetry method\n          break;\n\n        case RecoveryStrategy.FALLBACK:\n          if (recovery.fallbackAction) {\n            await recovery.fallbackAction();\n          }\n          break;\n\n        case RecoveryStrategy.REFRESH:\n          if (recovery.refreshTarget === 'auth-token') {\n            // Trigger token refresh\n            window.dispatchEvent(new CustomEvent('auth:refresh-token'));\n          } else {\n            window.location.reload();\n          }\n          break;\n\n        case RecoveryStrategy.REDIRECT:\n          if (recovery.redirectUrl) {\n            window.location.href = recovery.redirectUrl;\n          }\n          break;\n\n        case RecoveryStrategy.MANUAL:\n          if (recovery.customAction) {\n            await recovery.customAction.action();\n          }\n          break;\n      }\n    } catch (recoveryError) {\n      logger.error('Error recovery failed', {\n        originalError: error.id,\n        recoveryStrategy: recovery.strategy,\n        recoveryError: recoveryError instanceof Error ?\n          recoveryError.message : String(recoveryError)\n      });\n    }\n  }\n\n  /**\n   * Show user feedback for error\n   */\n  private async showUserFeedback(error: AppError): Promise<void> {\n    const feedbackConfig = this.getFeedbackConfig(error);\n\n    // Dispatch custom event for UI components to handle\n    window.dispatchEvent(new CustomEvent('app:error-feedback', {\n      detail: { error, config: feedbackConfig }\n    }));\n  }\n\n  /**\n   * Get feedback configuration for error\n   */\n  private getFeedbackConfig(error: AppError): ErrorFeedbackConfig {\n    const baseConfig: ErrorFeedbackConfig = {\n      type: ErrorFeedbackType.TOAST,\n      message: error.userMessage,\n      dismissible: true\n    };\n\n    // Customize based on severity\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n        return {\n          ...baseConfig,\n          type: ErrorFeedbackType.MODAL,\n          title: 'Erreur Critique',\n          dismissible: false,\n          actions: [{\n            label: 'Recharger la page',\n            action: () => window.location.reload(),\n            variant: 'primary'\n          }]\n        };\n\n      case ErrorSeverity.HIGH:\n        return {\n          ...baseConfig,\n          type: ErrorFeedbackType.BANNER,\n          title: 'Erreur Importante',\n          duration: 0, // Don't auto-dismiss\n          actions: [{\n            label: 'Réessayer',\n            action: () => window.location.reload(),\n            variant: 'secondary'\n          }]\n        };\n\n      case ErrorSeverity.MEDIUM:\n        return {\n          ...baseConfig,\n          type: ErrorFeedbackType.TOAST,\n          duration: 5000\n        };\n\n      case ErrorSeverity.LOW:\n        return {\n          ...baseConfig,\n          type: ErrorFeedbackType.TOAST,\n          duration: 3000\n        };\n\n      default:\n        return baseConfig;\n    }\n  }\n\n  /**\n   * Get error statistics\n   */\n  getErrorStats(): {\n    totalErrors: number;\n    errorsByCategory: Record<string, number>;\n    errorsBySource: Record<string, number>;\n    topErrors: Array<{ key: string; count: number }>;\n  } {\n    const errorsByCategory: Record<string, number> = {};\n    const errorsBySource: Record<string, number> = {};\n    const topErrors: Array<{ key: string; count: number }> = [];\n\n    let totalErrors = 0;\n\n    for (const [key, errorCount] of this.errorCounts) {\n      totalErrors += errorCount.count;\n\n      const [source, code] = key.split(':');\n      errorsBySource[source] = (errorsBySource[source] || 0) + errorCount.count;\n\n      topErrors.push({ key, count: errorCount.count });\n    }\n\n    topErrors.sort((a, b) => b.count - a.count);\n\n    return {\n      totalErrors,\n      errorsByCategory,\n      errorsBySource,\n      topErrors: topErrors.slice(0, 10)\n    };\n  }\n\n  /**\n   * Utility methods\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private static getDefaultConfig(): ErrorHandlerConfig {\n    return {\n      enableStackTrace: process.env.NODE_ENV === 'development',\n      enableUserFeedback: true,\n      logLevel: 'error',\n      maxRetries: 3,\n      retryDelay: 1000,\n      enableRecovery: true\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\errors\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":22,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":24,"suggestions":[{"fix":{"range":[492,555],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":25,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":23,"suggestions":[{"fix":{"range":[604,665],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogContext {\n  [key: string]: unknown;\n}\n\nclass Logger {\n  private isDevelopment = process.env.NODE_ENV === 'development';\n\n  private log(level: LogLevel, message: string, context?: LogContext): void {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      level,\n      message,\n      ...context\n    };\n\n    if (this.isDevelopment) {\n      switch (level) {\n        case 'debug':\n          console.debug(`[${timestamp}] DEBUG:`, message, context || '');\n          break;\n        case 'info':\n          console.info(`[${timestamp}] INFO:`, message, context || '');\n          break;\n        case 'warn':\n          console.warn(`[${timestamp}] WARN:`, message, context || '');\n          break;\n        case 'error':\n          console.error(`[${timestamp}] ERROR:`, message, context || '');\n          break;\n      }\n    } else {\n      // In production, send to logging service\n      // This could be replaced with your preferred logging service\n      if (level === 'error' || level === 'warn') {\n        console.error(JSON.stringify(logEntry));\n      }\n    }\n  }\n\n  debug(message: string, context?: LogContext): void {\n    this.log('debug', message, context);\n  }\n\n  info(message: string, context?: LogContext): void {\n    this.log('info', message, context);\n  }\n\n  warn(message: string, context?: LogContext): void {\n    this.log('warn', message, context);\n  }\n\n  error(message: string, context?: LogContext | Error): void {\n    if (context instanceof Error) {\n      this.log('error', message, {\n        error: context.message,\n        stack: context.stack,\n      });\n    } else {\n      this.log('error', message, context);\n    }\n  }\n}\n\nexport const logger = new Logger();\nexport default logger;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\performance.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2739,2742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2739,2742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2869,2872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2869,2872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3901,3904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3901,3904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4037,4040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4037,4040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4223,4226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4223,4226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6566,6569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6566,6569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7099,7102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7099,7102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7207,7210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7207,7210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\AuthNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\CRM.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Calls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":45,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":58,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Phone, \n  Search,\n  PhoneCall,\n  AlertTriangle,\n  Clock,\n  User,\n  MapPin,\n  Plus,\n  Loader2\n} from \"lucide-react\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from \"@/components/ui/table\";\nimport { useEmergencyCalls } from \"@/hooks/useProductionData\";\nimport { useToast } from \"@/hooks/useToast\";\nimport { format } from \"date-fns\";\nimport { CallsLoadingSkeleton } from \"@/components/ui/loading-states\";\n\nexport default function Calls() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"tous\");\n  const [actionLoading, setActionLoading] = useState<string | null>(null);\n  \n  const { calls, loading, updateCall } = useEmergencyCalls();\n  const toast = useToast();\n\n  // Handle taking a call\n  const handleTakeCall = async (callId: string) => {\n    setActionLoading(callId);\n    try {\n      await updateCall(callId);\n      toast.success(\"Appel pris en charge\", \"Vous êtes maintenant assigné à cet appel\");\n    } catch (error) {\n      toast.error(\"Erreur\", \"Impossible de prendre l'appel en charge\");\n    } finally {\n      setActionLoading(null);\n    }\n  };\n\n  // Handle completing a call\n  const handleCompleteCall = async (callId: string) => {\n    setActionLoading(callId);\n    try {\n      await updateCall(callId);\n      toast.success(\"Appel terminé\", \"L'intervention a été marquée comme terminée\");\n    } catch (error) {\n      toast.error(\"Erreur\", \"Impossible de terminer l'appel\");\n    } finally {\n      setActionLoading(null);\n    }\n  };\n\n  // Calculate real-time stats from actual data\n  const stats = {\n    urgent: calls.filter(c => ['P1', 'P2'].includes(c.priority) && c.status !== 'completed').length,\n    normal: calls.filter(c => c.priority === 'normal' && c.status !== 'completed').length,\n    resolved: calls.filter(c => c.status === 'completed').length,\n    total: calls.length\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'pending': return 'bg-orange-100 text-orange-800 border-orange-200'; \n      case 'completed': return 'bg-green-100 text-green-800 border-green-200';\n      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'P1': return 'bg-red-500';\n      case 'P2': return 'bg-orange-500'; \n      case 'P3': return 'bg-yellow-500';\n      case 'normal': return 'bg-gray-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'En cours';\n      case 'pending': return 'En attente';\n      case 'completed': return 'Terminé';\n      case 'cancelled': return 'Annulé';\n      default: return status;\n    }\n  };\n\n\n  const filteredCalls = calls.filter(call => {\n    const matchesSearch = call.customer_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         call.phone_number?.includes(searchTerm) ||\n                         call.metadata?.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"tous\" || call.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  if (loading) {\n    return <CallsLoadingSkeleton />;\n  }\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"title-xl flex items-center gap-2\">\n            <Phone className=\"h-8 w-8 text-primary\" />\n            File d'Appels Urgents\n          </h1>\n          <p className=\"subtitle text-muted-foreground\">\n            Gestion des appels entrants et triage des urgences\n          </p>\n        </div>\n        <Button className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Nouveau Appel\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-6 md:grid-cols-4\">\n        <Card className=\"border-red-200 bg-red-50 interactive-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"label text-red-600\">URGENT</p>\n                <p className=\"text-3xl font-bold text-red-800 animate-scale-in\">\n                  {stats.urgent}\n                  {stats.urgent > 0 && <span className=\"pulse-ring inline-block w-2 h-2 bg-red-500 rounded-full ml-2\"></span>}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-red-600 interactive-icon\" />\n            </div>\n            <p className=\"caption text-red-700 mt-2\">appels en attente</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-orange-200 bg-orange-50 interactive-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"label text-orange-600\">NORMAL</p>\n                <p className=\"text-3xl font-bold text-orange-800 animate-scale-in\">\n                  {stats.normal}\n                </p>\n              </div>\n              <Clock className=\"h-8 w-8 text-orange-600 interactive-icon\" />\n            </div>\n            <p className=\"caption text-orange-700 mt-2\">appels actifs</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-green-200 bg-green-50 interactive-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"label text-green-600\">RÉSOLU</p>\n                <p className=\"text-3xl font-bold text-green-800 animate-scale-in\">\n                  {stats.resolved}\n                </p>\n              </div>\n              <PhoneCall className=\"h-8 w-8 text-green-600 interactive-icon\" />\n            </div>\n            <p className=\"caption text-green-700 mt-2\">appels terminés</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-primary/20 bg-primary/5 interactive-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"label text-primary\">TOTAL</p>\n                <p className=\"text-3xl font-bold text-primary animate-scale-in\">\n                  {stats.total}\n                </p>\n              </div>\n              <Phone className=\"h-8 w-8 text-primary interactive-icon\" />\n            </div>\n            <p className=\"caption text-primary mt-2\">aujourd'hui</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"title-md\">Filtres et Recherche</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n            <div className=\"flex-1 max-w-md\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Rechercher par nom, téléphone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant={statusFilter === \"tous\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"tous\")}\n              >\n                Tous\n              </Button>\n              <Button \n                variant={statusFilter === \"pending\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"pending\")}\n              >\n                En attente\n              </Button>\n              <Button \n                variant={statusFilter === \"active\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"active\")}\n              >\n                En cours\n              </Button>\n              <Button \n                variant={statusFilter === \"completed\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setStatusFilter(\"completed\")}\n              >\n                Terminés\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Calls Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"title-md\">Appels - Temps Réel</CardTitle>\n          <p className=\"caption text-muted-foreground\">\n            {filteredCalls.length} appel(s) affiché(s)\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Heure</TableHead>\n                <TableHead>Client</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Statut</TableHead>\n                <TableHead>Priorité</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {loading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <TableRow key={i}>\n                    <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-6 w-20\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-8 w-24\" /></TableCell>\n                  </TableRow>\n                ))\n              ) : filteredCalls.length > 0 ? (\n                filteredCalls.map((call) => (\n                  <TableRow key={call.id} className=\"interactive-row animate-fade-in\">\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">\n                          {format(new Date(call.created_at), 'HH:mm')}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          {call.customer_name}\n                        </div>\n                        {call.metadata?.address && (\n                          <div className=\"caption text-muted-foreground flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {call.metadata.address}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <a \n                        href={`tel:${call.phone_number}`}\n                        className=\"text-primary hover:underline\"\n                      >\n                        {call.phone_number}\n                      </a>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`border ${getStatusColor(call.status)}`}>\n                        {getStatusLabel(call.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-3 h-3 rounded-full ${getPriorityColor(call.priority)}`} />\n                        <span className=\"font-medium\">{call.priority}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs truncate\" title={call.metadata?.description}>\n                        {call.metadata?.description || 'Intervention standard'}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {call.status === 'pending' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"default\"\n                            onClick={() => handleTakeCall(call.id)}\n                            disabled={actionLoading === call.id}\n                          >\n                            {actionLoading === call.id ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              'Prendre'\n                            )}\n                          </Button>\n                        )}\n                        {call.status === 'active' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => handleCompleteCall(call.id)}\n                            disabled={actionLoading === call.id}\n                          >\n                            {actionLoading === call.id ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              'Terminer'\n                            )}\n                          </Button>\n                        )}\n                        <Button size=\"sm\" variant=\"ghost\">\n                          <Phone className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                    Aucun appel trouvé\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Conformite.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[18,54],"text":""}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'complianceData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loadingCompliance' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Shield, \n  CheckCircle,\n  Download,\n  FileText,\n  Clock,\n  User,\n  Database\n} from \"lucide-react\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from \"@/components/ui/table\";\nimport { useAuditLogs } from \"@/hooks/useAuditLogs\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { logger } from \"@/lib/logger\";\n\n// Real compliance data from Supabase\nexport default function Conformite() {\n  const { canAccess } = useAuth();\n  const { logs: auditLogs, loading: logsLoading, exportLogs } = useAuditLogs();\n  const [gdprRequests, setGdprRequests] = useState<{\n    id: string;\n    type: string;\n    status: string;\n    created_at: string;\n    user_email?: string;\n    description?: string;\n  }[]>([]);\n  const [loadingGdpr, setLoadingGdpr] = useState(true);\n  const [complianceData, setComplianceData] = useState<{\n    dataRetention?: number;\n    encryptionStatus?: string;\n    lastAudit?: string;\n    [key: string]: unknown;\n  }>({});\n  const [loadingCompliance, setLoadingCompliance] = useState(true);\n  const canReadAudit = canAccess('audit', 'read');\n\n  // Load real GDPR requests from database\n  useEffect(() => {\n    if (!canReadAudit) {\n      return;\n    }\n    const fetchGdprRequests = async () => {\n      try {\n        setLoadingGdpr(true);\n        const { data, error } = await supabase\n          .from('gdpr_requests')\n          .select('*')\n          .order('created_at', { ascending: false });\n\n        if (error) throw error;\n        setGdprRequests(data || []);\n      } catch (error) {\n        logger.error('Error fetching GDPR requests', error as Error);\n        setGdprRequests([]);\n      } finally {\n        setLoadingGdpr(false);\n      }\n    };\n\n    fetchGdprRequests();\n  }, [canReadAudit]);\n\n  // Load real compliance metrics\n  useEffect(() => {\n    if (!canReadAudit) {\n      return;\n    }\n    const fetchComplianceData = async () => {\n      try {\n        setLoadingCompliance(true);\n        // In a real system, this would fetch compliance metrics from various tables\n        const metrics = {\n          rgpd: { conforme: true, derniereVerif: new Date().toISOString() },\n          chiffrement: { actif: true, dernierTest: new Date().toISOString() },\n          sauvegarde: { actif: true, derniereSauvegarde: new Date().toISOString() },\n          acces: { controle: true, derniereRevue: new Date().toISOString() }\n        };\n        setComplianceData(metrics);\n      } catch (error) {\n        console.error('Error fetching compliance data:', error);\n      } finally {\n        setLoadingCompliance(false);\n      }\n    };\n\n    fetchComplianceData();\n  }, [canReadAudit]);\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'SELECT': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'INSERT': return 'bg-green-100 text-green-800 border-green-200';\n      case 'UPDATE': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'DELETE': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (statut: string) => {\n    switch (statut) {\n      case 'completed': return 'bg-green-100 text-green-800 border-green-200';\n      case 'pending': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'failed': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  if (!canReadAudit) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"title-md text-muted-foreground mb-2\">Accès non autorisé</h3>\n          <p className=\"body text-muted-foreground\">\n            Vous n'avez pas les permissions pour accéder aux logs de conformité\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"title-xl flex items-center gap-2\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n            Conformité & Logs\n          </h1>\n          <p className=\"subtitle text-muted-foreground\">\n            Conformité RGPD/Loi 25 et audit trail sécurisé\n          </p>\n        </div>\n        <Button className=\"flex items-center gap-2\" onClick={() => exportLogs()}>\n          <Download className=\"h-4 w-4\" />\n          Export Conformité\n        </Button>\n      </div>\n\n      {/* Status Conformity */}\n      <Card className=\"border-green-200 bg-green-50\">\n        <CardHeader>\n          <CardTitle className=\"title-md flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-green-600\" />\n            Statut de Conformité\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <div className=\"flex items-center gap-3 p-3 bg-white rounded-lg\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-green-800\">RGPD</div>\n                <div className=\"text-xs text-green-600\">CONFORME</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3 p-3 bg-white rounded-lg\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-green-800\">Audit Trail</div>\n                <div className=\"text-xs text-green-600\">ACTIF</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3 p-3 bg-white rounded-lg\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-green-800\">Chiffrement</div>\n                <div className=\"text-xs text-green-600\">ACTIF</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3 p-3 bg-white rounded-lg\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-green-800\">RLS Policies</div>\n                <div className=\"text-xs text-green-600\">CONFIGURÉES</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Trail */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle className=\"title-md flex items-center gap-2\">\n              <Database className=\"h-5 w-5\" />\n              Historique d'Audit Live\n            </CardTitle>\n            <p className=\"caption text-muted-foreground mt-1\">\n              Journal détaillé de toutes les actions utilisateurs - Données en temps réel\n            </p>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => exportLogs()}>\n            Exporter CSV\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {logsLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-muted-foreground\">Chargement des logs...</p>\n            </div>\n          ) : auditLogs.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date/Heure</TableHead>\n                  <TableHead>Action</TableHead>\n                  <TableHead>Utilisateur</TableHead>\n                  <TableHead>Ressource</TableHead>\n                  <TableHead>Détails</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {auditLogs.slice(0, 10).map((log: {\n                  id: string;\n                  timestamp: string;\n                  action: string;\n                  user_id?: string;\n                  resource?: string;\n                  details?: string;\n                }) => (\n                  <TableRow key={log.id} className=\"hover:bg-surface\">\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {new Date(log.timestamp).toLocaleDateString('fr-FR')}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {new Date(log.timestamp).toLocaleTimeString('fr-FR')}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`border ${getActionColor(log.action)}`}>\n                        {log.action}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        <span className=\"font-medium\">{log.user_email || 'Système'}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"font-medium\">{log.resource_type}</span>\n                      {log.resource_id && (\n                        <div className=\"text-xs text-muted-foreground\">ID: {log.resource_id.slice(0, 8)}...</div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {log.new_values ? JSON.stringify(log.new_values).slice(0, 50) + '...' : 'Action système'}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Database className=\"h-8 w-8 mx-auto mb-2\" />\n              <p>Aucun log d'audit disponible</p>\n              <p className=\"text-sm\">Les logs apparaîtront ici lors des actions utilisateurs</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Export RGPD & GDPR Requests */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"title-md flex items-center gap-2\">\n              <Download className=\"h-5 w-5\" />\n              Exports RGPD\n            </CardTitle>\n            <p className=\"caption text-muted-foreground mt-1\">\n              Demandes d'export de données personnelles\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <Button className=\"w-full flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                Demander Export Données\n              </Button>\n              \n              {loadingGdpr ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : gdprRequests.length > 0 ? (\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Demandes RGPD</h4>\n                  {gdprRequests.slice(0, 3).map((request) => (\n                    <div key={request.id} className=\"flex items-center justify-between p-3 bg-surface rounded-lg\">\n                      <div>\n                        <div className=\"font-medium text-sm\">{request.request_type}</div>\n                        <div className=\"caption text-muted-foreground\">{request.email}</div>\n                        <div className=\"caption text-muted-foreground\">\n                          {new Date(request.created_at).toLocaleDateString('fr-FR')}\n                        </div>\n                      </div>\n                      <Badge className={`border text-xs ${getStatusColor(request.status)}`}>\n                        {request.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <FileText className=\"h-8 w-8 mx-auto mb-2\" />\n                  <p>Aucune demande RGPD</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"title-md flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Sécurité RLS\n            </CardTitle>\n            <p className=\"caption text-muted-foreground mt-1\">\n              Row Level Security et accès aux données\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid gap-3\">\n                <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    <div>\n                      <div className=\"font-medium text-green-800\">Tables protégées</div>\n                      <div className=\"text-xs text-green-600\">100% des tables avec RLS</div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"h-5 w-5 text-green-600\" />\n                    <div>\n                      <div className=\"font-medium text-green-800\">Policies actives</div>\n                      <div className=\"text-xs text-green-600\">Contrôle d'accès granulaire</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Database className=\"h-5 w-5 text-green-600\" />\n                    <div>\n                      <div className=\"font-medium text-green-800\">Audit automatique</div>\n                      <div className=\"text-xs text-green-600\">Traçabilité complète</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <Button variant=\"outline\" className=\"w-full mt-4\">\n                Vérifier Sécurité\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Compliance Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"title-md\">Actions de Conformité</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" onClick={() => exportLogs()}>\n              <FileText className=\"h-6 w-6\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Rapport Conformité</div>\n                <div className=\"text-xs text-muted-foreground\">CSV détaillé</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n              <Shield className=\"h-6 w-6\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Audit Sécurité</div>\n                <div className=\"text-xs text-muted-foreground\">Scan RLS</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n              <Database className=\"h-6 w-6\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Sauvegarde Logs</div>\n                <div className=\"text-xs text-muted-foreground\">Export sécurisé</div>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Interventions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\pages\\Support.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\ApiServiceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\BaseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\__tests__\\security.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\__tests__\\supabaseServices.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1342,1345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1342,1345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1451,1454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1451,1454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3932,3935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3932,3935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4072,4075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4072,4075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4355,4358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4355,4358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4788,4791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4788,4791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4878,4881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4878,4881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4976,4979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4976,4979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5565,5568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5565,5568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5655,5658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5655,5658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5693,5696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5693,5696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5978,5981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5978,5981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\analytics\\stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api.secure.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,55],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { apiConfig } from '@/config/api.secure';\nimport { logger } from '@/lib/logger';\nimport {\n  GeocodeAddressSchema,\n  OptimizeRouteSchema,\n  VAPICallSchema,\n  OpenAICompletionSchema,\n  createValidatedFunction,\n} from './validation/schemas';\n\n/**\n * Secure API Service\n * All external API calls with input validation and sanitization\n */\n\n// ============================================\n// Google Maps Service (Validated)\n// ============================================\n\nexport class SecureMapsService {\n  /**\n   * Geocode address with input validation\n   */\n  static geocodeAddress = createValidatedFunction(\n    GeocodeAddressSchema,\n    async (input) => {\n      try {\n        const params = new URLSearchParams({\n          address: input.address,\n          key: apiConfig.googleMaps.apiKey || '',\n        });\n\n        if (input.country) {\n          params.append('components', `country:${input.country}`);\n        }\n\n        if (input.bounds) {\n          const boundsStr = `${input.bounds.southwest.lat},${input.bounds.southwest.lng}|${input.bounds.northeast.lat},${input.bounds.northeast.lng}`;\n          params.append('bounds', boundsStr);\n        }\n\n        const response = await fetch(\n          `https://maps.googleapis.com/maps/api/geocode/json?${params}`,\n          {\n            headers: apiConfig.headers,\n          }\n        );\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          logger.error('Geocoding API error', { status: response.status, data });\n          throw new Error('Geocoding service unavailable');\n        }\n\n        if (data.status === 'OK' && data.results?.length > 0) {\n          const location = data.results[0].geometry.location;\n          return {\n            lat: location.lat,\n            lng: location.lng,\n            formatted_address: data.results[0].formatted_address,\n            placeId: data.results[0].place_id,\n          };\n        }\n\n        throw new Error('Address not found');\n      } catch (error) {\n        logger.error('Geocoding error', { error, input });\n        throw new Error('Failed to geocode address');\n      }\n    }\n  );\n\n  /**\n   * Optimize route with validated waypoints\n   */\n  static optimizeRoute = createValidatedFunction(\n    OptimizeRouteSchema,\n    async (input) => {\n      try {\n        if (input.waypoints.length < 2) {\n          throw new Error('At least 2 waypoints required');\n        }\n\n        const origin = input.waypoints[0];\n        const destination = input.waypoints[input.waypoints.length - 1];\n        const intermediateWaypoints = input.waypoints.slice(1, -1);\n\n        const params = new URLSearchParams({\n          origin: `${origin.lat},${origin.lng}`,\n          destination: `${destination.lat},${destination.lng}`,\n          mode: input.travelMode.toLowerCase(),\n          key: apiConfig.googleMaps.apiKey || '',\n        });\n\n        if (intermediateWaypoints.length > 0) {\n          const waypointsStr = intermediateWaypoints\n            .map(wp => `${wp.lat},${wp.lng}`)\n            .join('|');\n          params.append('waypoints', `optimize:true|${waypointsStr}`);\n        }\n\n        if (input.avoidHighways) params.append('avoid', 'highways');\n        if (input.avoidTolls) params.append('avoid', 'tolls');\n\n        const response = await fetch(\n          `https://maps.googleapis.com/maps/api/directions/json?${params}`,\n          {\n            headers: apiConfig.headers,\n          }\n        );\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          logger.error('Route optimization API error', { status: response.status, data });\n          throw new Error('Route optimization service unavailable');\n        }\n\n        return data;\n      } catch (error) {\n        logger.error('Route optimization error', { error, input });\n        throw new Error('Failed to optimize route');\n      }\n    }\n  );\n}\n\n// ============================================\n// VAPI Service (Validated)\n// ============================================\n\nexport class SecureVAPIService {\n  /**\n   * Make outbound call with validation\n   */\n  static makeCall = createValidatedFunction(\n    VAPICallSchema,\n    async (input) => {\n      if (!apiConfig.vapi.enabled) {\n        throw new Error('VAPI service not configured');\n      }\n\n      try {\n        // Note: Private key should be used server-side only\n        // This should ideally be proxied through your backend\n        const response = await fetch(`${apiConfig.vapi.apiUrl}/calls`, {\n          method: 'POST',\n          headers: {\n            ...apiConfig.headers,\n            'Authorization': `Bearer VAPI_PRIVATE_KEY`, // Should be from secure backend\n          },\n          body: JSON.stringify({\n            phoneNumber: input.phoneNumber,\n            assistantId: input.assistantId,\n            metadata: input.metadata,\n            voicemailDetection: input.voicemailDetection,\n            maxDuration: input.maxDuration,\n          }),\n        });\n\n        if (!response.ok) {\n          logger.error('VAPI call error', { status: response.status });\n          throw new Error('Failed to initiate call');\n        }\n\n        return await response.json();\n      } catch (error) {\n        logger.error('VAPI service error', { error, phoneNumber: input.phoneNumber });\n        throw new Error('Call service unavailable');\n      }\n    }\n  );\n}\n\n// ============================================\n// OpenAI Service (Validated)\n// ============================================\n\nexport class SecureOpenAIService {\n  /**\n   * Get completion with validated input\n   */\n  static getCompletion = createValidatedFunction(\n    OpenAICompletionSchema,\n    async (input) => {\n      if (!apiConfig.openai.enabled) {\n        throw new Error('OpenAI service not configured');\n      }\n\n      try {\n        // Note: API key should be used server-side only\n        // This should ideally be proxied through your backend\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            ...apiConfig.headers,\n            'Authorization': `Bearer OPENAI_API_KEY`, // Should be from secure backend\n          },\n          body: JSON.stringify({\n            model: 'gpt-4',\n            messages: input.messages,\n            temperature: input.temperature,\n            max_tokens: input.maxTokens,\n            top_p: input.topP,\n            frequency_penalty: input.frequencyPenalty,\n            presence_penalty: input.presencePenalty,\n          }),\n        });\n\n        if (!response.ok) {\n          logger.error('OpenAI API error', { status: response.status });\n          throw new Error('AI service unavailable');\n        }\n\n        return await response.json();\n      } catch (error) {\n        logger.error('OpenAI service error', { error });\n        throw new Error('AI service unavailable');\n      }\n    }\n  );\n}\n\n// ============================================\n// Secure API Client Factory\n// ============================================\n\nexport class SecureAPIClient {\n  private static instance: SecureAPIClient;\n  private requestCount = 0;\n  private lastReset = Date.now();\n  private readonly maxRequestsPerMinute = 100;\n\n  private constructor() {}\n\n  static getInstance(): SecureAPIClient {\n    if (!SecureAPIClient.instance) {\n      SecureAPIClient.instance = new SecureAPIClient();\n    }\n    return SecureAPIClient.instance;\n  }\n\n  /**\n   * Rate limiting check\n   */\n  private checkRateLimit(): void {\n    const now = Date.now();\n    const timeSinceReset = now - this.lastReset;\n\n    if (timeSinceReset > 60000) {\n      this.requestCount = 0;\n      this.lastReset = now;\n    }\n\n    if (this.requestCount >= this.maxRequestsPerMinute) {\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n\n    this.requestCount++;\n  }\n\n  /**\n   * Make secure API request with validation\n   */\n  async request<T>(\n    url: string,\n    options: RequestInit & { validateResponse?: (data: unknown) => boolean }\n  ): Promise<T> {\n    this.checkRateLimit();\n\n    // Add security headers\n    const secureOptions: RequestInit = {\n      ...options,\n      headers: {\n        ...apiConfig.headers,\n        ...options.headers,\n      },\n    };\n\n    try {\n      const response = await fetch(url, secureOptions);\n\n      if (!response.ok) {\n        logger.error('API request failed', {\n          url,\n          status: response.status,\n          statusText: response.statusText,\n        });\n        throw new Error(`Request failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      // Optional response validation\n      if (options.validateResponse && !options.validateResponse(data)) {\n        logger.error('Response validation failed', { url, data });\n        throw new Error('Invalid response format');\n      }\n\n      return data as T;\n    } catch (error) {\n      logger.error('API request error', { url, error });\n      throw error;\n    }\n  }\n}\n\n// ============================================\n// Export Validated Services\n// ============================================\n\nexport const secureAPI = {\n  maps: SecureMapsService,\n  vapi: SecureVAPIService,\n  openai: SecureOpenAIService,\n  client: SecureAPIClient.getInstance(),\n};\n\n// Type exports for better TypeScript support\nexport type GeocodeResult = {\n  lat: number;\n  lng: number;\n  formatted_address: string;\n  placeId: string;\n};\n\nexport type RouteOptimizationResult = {\n  routes: Array<{\n    summary: string;\n    legs: Array<{\n      distance: { text: string; value: number };\n      duration: { text: string; value: number };\n    }>;\n  }>;\n  status: string;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api\\ServiceLayer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2313,2316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2313,2316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2338,2341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2338,2341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2483,2486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2483,2486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2510,2513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2510,2513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2876,2879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2876,2879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3777,3780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3777,3780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4949,4952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4949,4952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5765,5768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5765,5768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6879,6882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6879,6882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7817,7820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7817,7820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9694,9697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9694,9697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Service Layer\n * Consolidates all service patterns into consistent, type-safe interfaces\n * - Standardized service contracts\n * - Automatic error handling and retry logic\n * - Validation and sanitization\n * - Caching and performance optimization\n * - Circuit breaker protection for external services\n */\n\nimport { BaseService, type ServiceResult, type PaginatedResult, type QueryOptions } from '@/services/BaseService';\nimport { unifiedAPI, type APIResponse } from './UnifiedAPIClient';\nimport { logger } from '@/lib/logger';\nimport { supabase } from '@/integrations/supabase/client';\nimport type {\n  CallData,\n  LeadData,\n  AnalyticsData,\n  SettingsData,\n  ConnectionTestResult,\n} from '@/types/api';\nimport type {\n  CallContext,\n  WebhookClientData,\n  WebhookCallData,\n  WebhookInterventionData,\n  WebhookFeedbackData,\n} from '@/types/api.types';\n\n// Service Configuration\nexport interface ServiceConfig {\n  enableFallback: boolean;\n  cacheTimeout: number;\n  retryAttempts: number;\n  circuitBreakerEnabled: boolean;\n}\n\nconst DEFAULT_SERVICE_CONFIG: ServiceConfig = {\n  enableFallback: true,\n  cacheTimeout: 5 * 60 * 1000, // 5 minutes\n  retryAttempts: 3,\n  circuitBreakerEnabled: true,\n};\n\n/**\n * Base API Service with unified patterns\n */\nabstract class UnifiedBaseService extends BaseService {\n  protected config: ServiceConfig;\n  protected serviceName: string;\n\n  constructor(serviceName: string, config: Partial<ServiceConfig> = {}) {\n    super();\n    this.serviceName = serviceName;\n    this.config = { ...DEFAULT_SERVICE_CONFIG, ...config };\n  }\n\n  /**\n   * Execute operation with fallback support\n   */\n  protected async executeWithFallback<T>(\n    primary: () => Promise<T>,\n    fallback?: () => Promise<T>,\n    operation = 'unknown'\n  ): Promise<T> {\n    try {\n      return await primary();\n    } catch (error) {\n      logger.warn(`${this.serviceName} primary operation failed`, {\n        operation,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      if (this.config.enableFallback && fallback) {\n        logger.info(`${this.serviceName} attempting fallback`, { operation });\n        return await fallback();\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transform Supabase data to service format\n   */\n  protected transformSupabaseData<T>(data: any, transformer: (item: any) => T): T {\n    return transformer(data);\n  }\n\n  /**\n   * Transform array of Supabase data\n   */\n  protected transformSupabaseArray<T>(data: any[], transformer: (item: any) => T): T[] {\n    return data.map(transformer);\n  }\n}\n\n/**\n * VAPI Service - Voice AI Integration\n */\nexport class VAPIService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('VAPIService', config);\n  }\n\n  /**\n   * Start a new call\n   */\n  async startCall(phoneNumber: string, context: CallContext): Promise<ServiceResult<any>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Use unified API client\n          async () => {\n            const response = await unifiedAPI.post('/functions/v1/vapi-call', {\n              phone_number: phoneNumber,\n              context,\n            });\n            return response.data;\n          },\n          // Fallback: Direct Supabase function\n          async () => {\n            const { data, error } = await supabase.functions.invoke('vapi-call', {\n              body: {\n                phone_number: phoneNumber,\n                context,\n              },\n            });\n            if (error) throw error;\n            return data;\n          }\n        );\n      },\n      'startCall',\n      'vapi_call'\n    );\n  }\n\n  /**\n   * Get call transcript\n   */\n  async getCallTranscript(callId: string): Promise<ServiceResult<any[]>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get(`/api/calls/${callId}/transcript`);\n            return response.data;\n          },\n          // Fallback: Direct Supabase query\n          async () => {\n            const { data, error } = await supabase\n              .from('call_transcripts')\n              .select('id, call_id, message, role, confidence, created_at, timestamp, metadata')\n              .eq('call_id', callId)\n              .order('created_at', { ascending: false });\n            \n            if (error) throw error;\n            return data || [];\n          }\n        );\n      },\n      'getCallTranscript',\n      'call_transcript'\n    );\n  }\n}\n\n/**\n * SMS Service - Messaging Integration\n */\nexport class SMSService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('SMSService', config);\n  }\n\n  /**\n   * Send single SMS\n   */\n  async sendSMS(\n    to: string,\n    message: string,\n    priority: 'normal' | 'urgent' = 'normal'\n  ): Promise<ServiceResult<any>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Unified API\n          async () => {\n            const response = await unifiedAPI.post('/api/sms/send', {\n              to,\n              message,\n              priority,\n            });\n            return response.data;\n          },\n          // Fallback: Supabase function\n          async () => {\n            const { data, error } = await supabase.functions.invoke('send-sms', {\n              body: { to, message, priority },\n            });\n            if (error) throw error;\n            return data;\n          }\n        );\n      },\n      'sendSMS',\n      'sms'\n    );\n  }\n\n  /**\n   * Send bulk SMS\n   */\n  async sendBulkSMS(recipients: string[], message: string): Promise<ServiceResult<any>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Unified API\n          async () => {\n            const response = await unifiedAPI.post('/api/sms/bulk', {\n              recipients,\n              message,\n            });\n            return response.data;\n          },\n          // Fallback: Supabase function\n          async () => {\n            const { data, error } = await supabase.functions.invoke('send-bulk-sms', {\n              body: { recipients, message },\n            });\n            if (error) throw error;\n            return data;\n          }\n        );\n      },\n      'sendBulkSMS',\n      'bulk_sms'\n    );\n  }\n}\n\n/**\n * Automation Service - Workflow Integration\n */\nexport class AutomationService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('AutomationService', config);\n  }\n\n  /**\n   * Trigger workflow\n   */\n  async triggerWorkflow(\n    workflowName: string,\n    data: WebhookClientData | WebhookCallData | WebhookInterventionData | WebhookFeedbackData\n  ): Promise<ServiceResult<any>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Unified API\n          async () => {\n            const response = await unifiedAPI.post('/api/workflows/trigger', {\n              workflow: workflowName,\n              payload: data,\n            });\n            return response.data;\n          },\n          // Fallback: Direct n8n webhook\n          async () => {\n            const response = await unifiedAPI.post('/functions/v1/n8n-webhook', {\n              webhook: workflowName,\n              payload: data,\n            });\n            return response.data;\n          }\n        );\n      },\n      'triggerWorkflow',\n      'workflow'\n    );\n  }\n\n  /**\n   * Send feedback\n   */\n  async sendFeedback(feedback: {\n    type: 'bug' | 'feature' | 'general';\n    message: string;\n    priority: 'low' | 'medium' | 'high';\n    userEmail: string;\n  }): Promise<ServiceResult<any>> {\n    return this.triggerWorkflow('feedback', feedback);\n  }\n}\n\n/**\n * Maps Service - Geographic Integration\n */\nexport class MapsService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('MapsService', config);\n  }\n\n  /**\n   * Geocode address\n   */\n  async geocodeAddress(address: string): Promise<ServiceResult<{\n    lat: number;\n    lng: number;\n    formatted_address: string;\n    placeId?: string;\n  }>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Backend proxy (secure)\n          async () => {\n            const response = await unifiedAPI.post('/api/maps/geocode', {\n              address,\n            });\n            return response.data;\n          },\n          // Fallback: Direct Google Maps API (requires client-side key)\n          async () => {\n            const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;\n            if (!apiKey) {\n              throw new Error('Google Maps API key not configured');\n            }\n\n            const response = await fetch(\n              `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`\n            );\n            const data = await response.json();\n            \n            if (data.status === 'OK' && data.results.length > 0) {\n              const location = data.results[0].geometry.location;\n              return {\n                lat: location.lat,\n                lng: location.lng,\n                formatted_address: data.results[0].formatted_address,\n              };\n            }\n            throw new Error('Geocoding failed');\n          }\n        );\n      },\n      'geocodeAddress',\n      'geocode'\n    );\n  }\n\n  /**\n   * Optimize route\n   */\n  async optimizeRoute(waypoints: Array<{ lat: number; lng: number }>): Promise<ServiceResult<any>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: Backend proxy\n          async () => {\n            const response = await unifiedAPI.post('/api/maps/directions', {\n              waypoints,\n            });\n            return response.data;\n          },\n          // Fallback: Direct API call\n          async () => {\n            const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;\n            if (!apiKey) {\n              throw new Error('Google Maps API key not configured');\n            }\n\n            if (waypoints.length < 2) {\n              throw new Error('At least 2 waypoints required');\n            }\n\n            const origin = waypoints[0];\n            const destination = waypoints[waypoints.length - 1];\n            const intermediateWaypoints = waypoints.slice(1, -1);\n            \n            const waypointsParam = intermediateWaypoints\n              .map(wp => `${wp.lat},${wp.lng}`)\n              .join('|');\n            \n            const response = await fetch(\n              `https://maps.googleapis.com/maps/api/directions/json?origin=${origin?.lat},${origin?.lng}&destination=${destination?.lat},${destination?.lng}&waypoints=optimize:true|${waypointsParam}&key=${apiKey}`\n            );\n            \n            return await response.json();\n          }\n        );\n      },\n      'optimizeRoute',\n      'route_optimization'\n    );\n  }\n}\n\n/**\n * CRM Service - Customer Relationship Management\n */\nexport class CRMService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('CRMService', config);\n  }\n\n  /**\n   * Get calls with pagination\n   */\n  async getCalls(options?: QueryOptions): Promise<ServiceResult<PaginatedResult<CallData>>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get('/api/calls', {\n              headers: {\n                'X-Query-Options': JSON.stringify(options || {}),\n              },\n            });\n            return response.data;\n          },\n          // Fallback: Supabase query\n          async () => {\n            let query = supabase\n              .from('vapi_calls')\n              .select('*', { count: 'exact' });\n\n            query = this.buildFilters(query, options?.filters);\n            query = this.applySorting(query, options?.sortBy, options?.sortOrder);\n            query = this.applyPagination(query, options?.page, options?.pageSize);\n\n            const { data, error, count } = await query;\n            if (error) throw error;\n\n            const transformedData = this.transformSupabaseArray(data || [], (call) => ({\n              id: call.id,\n              phoneNumber: call.phone_number,\n              startTime: new Date(call.started_at),\n              endTime: call.ended_at ? new Date(call.ended_at) : undefined,\n              duration: call.duration || 0,\n              transcript: call.transcript || '',\n              priority: call.priority || 'P4',\n              status: call.status || 'completed',\n              recordingUrl: call.recording_url,\n              metadata: call.metadata || {},\n            }));\n\n            return this.transformPaginatedResult(\n              transformedData,\n              count || 0,\n              options?.page || 1,\n              options?.pageSize || 25\n            );\n          }\n        );\n      },\n      'getCalls',\n      'calls'\n    );\n  }\n\n  /**\n   * Get single call\n   */\n  async getCall(id: string): Promise<ServiceResult<CallData | null>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get(`/api/calls/${id}`);\n            return response.data;\n          },\n          // Fallback: Supabase query\n          async () => {\n            const { data, error } = await supabase\n              .from('vapi_calls')\n              .select('*')\n              .eq('id', id)\n              .single();\n\n            if (error && error.code !== 'PGRST116') throw error;\n            if (!data) return null;\n\n            return this.transformSupabaseData(data, (call) => ({\n              id: call.id,\n              phoneNumber: call.phone_number,\n              startTime: new Date(call.started_at),\n              endTime: call.ended_at ? new Date(call.ended_at) : undefined,\n              duration: call.duration || 0,\n              transcript: call.transcript || '',\n              priority: call.priority || 'P4',\n              status: call.status || 'completed',\n              recordingUrl: call.recording_url,\n              metadata: call.metadata || {},\n            }));\n          }\n        );\n      },\n      'getCall',\n      'call'\n    );\n  }\n\n  /**\n   * Get leads with pagination\n   */\n  async getLeads(options?: QueryOptions): Promise<ServiceResult<PaginatedResult<LeadData>>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get('/api/leads', {\n              headers: {\n                'X-Query-Options': JSON.stringify(options || {}),\n              },\n            });\n            return response.data;\n          },\n          // Fallback: Supabase query\n          async () => {\n            let query = supabase\n              .from('leads')\n              .select('*', { count: 'exact' });\n\n            query = this.buildFilters(query, options?.filters);\n            query = this.applySorting(query, options?.sortBy, options?.sortOrder);\n            query = this.applyPagination(query, options?.page, options?.pageSize);\n\n            const { data, error, count } = await query;\n            if (error) throw error;\n\n            const transformedData = this.transformSupabaseArray(data || [], (lead) => ({\n              id: lead.id,\n              email: lead.email,\n              phone: lead.phone,\n              name: lead.name,\n              status: lead.status || 'new',\n              source: lead.source,\n              created_at: lead.created_at,\n              updated_at: lead.updated_at,\n              metadata: lead.metadata || {},\n            }));\n\n            return this.transformPaginatedResult(\n              transformedData,\n              count || 0,\n              options?.page || 1,\n              options?.pageSize || 25\n            );\n          }\n        );\n      },\n      'getLeads',\n      'leads'\n    );\n  }\n\n  /**\n   * Create lead\n   */\n  async createLead(lead: Partial<LeadData>): Promise<ServiceResult<LeadData>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.post('/api/leads', lead);\n            return response.data;\n          },\n          // Fallback: Supabase insert\n          async () => {\n            const { data, error } = await supabase\n              .from('leads')\n              .insert(lead)\n              .select()\n              .single();\n\n            if (error) throw error;\n\n            return this.transformSupabaseData(data, (l) => ({\n              id: l.id,\n              email: l.email,\n              phone: l.phone,\n              name: l.name,\n              status: l.status || 'new',\n              source: l.source,\n              created_at: l.created_at,\n              updated_at: l.updated_at,\n              metadata: l.metadata || {},\n            }));\n          }\n        );\n      },\n      'createLead',\n      'lead'\n    );\n  }\n}\n\n/**\n * Analytics Service - Data and Metrics\n */\nexport class AnalyticsService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('AnalyticsService', config);\n  }\n\n  /**\n   * Get analytics data\n   */\n  async getAnalytics(): Promise<ServiceResult<AnalyticsData>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get('/api/analytics');\n            return response.data;\n          },\n          // Fallback: Calculate from Supabase\n          async () => {\n            // This is a simplified calculation - in production you'd want \n            // more sophisticated analytics queries\n            const [callsResult, leadsResult] = await Promise.all([\n              supabase.from('vapi_calls').select('id', { count: 'exact' }),\n              supabase.from('leads').select('id', { count: 'exact' }),\n            ]);\n\n            const totalCalls = callsResult.count || 0;\n            const totalLeads = leadsResult.count || 0;\n            const conversionRate = totalCalls > 0 ? (totalLeads / totalCalls) * 100 : 0;\n\n            return {\n              totalCalls,\n              todayCalls: 0, // Would need time-based query\n              totalLeads,\n              conversionRate,\n              metrics: [\n                { name: 'Calls', value: totalCalls, trend: 'stable' },\n                { name: 'Leads', value: totalLeads, trend: 'stable' },\n              ],\n              timeRange: {\n                start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n                end: new Date(),\n                period: 'month',\n              },\n            };\n          }\n        );\n      },\n      'getAnalytics',\n      'analytics'\n    );\n  }\n}\n\n/**\n * Settings Service - Configuration Management\n */\nexport class SettingsService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('SettingsService', config);\n  }\n\n  /**\n   * Get settings\n   */\n  async getSettings(): Promise<ServiceResult<SettingsData>> {\n    return this.executeOperation(\n      async () => {\n        return this.executeWithFallback(\n          // Primary: API endpoint\n          async () => {\n            const response = await unifiedAPI.get('/api/settings');\n            return response.data;\n          },\n          // Fallback: Default settings\n          async () => {\n            return {\n              constraints: [],\n              pricing: {\n                baseRate: 0,\n                minimumCharge: 0,\n                currency: 'USD',\n              },\n              prompts: {\n                greeting: 'Hello!',\n                farewell: 'Goodbye!',\n                errorMessage: 'An error occurred',\n              },\n              webhooks: {\n                url: import.meta.env.VITE_VAPI_WEBHOOK_URL || '',\n                events: [],\n                timeout: 5000,\n              },\n            };\n          }\n        );\n      },\n      'getSettings',\n      'settings'\n    );\n  }\n\n  /**\n   * Update settings\n   */\n  async updateSettings(settings: Partial<SettingsData>): Promise<ServiceResult<SettingsData>> {\n    return this.executeOperation(\n      async () => {\n        const response = await unifiedAPI.put('/api/settings', settings);\n        return response.data;\n      },\n      'updateSettings',\n      'settings'\n    );\n  }\n}\n\n/**\n * Health Service - System Health and Connectivity\n */\nexport class HealthService extends UnifiedBaseService {\n  constructor(config?: Partial<ServiceConfig>) {\n    super('HealthService', config);\n  }\n\n  /**\n   * Test connection to all systems\n   */\n  async testConnection(): Promise<ServiceResult<ConnectionTestResult>> {\n    return this.executeOperation(\n      async () => {\n        const results: ConnectionTestResult = {\n          backend: false,\n          supabase: false,\n          timestamp: new Date(),\n          details: {},\n        };\n\n        // Test unified API client health\n        try {\n          const health = await unifiedAPI.healthCheck();\n          results.backend = health.status !== 'unhealthy';\n          results.details.apiHealth = health;\n        } catch (error) {\n          results.backend = false;\n          results.details.error = error instanceof Error ? error.message : 'Unknown error';\n        }\n\n        // Test Supabase connectivity\n        try {\n          const { error } = await supabase.from('vapi_calls').select('count').limit(1);\n          results.supabase = !error;\n          if (error) {\n            results.details.supabaseError = error.message;\n          }\n        } catch (error) {\n          results.supabase = false;\n          results.details.supabaseError = error instanceof Error ? error.message : 'Unknown error';\n        }\n\n        return results;\n      },\n      'testConnection',\n      'health'\n    );\n  }\n}\n\n// Export service instances\nexport const vapiService = new VAPIService();\nexport const smsService = new SMSService();\nexport const automationService = new AutomationService();\nexport const mapsService = new MapsService();\nexport const crmService = new CRMService();\nexport const analyticsService = new AnalyticsService();\nexport const settingsService = new SettingsService();\nexport const healthService = new HealthService();\n\n// Export unified services object\nexport const services = {\n  vapi: vapiService,\n  sms: smsService,\n  automation: automationService,\n  maps: mapsService,\n  crm: crmService,\n  analytics: analyticsService,\n  settings: settingsService,\n  health: healthService,\n} as const;\n\n// Export types\nexport type {\n  ServiceConfig,\n  ServiceResult,\n  PaginatedResult,\n  QueryOptions,\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api\\UnifiedAPIClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorCategory' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8933,8936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8933,8936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8980,8983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8980,8983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11377,11380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11377,11380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified API Client\n * Consolidates all API patterns into a single, maintainable architecture\n * - Type-safe requests with validation\n * - Comprehensive error handling and retry logic\n * - Circuit breaker pattern for external services\n * - Request/response interceptors\n * - Automatic authentication handling\n * - Rate limiting and caching support\n */\n\nimport { logger } from '@/lib/logger';\nimport { ErrorHandler, ErrorCategory, type StandardError } from '@/services/errors/ErrorHandler';\nimport { apiConfig, getAuthHeaders, validateResponse } from '@/config/api.secure';\nimport { supabase } from '@/integrations/supabase/client';\nimport type { User } from '@supabase/supabase-js';\n\n// Request/Response Types\nexport interface APIRequest {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  endpoint: string;\n  data?: unknown;\n  headers?: Record<string, string>;\n  timeout?: number;\n  retries?: number;\n  useCircuitBreaker?: boolean;\n  bypassCache?: boolean;\n  validateInput?: (data: unknown) => boolean;\n  validateOutput?: (data: unknown) => boolean;\n}\n\nexport interface APIResponse<T = unknown> {\n  data: T;\n  status: number;\n  headers: Record<string, string>;\n  requestId: string;\n  timestamp: string;\n  cached?: boolean;\n}\n\nexport interface APIErrorResponse {\n  error: StandardError;\n  requestId: string;\n  timestamp: string;\n}\n\n// Configuration\nexport interface UnifiedAPIConfig {\n  baseUrl: string;\n  timeout: number;\n  maxRetries: number;\n  enableCaching: boolean;\n  cacheTimeout: number;\n  enableCircuitBreaker: boolean;\n  rateLimit: {\n    enabled: boolean;\n    requestsPerMinute: number;\n  };\n  authentication: {\n    enabled: boolean;\n    autoRefresh: boolean;\n  };\n}\n\n// Cache entry\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n}\n\n// Rate limiting\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n}\n\n/**\n * Unified API Client - Single source of truth for all API operations\n */\nexport class UnifiedAPIClient {\n  private static instance: UnifiedAPIClient;\n  private errorHandler: ErrorHandler;\n  private cache = new Map<string, CacheEntry<unknown>>();\n  private rateLimits = new Map<string, RateLimitEntry>();\n  private currentUser: User | null = null;\n  private authToken: string | null = null;\n  private requestInterceptors: Array<(request: APIRequest) => Promise<APIRequest>> = [];\n  private responseInterceptors: Array<(response: APIResponse) => Promise<APIResponse>> = [];\n\n  private config: UnifiedAPIConfig = {\n    baseUrl: apiConfig.baseUrl,\n    timeout: apiConfig.timeout,\n    maxRetries: 3,\n    enableCaching: true,\n    cacheTimeout: 5 * 60 * 1000, // 5 minutes\n    enableCircuitBreaker: true,\n    rateLimit: {\n      enabled: true,\n      requestsPerMinute: 100,\n    },\n    authentication: {\n      enabled: true,\n      autoRefresh: true,\n    },\n  };\n\n  private constructor(config?: Partial<UnifiedAPIConfig>) {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n    \n    this.errorHandler = ErrorHandler.getInstance();\n    this.initializeAuth();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(config?: Partial<UnifiedAPIConfig>): UnifiedAPIClient {\n    if (!UnifiedAPIClient.instance) {\n      UnifiedAPIClient.instance = new UnifiedAPIClient(config);\n    }\n    return UnifiedAPIClient.instance;\n  }\n\n  /**\n   * Initialize authentication\n   */\n  private async initializeAuth(): Promise<void> {\n    if (!this.config.authentication.enabled) return;\n\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        this.currentUser = session.user;\n        this.authToken = session.access_token;\n      }\n\n      // Listen for auth changes\n      supabase.auth.onAuthStateChange((event, session) => {\n        if (session) {\n          this.currentUser = session.user;\n          this.authToken = session.access_token;\n        } else {\n          this.currentUser = null;\n          this.authToken = null;\n        }\n      });\n    } catch (error) {\n      logger.warn('Failed to initialize authentication', { error });\n    }\n  }\n\n  /**\n   * Main request method - handles all HTTP operations\n   */\n  async request<T = unknown>(request: APIRequest): Promise<APIResponse<T>> {\n    const requestId = crypto.randomUUID();\n    const timestamp = new Date().toISOString();\n    \n    try {\n      // Apply request interceptors\n      let processedRequest = request;\n      for (const interceptor of this.requestInterceptors) {\n        processedRequest = await interceptor(processedRequest);\n      }\n\n      // Input validation\n      if (processedRequest.validateInput && processedRequest.data) {\n        if (!processedRequest.validateInput(processedRequest.data)) {\n          throw new Error('Request validation failed');\n        }\n      }\n\n      // Check rate limit\n      this.checkRateLimit(processedRequest.endpoint);\n\n      // Check cache for GET requests\n      if (processedRequest.method === 'GET' && !processedRequest.bypassCache) {\n        const cached = this.getFromCache<T>(processedRequest.endpoint);\n        if (cached) {\n          return {\n            data: cached,\n            status: 200,\n            headers: {},\n            requestId,\n            timestamp,\n            cached: true,\n          };\n        }\n      }\n\n      // Execute request with error handling and retries\n      const response = await this.errorHandler.executeWithErrorHandling(\n        () => this.executeRequest<T>(processedRequest, requestId),\n        {\n          source: 'UnifiedAPIClient',\n          operation: `${processedRequest.method} ${processedRequest.endpoint}`,\n          correlationId: requestId,\n          retryConfig: {\n            maxAttempts: processedRequest.retries ?? this.config.maxRetries,\n          },\n        }\n      );\n\n      // Output validation\n      if (processedRequest.validateOutput && !processedRequest.validateOutput(response.data)) {\n        throw new Error('Response validation failed');\n      }\n\n      // Security validation\n      if (!validateResponse(response.data)) {\n        throw new Error('Response security validation failed');\n      }\n\n      // Cache successful GET responses\n      if (processedRequest.method === 'GET' && this.config.enableCaching) {\n        this.setCache(processedRequest.endpoint, response.data);\n      }\n\n      // Apply response interceptors\n      let processedResponse = response;\n      for (const interceptor of this.responseInterceptors) {\n        processedResponse = await interceptor(processedResponse);\n      }\n\n      return processedResponse;\n\n    } catch (error) {\n      const standardError = this.errorHandler.handleError(error, {\n        source: 'UnifiedAPIClient',\n        operation: `${request.method} ${request.endpoint}`,\n        correlationId: requestId,\n        userId: this.currentUser?.id,\n      });\n\n      throw {\n        error: standardError,\n        requestId,\n        timestamp,\n      } as APIErrorResponse;\n    }\n  }\n\n  /**\n   * Execute the actual HTTP request\n   */\n  private async executeRequest<T>(\n    request: APIRequest,\n    requestId: string\n  ): Promise<APIResponse<T>> {\n    const url = this.buildUrl(request.endpoint);\n    const headers = this.buildHeaders(request.headers);\n    const timeout = request.timeout ?? this.config.timeout;\n\n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const fetchOptions: RequestInit = {\n        method: request.method,\n        headers,\n        signal: controller.signal,\n        credentials: 'include',\n      };\n\n      // Add body for non-GET requests\n      if (request.data && request.method !== 'GET') {\n        fetchOptions.body = JSON.stringify(request.data);\n      }\n\n      logger.debug('API Request', {\n        requestId,\n        method: request.method,\n        url,\n        headers: this.sanitizeHeaders(headers),\n      });\n\n      const response = await fetch(url, fetchOptions);\n      \n      // Parse response\n      const responseData = await this.parseResponse<T>(response);\n      \n      const apiResponse: APIResponse<T> = {\n        data: responseData,\n        status: response.status,\n        headers: this.extractHeaders(response.headers),\n        requestId,\n        timestamp: new Date().toISOString(),\n      };\n\n      logger.debug('API Response', {\n        requestId,\n        status: response.status,\n        dataType: typeof responseData,\n      });\n\n      return apiResponse;\n\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  /**\n   * Parse response based on content type\n   */\n  private async parseResponse<T>(response: Response): Promise<T> {\n    if (!response.ok) {\n      let errorData: unknown;\n      try {\n        errorData = await response.json();\n      } catch {\n        errorData = await response.text();\n      }\n      \n      const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n      (error as any).status = response.status;\n      (error as any).data = errorData;\n      throw error;\n    }\n\n    const contentType = response.headers.get('content-type');\n    \n    if (contentType?.includes('application/json')) {\n      return await response.json();\n    }\n    \n    if (contentType?.includes('text/')) {\n      return await response.text() as T;\n    }\n    \n    return await response.blob() as T;\n  }\n\n  /**\n   * Build complete URL\n   */\n  private buildUrl(endpoint: string): string {\n    if (endpoint.startsWith('http')) {\n      return endpoint;\n    }\n    \n    const baseUrl = this.config.baseUrl.endsWith('/') \n      ? this.config.baseUrl.slice(0, -1) \n      : this.config.baseUrl;\n    \n    const cleanEndpoint = endpoint.startsWith('/') \n      ? endpoint \n      : `/${endpoint}`;\n    \n    return `${baseUrl}${cleanEndpoint}`;\n  }\n\n  /**\n   * Build request headers\n   */\n  private buildHeaders(additionalHeaders?: Record<string, string>): Record<string, string> {\n    const headers = {\n      ...apiConfig.headers,\n      ...getAuthHeaders(this.authToken || undefined),\n      ...additionalHeaders,\n    };\n\n    return headers;\n  }\n\n  /**\n   * Sanitize headers for logging (remove sensitive data)\n   */\n  private sanitizeHeaders(headers: Record<string, string>): Record<string, string> {\n    const sanitized = { ...headers };\n    const sensitiveKeys = ['authorization', 'x-api-key', 'x-csrf-token'];\n    \n    for (const key of sensitiveKeys) {\n      if (sanitized[key.toLowerCase()]) {\n        sanitized[key.toLowerCase()] = '[REDACTED]';\n      }\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * Extract headers from Response\n   */\n  private extractHeaders(headers: Headers): Record<string, string> {\n    const result: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      result[key] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Rate limiting check\n   */\n  private checkRateLimit(endpoint: string): void {\n    if (!this.config.rateLimit.enabled) return;\n\n    const now = Date.now();\n    const minute = 60 * 1000;\n    const key = this.getRateLimitKey(endpoint);\n    \n    let entry = this.rateLimits.get(key);\n    \n    if (!entry || (now - entry.resetTime) > minute) {\n      entry = { count: 0, resetTime: now };\n      this.rateLimits.set(key, entry);\n    }\n    \n    entry.count++;\n    \n    if (entry.count > this.config.rateLimit.requestsPerMinute) {\n      const error = new Error('Rate limit exceeded');\n      (error as any).retryAfter = minute - (now - entry.resetTime);\n      throw error;\n    }\n  }\n\n  /**\n   * Get rate limit key\n   */\n  private getRateLimitKey(endpoint: string): string {\n    // Group by endpoint pattern, not exact URL\n    const pattern = endpoint.replace(/\\/\\d+/g, '/:id').replace(/\\?.*/g, '');\n    return `${this.currentUser?.id || 'anonymous'}:${pattern}`;\n  }\n\n  /**\n   * Cache management\n   */\n  private getFromCache<T>(key: string): T | null {\n    if (!this.config.enableCaching) return null;\n    \n    const entry = this.cache.get(key) as CacheEntry<T> | undefined;\n    \n    if (!entry) return null;\n    \n    if (Date.now() > entry.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry.data;\n  }\n\n  private setCache(key: string, data: unknown): void {\n    if (!this.config.enableCaching) return;\n    \n    const entry: CacheEntry<unknown> = {\n      data,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + this.config.cacheTimeout,\n    };\n    \n    this.cache.set(key, entry);\n  }\n\n  /**\n   * Convenience methods for common HTTP operations\n   */\n  async get<T = unknown>(\n    endpoint: string, \n    options?: Omit<APIRequest, 'method' | 'endpoint' | 'data'>\n  ): Promise<APIResponse<T>> {\n    return this.request<T>({\n      method: 'GET',\n      endpoint,\n      ...options,\n    });\n  }\n\n  async post<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    options?: Omit<APIRequest, 'method' | 'endpoint' | 'data'>\n  ): Promise<APIResponse<T>> {\n    return this.request<T>({\n      method: 'POST',\n      endpoint,\n      data,\n      ...options,\n    });\n  }\n\n  async put<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    options?: Omit<APIRequest, 'method' | 'endpoint' | 'data'>\n  ): Promise<APIResponse<T>> {\n    return this.request<T>({\n      method: 'PUT',\n      endpoint,\n      data,\n      ...options,\n    });\n  }\n\n  async patch<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    options?: Omit<APIRequest, 'method' | 'endpoint' | 'data'>\n  ): Promise<APIResponse<T>> {\n    return this.request<T>({\n      method: 'PATCH',\n      endpoint,\n      data,\n      ...options,\n    });\n  }\n\n  async delete<T = unknown>(\n    endpoint: string,\n    options?: Omit<APIRequest, 'method' | 'endpoint' | 'data'>\n  ): Promise<APIResponse<T>> {\n    return this.request<T>({\n      method: 'DELETE',\n      endpoint,\n      ...options,\n    });\n  }\n\n  /**\n   * Interceptor management\n   */\n  addRequestInterceptor(interceptor: (request: APIRequest) => Promise<APIRequest>): void {\n    this.requestInterceptors.push(interceptor);\n  }\n\n  addResponseInterceptor(interceptor: (response: APIResponse) => Promise<APIResponse>): void {\n    this.responseInterceptors.push(interceptor);\n  }\n\n  /**\n   * Cache management\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  invalidateCache(pattern?: string): void {\n    if (!pattern) {\n      this.clearCache();\n      return;\n    }\n\n    const regex = new RegExp(pattern);\n    for (const [key] of this.cache) {\n      if (regex.test(key)) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Configuration updates\n   */\n  updateConfig(config: Partial<UnifiedAPIConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  getConfig(): Readonly<UnifiedAPIConfig> {\n    return Object.freeze({ ...this.config });\n  }\n\n  /**\n   * Health check\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    timestamp: string;\n    checks: {\n      api: boolean;\n      auth: boolean;\n      cache: boolean;\n    };\n  }> {\n    const timestamp = new Date().toISOString();\n    const checks = {\n      api: false,\n      auth: false,\n      cache: true, // Cache is always available\n    };\n\n    try {\n      // Test API connectivity\n      await this.get('/health', { timeout: 5000 });\n      checks.api = true;\n    } catch {\n      // API check failed\n    }\n\n    try {\n      // Test auth\n      if (this.config.authentication.enabled) {\n        const { data } = await supabase.auth.getUser();\n        checks.auth = !!data.user;\n      } else {\n        checks.auth = true; // Auth not required\n      }\n    } catch {\n      // Auth check failed\n    }\n\n    const healthyChecks = Object.values(checks).filter(Boolean).length;\n    const totalChecks = Object.keys(checks).length;\n    \n    let status: 'healthy' | 'degraded' | 'unhealthy';\n    if (healthyChecks === totalChecks) {\n      status = 'healthy';\n    } else if (healthyChecks > 0) {\n      status = 'degraded';\n    } else {\n      status = 'unhealthy';\n    }\n\n    return {\n      status,\n      timestamp,\n      checks,\n    };\n  }\n}\n\n// Export singleton instance\nexport const unifiedAPI = UnifiedAPIClient.getInstance();\n\n// Export types\nexport type {\n  APIRequest,\n  APIResponse,\n  APIErrorResponse,\n  UnifiedAPIConfig,\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api\\__tests__\\unified.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorSeverity' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3689,3692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3689,3692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8363,8366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8363,8366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8981,8984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8981,8984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified API Integration Tests\n * Verifies the consolidated API architecture works correctly\n */\n\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { services, unifiedAPI, getUnifiedConfig, validateConfig } from '../index';\nimport { ErrorCategory, ErrorSeverity } from '../../../services/errors/ErrorHandler';\n\n// Mock fetch for testing\nglobal.fetch = vi.fn();\n\n// Mock environment variables\nvi.mock('@/lib/env', () => ({\n  env: {\n    MODE: 'test',\n    DEV: true,\n    PROD: false,\n  },\n  isFeatureEnabled: vi.fn(() => true),\n  getApiConfig: vi.fn(() => ({\n    baseUrl: 'http://localhost:8080',\n    supabase: {\n      url: 'https://test.supabase.co',\n      anonKey: 'test-key',\n    },\n    vapi: {\n      apiUrl: 'https://api.vapi.ai',\n      webhookUrl: 'https://webhook.test',\n      publicKey: 'test-vapi-key',\n    },\n    googleMaps: {\n      apiKey: 'test-maps-key',\n    },\n  })),\n}));\n\n// Mock Supabase\nvi.mock('@/integrations/supabase/client', () => ({\n  supabase: {\n    auth: {\n      getSession: vi.fn(() => Promise.resolve({ data: { session: null } })),\n      onAuthStateChange: vi.fn(),\n      getUser: vi.fn(() => Promise.resolve({ data: { user: null } })),\n    },\n    functions: {\n      invoke: vi.fn(() => Promise.resolve({ data: {}, error: null })),\n    },\n    from: vi.fn(() => ({\n      select: vi.fn().mockReturnThis(),\n      eq: vi.fn().mockReturnThis(),\n      order: vi.fn().mockReturnThis(),\n      range: vi.fn().mockReturnThis(),\n      limit: vi.fn().mockReturnThis(),\n      single: vi.fn(() => Promise.resolve({ data: null, error: null })),\n      insert: vi.fn().mockReturnThis(),\n    })),\n  },\n}));\n\ndescribe('Unified API Architecture', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Configuration', () => {\n    it('should load unified configuration successfully', () => {\n      const config = getUnifiedConfig();\n      \n      expect(config).toBeDefined();\n      expect(config.environment).toBe('test');\n      expect(config.auth.supabaseUrl).toBe('https://test.supabase.co');\n      expect(config.services.vapi.enabled).toBe(true);\n    });\n\n    it('should validate configuration correctly', () => {\n      const config = getUnifiedConfig();\n      const validation = validateConfig(config);\n      \n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n  });\n\n  describe('UnifiedAPIClient', () => {\n    it('should make GET requests successfully', async () => {\n      const mockResponse = {\n        ok: true,\n        status: 200,\n        headers: new Headers({ 'content-type': 'application/json' }),\n        json: () => Promise.resolve({ message: 'success' }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      const response = await unifiedAPI.get('/api/test');\n      \n      expect(response.data).toEqual({ message: 'success' });\n      expect(response.status).toBe(200);\n      expect(fetch).toHaveBeenCalledWith(\n        'http://localhost:8080/api/test',\n        expect.objectContaining({\n          method: 'GET',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n        })\n      );\n    });\n\n    it('should handle errors correctly', async () => {\n      const mockResponse = {\n        ok: false,\n        status: 404,\n        statusText: 'Not Found',\n        headers: new Headers(),\n        json: () => Promise.resolve({ error: 'Resource not found' }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      try {\n        await unifiedAPI.get('/api/nonexistent');\n        expect.fail('Expected error to be thrown');\n      } catch (error: any) {\n        expect(error.error).toBeDefined();\n        expect(error.error.category).toBe(ErrorCategory.CLIENT_ERROR);\n        expect(error.error.retryable).toBe(false);\n      }\n    });\n\n    it('should support caching for GET requests', async () => {\n      const mockResponse = {\n        ok: true,\n        status: 200,\n        headers: new Headers({ 'content-type': 'application/json' }),\n        json: () => Promise.resolve({ cached: true }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      // First request should hit the network\n      const response1 = await unifiedAPI.get('/api/cacheable');\n      expect(response1.cached).toBeUndefined();\n      \n      // Second request should be cached\n      const response2 = await unifiedAPI.get('/api/cacheable');\n      expect(response2.cached).toBe(true);\n      \n      // Fetch should only be called once\n      expect(fetch).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Service Layer', () => {\n    describe('VAPIService', () => {\n      it('should start call with fallback support', async () => {\n        const mockCallData = { callId: 'test-call-123', status: 'initiated' };\n        \n        // Mock successful API response\n        const mockResponse = {\n          ok: true,\n          status: 200,\n          headers: new Headers({ 'content-type': 'application/json' }),\n          json: () => Promise.resolve(mockCallData),\n        };\n        \n        vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n        \n        const result = await services.vapi.startCall('+1234567890', {\n          customerId: 'test-customer',\n        });\n        \n        expect(result.success).toBe(true);\n        expect(result.data).toEqual(mockCallData);\n        expect(result.meta.action).toBe('startCall');\n        expect(result.meta.entity).toBe('vapi_call');\n      });\n\n      it('should handle service errors gracefully', async () => {\n        // Mock network error\n        vi.mocked(fetch).mockRejectedValue(new Error('Network error'));\n        \n        const result = await services.vapi.startCall('+1234567890', {});\n        \n        expect(result.success).toBe(false);\n        expect(result.error).toBeDefined();\n        expect(result.error?.message).toContain('Network error');\n      });\n    });\n\n    describe('CRMService', () => {\n      it('should get calls with pagination', async () => {\n        const mockCallsData = {\n          items: [\n            {\n              id: 'call-1',\n              phoneNumber: '+1234567890',\n              status: 'completed',\n              duration: 120,\n            },\n          ],\n          total: 1,\n          page: 1,\n          pageSize: 25,\n        };\n        \n        const mockResponse = {\n          ok: true,\n          status: 200,\n          headers: new Headers({ 'content-type': 'application/json' }),\n          json: () => Promise.resolve(mockCallsData),\n        };\n        \n        vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n        \n        const result = await services.crm.getCalls({\n          page: 1,\n          pageSize: 25,\n        });\n        \n        expect(result.success).toBe(true);\n        expect(result.data?.items).toHaveLength(1);\n        expect(result.data?.total).toBe(1);\n      });\n    });\n\n    describe('HealthService', () => {\n      it('should test system connectivity', async () => {\n        const result = await services.health.testConnection();\n        \n        expect(result.success).toBe(true);\n        expect(result.data?.timestamp).toBeInstanceOf(Date);\n        expect(result.data?.details).toBeDefined();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should categorize errors correctly', async () => {\n      const scenarios = [\n        {\n          status: 401,\n          expectedCategory: ErrorCategory.AUTHENTICATION_ERROR,\n        },\n        {\n          status: 429,\n          expectedCategory: ErrorCategory.RATE_LIMIT_ERROR,\n        },\n        {\n          status: 422,\n          expectedCategory: ErrorCategory.VALIDATION_ERROR,\n        },\n        {\n          status: 500,\n          expectedCategory: ErrorCategory.SERVER_ERROR,\n        },\n      ];\n      \n      for (const scenario of scenarios) {\n        const mockResponse = {\n          ok: false,\n          status: scenario.status,\n          statusText: 'Error',\n          headers: new Headers(),\n          json: () => Promise.resolve({ error: 'Test error' }),\n        };\n        \n        vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n        \n        try {\n          await unifiedAPI.get('/api/test');\n          expect.fail('Expected error to be thrown');\n        } catch (error: any) {\n          expect(error.error.category).toBe(scenario.expectedCategory);\n        }\n      }\n    });\n\n    it('should provide user-friendly error messages', async () => {\n      const mockResponse = {\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n        headers: new Headers(),\n        json: () => Promise.resolve({ error: 'Database connection failed' }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      try {\n        await unifiedAPI.get('/api/test');\n        expect.fail('Expected error to be thrown');\n      } catch (error: any) {\n        expect(error.error.userMessage).toBeDefined();\n        expect(error.error.userMessage).not.toContain('Database connection failed');\n        expect(error.error.userMessage).toContain('unexpected error occurred');\n      }\n    });\n  });\n\n  describe('Legacy Compatibility', () => {\n    it('should support legacy VAPIService exports', async () => {\n      const { VAPIService } = await import('../index');\n      \n      const mockResponse = {\n        ok: true,\n        status: 200,\n        headers: new Headers({ 'content-type': 'application/json' }),\n        json: () => Promise.resolve({ callId: 'legacy-test' }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      // Should work with legacy interface\n      const result = await VAPIService.startCall('+1234567890', {});\n      expect(result).toEqual({ callId: 'legacy-test' });\n    });\n  });\n\n  describe('Performance Features', () => {\n    it('should implement rate limiting', async () => {\n      // This would require more complex mocking to test properly\n      // For now, just verify the rate limit configuration exists\n      const config = getUnifiedConfig();\n      expect(config.rateLimit.enabled).toBe(true);\n      expect(config.rateLimit.requestsPerMinute).toBeGreaterThan(0);\n    });\n\n    it('should support cache invalidation', async () => {\n      const mockResponse = {\n        ok: true,\n        status: 200,\n        headers: new Headers({ 'content-type': 'application/json' }),\n        json: () => Promise.resolve({ data: 'test' }),\n      };\n      \n      vi.mocked(fetch).mockResolvedValue(mockResponse as Response);\n      \n      // Make initial request\n      await unifiedAPI.get('/api/cache-test');\n      \n      // Clear cache\n      unifiedAPI.clearCache();\n      \n      // Make another request - should hit network again\n      await unifiedAPI.get('/api/cache-test');\n      \n      expect(fetch).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n\n// Integration test with actual Supabase (if configured)\ndescribe('Integration Tests (Real Services)', () => {\n  // These tests would run against real services in CI/CD\n  // Skipped in unit test environment\n  \n  it.skip('should connect to real Supabase', async () => {\n    const result = await services.health.testConnection();\n    expect(result.success).toBe(true);\n    expect(result.data?.supabase).toBe(true);\n  });\n  \n  it.skip('should handle real API endpoints', async () => {\n    const health = await unifiedAPI.healthCheck();\n    expect(health.status).toBeOneOf(['healthy', 'degraded', 'unhealthy']);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\api\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1901,1904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1901,1904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2880,2883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2880,2883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3071,3074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3071,3074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified API Services Export\n * Single entry point for all API operations\n *\n * MIGRATION GUIDE:\n * Old: import { VAPIService } from '@/services/api'\n * New: import { services } from '@/services/api'\n *      services.vapi.startCall(phoneNumber, context)\n *\n * Old: import { api } from '@/services/legacyApi'\n * New: import { services } from '@/services/api'\n *      services.crm.getCalls()\n *\n * Benefits:\n * - Unified error handling and retry logic\n * - Consistent caching and performance optimization\n * - Type-safe requests with validation\n * - Circuit breaker protection for external services\n * - Automatic fallback to Supabase for reliability\n */\n\n// Core unified API client\nexport {\n  UnifiedAPIClient,\n  unifiedAPI,\n  type APIRequest,\n  type APIResponse,\n  type APIErrorResponse,\n  type UnifiedAPIConfig as APIClientConfig\n} from './UnifiedAPIClient';\n\n// Unified service layer\nexport {\n  services,\n  vapiService,\n  smsService,\n  automationService,\n  mapsService,\n  crmService,\n  analyticsService,\n  settingsService,\n  healthService,\n  type ServiceConfig,\n  type ServiceResult,\n  type PaginatedResult,\n  type QueryOptions\n} from './ServiceLayer';\n\n// Configuration\nexport {\n  unifiedConfig,\n  getUnifiedConfig,\n  isServiceEnabled,\n  getServiceConfig,\n  validateConfig,\n  getHealthCheckEndpoints,\n  type UnifiedAPIConfig\n} from '@/config/unified.api.config';\n\n// Error handling\nexport {\n  ErrorHandler,\n  ErrorCategory,\n  ErrorSeverity,\n  type StandardError,\n  type RetryConfig,\n  type ErrorHandlerConfig\n} from '@/services/errors/ErrorHandler';\n\n// Legacy compatibility exports (deprecated - use services object instead)\n// These will be removed in a future version\nimport {\n  vapiService,\n  smsService,\n  automationService,\n  mapsService\n} from './ServiceLayer';\n\n/**\n * @deprecated Use services.vapi instead\n */\nexport const VAPIService = {\n  startCall: (phoneNumber: string, context: any) =>\n    vapiService.startCall(phoneNumber, context).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    }),\n  getCallTranscript: (callId: string) =>\n    vapiService.getCallTranscript(callId).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    })\n};\n\n/**\n * @deprecated Use services.sms instead\n */\nexport const SMSService = {\n  sendSMS: (to: string, message: string, priority?: 'normal' | 'urgent') =>\n    smsService.sendSMS(to, message, priority).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    }),\n  sendBulkSMS: (recipients: string[], message: string) =>\n    smsService.sendBulkSMS(recipients, message).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    })\n};\n\n/**\n * @deprecated Use services.automation instead\n */\nexport const AutomationService = {\n  triggerWorkflow: (workflowName: string, data: any) =>\n    automationService.triggerWorkflow(workflowName, data).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    }),\n  sendFeedback: (feedback: any) =>\n    automationService.sendFeedback(feedback).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    })\n};\n\n/**\n * @deprecated Use services.maps instead\n */\nexport const MapsService = {\n  geocodeAddress: (address: string) =>\n    mapsService.geocodeAddress(address).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    }),\n  optimizeRoute: (waypoints: Array<{ lat: number; lng: number }>) =>\n    mapsService.optimizeRoute(waypoints).then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    })\n};\n\n/**\n * @deprecated Use services.health.testConnection() instead\n */\nexport const api = {\n  testConnection: () =>\n    healthService.testConnection().then(result => {\n      if (!result.success) throw result.error;\n      return result.data;\n    })\n};\n\n// Re-export commonly used types\nexport type {\n  CallData,\n  LeadData,\n  AnalyticsData,\n  SettingsData,\n  ConnectionTestResult\n} from '@/types/api';\n\nexport type {\n  CallContext,\n  WebhookClientData,\n  WebhookCallData,\n  WebhookInterventionData,\n  WebhookFeedbackData\n} from '@/types/api.types';\n\n/**\n * Default export - main services object\n *\n * Usage:\n * import api from '@/services/api';\n *\n * const calls = await api.crm.getCalls();\n * const result = await api.vapi.startCall(phoneNumber, context);\n */\nexport default services;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\auth\\authorization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\calls\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CALLS SERVICE - DOMAIN SERVICE IMPLEMENTATION\n * Handles all call-related business logic with optimized data access\n */\n\n\nimport { supabase } from '@/integrations/supabase/client';\nimport { \n  BaseService, \n  BaseRepository, \n  ServiceResult, \n  PaginatedResult, \n  QueryOptions,\n  RequiredFieldRule,\n  Injectable\n} from '@/services/BaseService';\nimport { logger } from '@/lib/logger';\n\n// Domain Models\nexport interface Call {\n  id: string;\n  call_id: string;\n  customer_phone: string;\n  started_at: string;\n  ended_at?: string;\n  duration?: number;\n  status: 'active' | 'completed' | 'failed';\n  priority: 'P1' | 'P2' | 'P3' | 'P4';\n  customer_name?: string;\n  customer_email?: string;\n  address?: string;\n  problem_description?: string;\n  transcript?: string;\n  recording_url?: string;\n  metadata?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CallMetrics {\n  totalCalls: number;\n  activeCalls: number;\n  completedCalls: number;\n  averageDuration: number;\n  callsByHour: Array<{ hour: string; count: number }>;\n  priorityDistribution: Record<string, number>;\n  completionRate: number;\n}\n\nexport interface CallFilter {\n  status?: string;\n  priority?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  customerName?: string;\n  customerPhone?: string;\n}\n\n// Repository Implementation\nclass CallsRepository extends BaseRepository<Call> {\n  constructor() {\n    super('vapi_calls', `\n      id,\n      call_id,\n      customer_phone,\n      started_at,\n      ended_at,\n      duration,\n      status,\n      priority,\n      customer_name,\n      customer_email,\n      address,\n      problem_description,\n      transcript,\n      recording_url,\n      metadata,\n      created_at,\n      updated_at\n    `);\n  }\n\n  async findById(id: string): Promise<Call | null> {\n    const { data, error } = await supabase\n      .from(this.tableName)\n      .select(this.selectFields)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logger.error('Failed to find call by ID', { id, error });\n      return null;\n    }\n\n    return data;\n  }\n\n  async findAll(options: QueryOptions = {}): Promise<PaginatedResult<Call>> {\n    const { page = 1, pageSize = 25, sortBy, sortOrder, filters } = options;\n\n    let query = supabase\n      .from(this.tableName)\n      .select(this.selectFields, { count: 'exact' });\n\n    // Apply filters\n    query = this.buildFilters(query, filters);\n    query = this.applySorting(query, sortBy, sortOrder);\n    query = this.applyPagination(query, page, pageSize);\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logger.error('Failed to fetch calls', { error, options });\n      return this.transformPaginatedResult([], 0, page, pageSize);\n    }\n\n    return this.transformPaginatedResult(data || [], count || 0, page, pageSize);\n  }\n\n  async create(call: Omit<Call, 'id' | 'created_at' | 'updated_at'>): Promise<Call> {\n    const { data, error } = await supabase\n      .from(this.tableName)\n      .insert(call)\n      .select(this.selectFields)\n      .single();\n\n    if (error) {\n      logger.error('Failed to create call', { error, call });\n      throw new Error(`Failed to create call: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  async update(id: string, updates: Partial<Call>): Promise<Call> {\n    const { data, error } = await supabase\n      .from(this.tableName)\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', id)\n      .select(this.selectFields)\n      .single();\n\n    if (error) {\n      logger.error('Failed to update call', { error, id, updates });\n      throw new Error(`Failed to update call: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from(this.tableName)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      logger.error('Failed to delete call', { error, id });\n      return false;\n    }\n\n    return true;\n  }\n\n  async count(filters?: Record<string, any>): Promise<number> {\n    let query = supabase\n      .from(this.tableName)\n      .select('id', { count: 'exact', head: true });\n\n    query = this.buildFilters(query, filters);\n\n    const { count, error } = await query;\n\n    if (error) {\n      logger.error('Failed to count calls', { error, filters });\n      return 0;\n    }\n\n    return count || 0;\n  }\n\n  // Custom query methods\n  async findByCallId(callId: string): Promise<Call | null> {\n    const { data, error } = await supabase\n      .from(this.tableName)\n      .select(this.selectFields)\n      .eq('call_id', callId)\n      .single();\n\n    if (error) {\n      logger.error('Failed to find call by call_id', { callId, error });\n      return null;\n    }\n\n    return data;\n  }\n\n  async findRecentCalls(limit = 50): Promise<Call[]> {\n    const { data, error } = await supabase\n      .from(this.tableName)\n      .select(this.selectFields)\n      .order('started_at', { ascending: false })\n      .limit(limit);\n\n    if (error) {\n      logger.error('Failed to fetch recent calls', { error });\n      return [];\n    }\n\n    return data || [];\n  }\n\n  async getCallMetrics(timeframe = '24h'): Promise<CallMetrics> {\n    const { data, error } = await supabase\n      .rpc('get_call_metrics', { time_period: timeframe });\n\n    if (error) {\n      logger.error('Failed to fetch call metrics', { error });\n      return {\n        totalCalls: 0,\n        activeCalls: 0,\n        completedCalls: 0,\n        averageDuration: 0,\n        callsByHour: [],\n        priorityDistribution: {},\n        completionRate: 0\n      };\n    }\n\n    return data || {};\n  }\n}\n\n// Service Implementation\n@Injectable('CallsService')\nexport class CallsService extends BaseService {\n  private repository = new CallsRepository();\n\n  // Validation rules for calls\n  private getValidationRules() {\n    return [\n      new RequiredFieldRule<Partial<Call>>('call_id', 'Call ID'),\n      new RequiredFieldRule<Partial<Call>>('customer_phone', 'Customer Phone'),\n      new RequiredFieldRule<Partial<Call>>('started_at', 'Start Time')\n    ];\n  }\n\n  /**\n   * Get paginated calls with filters and caching\n   */\n  async getCalls(options: QueryOptions & { filters?: CallFilter } = {}): Promise<ServiceResult<PaginatedResult<Call>>> {\n    return this.executeOperation(\n      async () => {\n        // Use direct Supabase query\n        const pageSize = options.pageSize || 25;\n        const offset = ((options.page || 1) - 1) * pageSize;\n\n        const { data: calls, error } = await supabase\n          .from('vapi_calls')\n          .select('*')\n          .order('started_at', { ascending: false })\n          .limit(pageSize)\n          .range(offset, offset + pageSize - 1);\n\n        if (error) {\n          throw new Error(error.message);\n        }\n        const total = await this.repository.count(options.filters);\n\n        return this.transformPaginatedResult(\n          calls, \n          total, \n          options.page || 1, \n          options.pageSize || 25\n        );\n      },\n      'Get Calls',\n      'Call'\n    );\n  }\n\n  /**\n   * Get call by ID with caching\n   */\n  async getCallById(id: string): Promise<ServiceResult<Call | null>> {\n    return this.executeOperation(\n      async () => {\n        const call = await this.repository.findById(id);\n        \n        if (call) {\n          await this.publishEvent('call.viewed', call.id, 'Call', { callId: id });\n        }\n\n        return call;\n      },\n      `Get Call ${id}`,\n      'Call'\n    );\n  }\n\n  /**\n   * Create new call with validation\n   */\n  async createCall(callData: Omit<Call, 'id' | 'created_at' | 'updated_at'>): Promise<ServiceResult<Call>> {\n    return this.executeOperation(\n      async () => {\n        // Validate call data\n        const validation = this.validateEntity(callData, this.getValidationRules());\n        if (!validation.valid) {\n          throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        const call = await this.repository.create(callData);\n\n        // Clear cache and publish event\n        this.invalidateCache('calls');\n        await this.publishEvent('call.created', call.id, 'Call', call);\n\n        return call;\n      },\n      'Create Call',\n      'Call'\n    );\n  }\n\n  /**\n   * Update call with optimistic updates\n   */\n  async updateCall(id: string, updates: Partial<Call>): Promise<ServiceResult<Call>> {\n    return this.executeOperation(\n      async () => {\n        const call = await this.repository.update(id, updates);\n\n        // Clear cache and publish event\n        this.invalidateCache('calls');\n        await this.publishEvent('call.updated', call.id, 'Call', { updates, call });\n\n        return call;\n      },\n      `Update Call ${id}`,\n      'Call'\n    );\n  }\n\n  /**\n   * Delete call with cleanup\n   */\n  async deleteCall(id: string): Promise<ServiceResult<boolean>> {\n    return this.executeOperation(\n      async () => {\n        const success = await this.repository.delete(id);\n\n        if (success) {\n          // Clear cache and publish event\n          this.invalidateCache('calls');\n          await this.publishEvent('call.deleted', id, 'Call', { callId: id });\n        }\n\n        return success;\n      },\n      `Delete Call ${id}`,\n      'Call'\n    );\n  }\n\n  /**\n   * Get recent calls with caching\n   */\n  async getRecentCalls(limit = 50): Promise<ServiceResult<Call[]>> {\n    return this.executeOperation(\n      async () => {\n        return await this.repository.findRecentCalls(limit);\n      },\n      'Get Recent Calls',\n      'Call'\n    );\n  }\n\n  /**\n   * Get call metrics with caching\n   */\n  async getCallMetrics(timeframe = '24h'): Promise<ServiceResult<CallMetrics>> {\n    return this.executeOperation(\n      async () => {\n        return await this.repository.getCallMetrics(timeframe);\n      },\n      'Get Call Metrics',\n      'Call'\n    );\n  }\n\n  /**\n   * Search calls by criteria\n   */\n  async searchCalls(\n    query: string,\n    options: QueryOptions = {}\n  ): Promise<ServiceResult<PaginatedResult<Call>>> {\n    return this.executeOperation(\n      async () => {\n        const filters = {\n          ...options.filters,\n          or: `customer_name.ilike.%${query}%,customer_phone.ilike.%${query}%,problem_description.ilike.%${query}%`\n        };\n\n        return await this.repository.findAll({\n          ...options,\n          filters\n        });\n      },\n      `Search Calls: ${query}`,\n      'Call'\n    );\n  }\n\n  /**\n   * Batch update calls\n   */\n  async batchUpdateCalls(\n    updates: Array<{ id: string; data: Partial<Call> }>\n  ): Promise<ServiceResult<Call[]>> {\n    return this.executeOperation(\n      async () => {\n        const updatedCalls: Call[] = [];\n\n        // Use transaction-like approach with Promise.all\n        const promises = updates.map(async ({ id, data }) => {\n          const call = await this.repository.update(id, data);\n          updatedCalls.push(call);\n          return call;\n        });\n\n        await Promise.all(promises);\n\n        // Clear cache and publish batch event\n        this.invalidateCache('calls');\n        await this.publishEvent('calls.batch_updated', 'batch', 'Call', {\n          count: updatedCalls.length,\n          callIds: updatedCalls.map(c => c.id)\n        });\n\n        return updatedCalls;\n      },\n      'Batch Update Calls',\n      'Call'\n    );\n  }\n\n  /**\n   * Export calls data\n   */\n  async exportCalls(\n    filters?: CallFilter,\n    format: 'json' | 'csv' = 'json'\n  ): Promise<ServiceResult<string>> {\n    return this.executeOperation(\n      async () => {\n        const calls = await this.repository.findAll({ filters, pageSize: 10000 });\n        \n        if (format === 'csv') {\n          return this.convertToCSV(calls.items);\n        }\n\n        return JSON.stringify(calls.items, null, 2);\n      },\n      'Export Calls',\n      'Call'\n    );\n  }\n\n  private convertToCSV(calls: Call[]): string {\n    if (calls.length === 0) return '';\n\n    const headers = [\n      'ID', 'Call ID', 'Phone', 'Started At', 'Duration', \n      'Status', 'Priority', 'Customer', 'Problem'\n    ];\n\n    const rows = calls.map(call => [\n      call.id,\n      call.call_id,\n      call.customer_phone,\n      call.started_at,\n      call.duration?.toString() || '',\n      call.status,\n      call.priority,\n      call.customer_name || '',\n      call.problem_description || ''\n    ]);\n\n    return [headers, ...rows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n  }\n}\n\n// Export singleton instance\nexport const callsService = new CallsService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\core\\ServiceRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4510,4513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4510,4513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Registry - Centralized service management and dependency injection\n * Provides service discovery, lifecycle management, and configuration\n */\n\nimport { logger } from '@/lib/logger';\nimport { ApiGateway, GatewayConfig } from '@/services/gateway/ApiGateway';\n\nexport interface ServiceConfig {\n  name: string;\n  version: string;\n  dependencies?: string[];\n  config?: Record<string, unknown>;\n  healthCheck?: () => Promise<boolean>;\n}\n\nexport interface ServiceInstance<T = unknown> {\n  instance: T;\n  config: ServiceConfig;\n  status: 'initializing' | 'ready' | 'error' | 'stopped';\n  createdAt: number;\n  lastHealthCheck?: number;\n}\n\nexport type ServiceFactory<T> = (config: ServiceConfig, registry: ServiceRegistry) => T | Promise<T>;\n\nexport class ServiceRegistry {\n  private static instance: ServiceRegistry;\n  private services = new Map<string, ServiceInstance>();\n  private factories = new Map<string, ServiceFactory<unknown>>();\n  private dependencyGraph = new Map<string, Set<string>>();\n  private healthCheckInterval: NodeJS.Timeout;\n\n  private constructor() {\n    // Health check every 30 seconds\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthChecks();\n    }, 30 * 1000);\n\n    this.registerCoreServices();\n  }\n\n  static getInstance(): ServiceRegistry {\n    if (!ServiceRegistry.instance) {\n      ServiceRegistry.instance = new ServiceRegistry();\n    }\n    return ServiceRegistry.instance;\n  }\n\n  /**\n   * Register a service factory\n   */\n  registerFactory<T>(name: string, factory: ServiceFactory<T>): void {\n    this.factories.set(name, factory as ServiceFactory<unknown>);\n    logger.debug('Service factory registered', { serviceName: name });\n  }\n\n  /**\n   * Register a service instance\n   */\n  async registerService<T>(config: ServiceConfig): Promise<T> {\n    const { name, dependencies = [] } = config;\n\n    // Check if service already exists\n    if (this.services.has(name)) {\n      const existing = this.services.get(name)!;\n      if (existing.status === 'ready') {\n        return existing.instance as T;\n      }\n    }\n\n    // Initialize dependencies first\n    await this.initializeDependencies(dependencies);\n\n    // Create service instance\n    const serviceInstance: ServiceInstance<T> = {\n      instance: null as unknown as T,\n      config,\n      status: 'initializing',\n      createdAt: Date.now()\n    };\n\n    this.services.set(name, serviceInstance as ServiceInstance);\n\n    try {\n      // Get factory and create instance\n      const factory = this.factories.get(name);\n      if (!factory) {\n        throw new Error(`No factory registered for service: ${name}`);\n      }\n\n      const instance = await factory(config, this);\n      serviceInstance.instance = instance as T;\n      serviceInstance.status = 'ready';\n\n      // Update dependency graph\n      this.updateDependencyGraph(name, dependencies);\n\n      logger.info('Service registered successfully', {\n        serviceName: name,\n        version: config.version,\n        dependencies: dependencies.length\n      });\n\n      return instance as T;\n\n    } catch (error) {\n      serviceInstance.status = 'error';\n      logger.error('Service registration failed', {\n        serviceName: name,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get a service instance\n   */\n  getService<T>(name: string): T {\n    const service = this.services.get(name);\n\n    if (!service) {\n      throw new Error(`Service not found: ${name}`);\n    }\n\n    if (service.status !== 'ready') {\n      throw new Error(`Service not ready: ${name} (status: ${service.status})`);\n    }\n\n    return service.instance as T;\n  }\n\n  /**\n   * Check if a service exists and is ready\n   */\n  hasService(name: string): boolean {\n    const service = this.services.get(name);\n    return service?.status === 'ready';\n  }\n\n  /**\n   * Get all registered services\n   */\n  getAllServices(): Record<string, { status: string; config: ServiceConfig }> {\n    const result: Record<string, { status: string; config: ServiceConfig }> = {};\n\n    for (const [name, service] of this.services) {\n      result[name] = {\n        status: service.status,\n        config: service.config\n      };\n    }\n\n    return result;\n  }\n\n  /**\n   * Stop a service\n   */\n  async stopService(name: string): Promise<void> {\n    const service = this.services.get(name);\n    if (!service) {\n      return;\n    }\n\n    try {\n      // Call service cleanup if available\n      const instance = service.instance as any;\n      if (typeof instance.destroy === 'function') {\n        await instance.destroy();\n      } else if (typeof instance.stop === 'function') {\n        await instance.stop();\n      }\n\n      service.status = 'stopped';\n      logger.info('Service stopped', { serviceName: name });\n\n    } catch (error) {\n      logger.error('Error stopping service', {\n        serviceName: name,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Restart a service\n   */\n  async restartService(name: string): Promise<void> {\n    const service = this.services.get(name);\n    if (!service) {\n      throw new Error(`Service not found: ${name}`);\n    }\n\n    await this.stopService(name);\n    await this.registerService(service.config);\n  }\n\n  /**\n   * Initialize service dependencies\n   */\n  private async initializeDependencies(dependencies: string[]): Promise<void> {\n    for (const dep of dependencies) {\n      if (!this.hasService(dep)) {\n        throw new Error(`Dependency not available: ${dep}`);\n      }\n    }\n  }\n\n  /**\n   * Update dependency graph\n   */\n  private updateDependencyGraph(serviceName: string, dependencies: string[]): void {\n    this.dependencyGraph.set(serviceName, new Set(dependencies));\n  }\n\n  /**\n   * Get service dependency order\n   */\n  getDependencyOrder(): string[] {\n    const visited = new Set<string>();\n    const visiting = new Set<string>();\n    const result: string[] = [];\n\n    const visit = (serviceName: string): void => {\n      if (visiting.has(serviceName)) {\n        throw new Error(`Circular dependency detected: ${serviceName}`);\n      }\n\n      if (visited.has(serviceName)) {\n        return;\n      }\n\n      visiting.add(serviceName);\n\n      const dependencies = this.dependencyGraph.get(serviceName) || new Set();\n      for (const dep of dependencies) {\n        visit(dep);\n      }\n\n      visiting.delete(serviceName);\n      visited.add(serviceName);\n      result.push(serviceName);\n    };\n\n    for (const serviceName of this.services.keys()) {\n      visit(serviceName);\n    }\n\n    return result;\n  }\n\n  /**\n   * Perform health checks on all services\n   */\n  private async performHealthChecks(): Promise<void> {\n    const healthPromises = Array.from(this.services.entries()).map(\n      async ([name, service]) => {\n        if (service.status !== 'ready' || !service.config.healthCheck) {\n          return;\n        }\n\n        try {\n          const healthy = await service.config.healthCheck();\n          service.lastHealthCheck = Date.now();\n\n          if (!healthy) {\n            logger.warn('Service health check failed', { serviceName: name });\n            service.status = 'error';\n          }\n        } catch (error) {\n          logger.error('Service health check error', {\n            serviceName: name,\n            error: error instanceof Error ? error.message : String(error)\n          });\n          service.status = 'error';\n        }\n      }\n    );\n\n    await Promise.allSettled(healthPromises);\n  }\n\n  /**\n   * Register core services with the registry\n   */\n  private registerCoreServices(): void {\n    // API Gateway factory\n    this.registerFactory('ApiGateway', (config) => {\n      const gatewayConfig: GatewayConfig = {\n        baseUrl: (config.config?.baseUrl as string) || 'http://localhost:3000',\n        timeout: (config.config?.timeout as number) || 30000,\n        retries: (config.config?.retries as number) || 3,\n        rateLimiting: {\n          enabled: true,\n          windowMs: 60 * 1000,\n          maxRequests: 100\n        },\n        auth: {\n          required: true,\n          skipRoutes: ['/health', '/metrics']\n        },\n        monitoring: {\n          enabled: true,\n          sampleRate: 0.1\n        }\n      };\n\n      return ApiGateway.getInstance(gatewayConfig);\n    });\n\n    // Cache service factory\n    this.registerFactory('CacheService', () => {\n      return new Map(); // Simple in-memory cache for now\n    });\n\n    // Event bus factory\n    this.registerFactory('EventBus', () => {\n      return new EventTarget(); // Simple event bus for now\n    });\n  }\n\n  /**\n   * Get service health status\n   */\n  getHealthStatus(): {\n    overall: 'healthy' | 'degraded' | 'unhealthy';\n    services: Record<string, {\n      status: string;\n      lastHealthCheck?: number;\n      uptime: number;\n    }>;\n  } {\n    const serviceStatuses: Record<string, {\n      status: string;\n      lastHealthCheck?: number;\n      uptime: number;\n    }> = {};\n\n    let healthyCount = 0;\n    let totalCount = 0;\n\n    for (const [name, service] of this.services) {\n      const uptime = Date.now() - service.createdAt;\n      serviceStatuses[name] = {\n        status: service.status,\n        lastHealthCheck: service.lastHealthCheck,\n        uptime\n      };\n\n      totalCount++;\n      if (service.status === 'ready') {\n        healthyCount++;\n      }\n    }\n\n    let overall: 'healthy' | 'degraded' | 'unhealthy';\n    if (healthyCount === totalCount) {\n      overall = 'healthy';\n    } else if (healthyCount > 0) {\n      overall = 'degraded';\n    } else {\n      overall = 'unhealthy';\n    }\n\n    return {\n      overall,\n      services: serviceStatuses\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  async destroy(): Promise<void> {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    // Stop all services in reverse dependency order\n    const dependencyOrder = this.getDependencyOrder().reverse();\n\n    for (const serviceName of dependencyOrder) {\n      await this.stopService(serviceName);\n    }\n\n    this.services.clear();\n    this.factories.clear();\n    this.dependencyGraph.clear();\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\crm\\client.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupabaseQuery' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":160,"column":5,"severity":1,"nodeType":null,"fix":{"range":[4113,4175],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":455,"column":3,"severity":1,"nodeType":null,"fix":{"range":[12161,12223],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":457,"column":5,"severity":1,"nodeType":null,"fix":{"range":[12328,12390],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":458,"column":5,"severity":1,"nodeType":null,"fix":{"range":[12395,12457],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":475,"column":3,"severity":1,"nodeType":null,"fix":{"range":[12870,12932],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":477,"column":5,"severity":1,"nodeType":null,"fix":{"range":[13031,13093],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":494,"column":3,"severity":1,"nodeType":null,"fix":{"range":[13516,13578],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":496,"column":5,"severity":1,"nodeType":null,"fix":{"range":[13689,13751],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":513,"column":3,"severity":1,"nodeType":null,"fix":{"range":[14172,14234],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":515,"column":5,"severity":1,"nodeType":null,"fix":{"range":[14323,14385],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":532,"column":3,"severity":1,"nodeType":null,"fix":{"range":[14801,14863],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":534,"column":5,"severity":1,"nodeType":null,"fix":{"range":[14916,14978],"text":" "}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":481,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":481,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13273,13276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13273,13276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13931,13934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13931,13934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":519,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14565,14568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14565,14568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":541,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15265,15268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15265,15268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":12,"source":"import { supabase } from '@/integrations/supabase/client';\n// Use dynamic imports in functions to allow Vitest to mock './statsService' correctly\nimport type {\n  Client,\n  SMSMessage,\n  Intervention,\n  Technician,\n  InternalAlert,\n  CRMStats,\n  CRMFilters\n} from '@/shared/types/crm';\nimport type {\n  SupabaseQuery,\n  RealtimePayload\n} from '@/types/api.types';\nimport type { RealtimeChannel } from '@supabase/supabase-js';\n\n// ============================================\n// CLIENT SERVICES\n// ============================================\n\nexport const clientService = {\n  // Get all clients with optional filters\n  async getClients(filters?: CRMFilters) {\n    let query = supabase\n      .from('clients_enriched')\n      .select('*')\n      .order('last_contact_date', { ascending: false });\n\n    if (filters?.search) {\n      query = query.or(`first_name.ilike.%${filters.search}%,last_name.ilike.%${filters.search}%,phone.ilike.%${filters.search}%,email.ilike.%${filters.search}%`);\n    }\n    if (filters?.status?.length) {\n      query = query.in('status', filters.status);\n    }\n    if (filters?.priority?.length) {\n      query = query.in('priority_level', filters.priority);\n    }\n    if (filters?.city) {\n      query = query.eq('city', filters.city);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n    return data as Client[];\n  },\n\n  // Get single client by ID\n  async getClient(id: string) {\n    const { data, error } = await supabase\n      .from('clients_enriched')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return data as Client;\n  },\n\n  // Create or update client\n  async upsertClient(client: Partial<Client>) {\n    const { data, error } = await supabase\n      .from('clients')\n      .upsert(client)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Client;\n  },\n\n  // Update client\n  async updateClient(id: string, updates: Partial<Client>) {\n    const { data, error } = await supabase\n      .from('clients')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Client;\n  },\n\n  // Get client history\n  async getClientHistory(clientId: string) {\n    const [communications, interventions, sms] = await Promise.all([\n      supabase\n        .from('communication_history')\n        .select('*')\n        .eq('client_id', clientId)\n        .order('created_at', { ascending: false }),\n      supabase\n        .from('interventions')\n        .select('*')\n        .eq('client_id', clientId)\n        .order('created_at', { ascending: false }),\n      supabase\n        .from('sms_messages')\n        .select('*')\n        .eq('client_id', clientId)\n        .order('sent_at', { ascending: false })\n    ]);\n\n    return {\n      communications: communications.data || [],\n      interventions: interventions.data || [],\n      sms: sms.data || []\n    };\n  }\n};\n\n// ============================================\n// SMS SERVICES\n// ============================================\n\nexport const smsService = {\n  // Get all SMS messages\n  async getSMSMessages(filters?: CRMFilters) {\n    let query = supabase\n      .from('sms_messages')\n      .select(`\n        *,\n        client:clients(first_name, last_name, phone)\n      `)\n      .order('sent_at', { ascending: false });\n\n    if (filters?.priority?.length) {\n      query = query.in('priority', filters.priority);\n    }\n    if (filters?.dateFrom) {\n      query = query.gte('sent_at', filters.dateFrom);\n    }\n    if (filters?.dateTo) {\n      query = query.lte('sent_at', filters.dateTo);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n    return data as SMSMessage[];\n  },\n\n  // Get SMS by ID\n  async getSMS(id: string) {\n    const { data, error } = await supabase\n      .from('sms_messages')\n      .select(`\n        *,\n        client:clients(*)\n      `)\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return data as SMSMessage;\n  },\n\n  // Update SMS status\n  async updateSMSStatus(id: string, status: string, errorMessage?: string) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const updates: Partial<Client> = { \n      status,\n      ...(status === 'delivered' && { delivered_at: new Date().toISOString() }),\n      ...(errorMessage && { error_message: errorMessage })\n    };\n\n    const { data, error } = await supabase\n      .from('sms_messages')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as SMSMessage;\n  }\n};\n\n// ============================================\n// INTERVENTION SERVICES\n// ============================================\n\nexport const interventionService = {\n  // Get all interventions\n  async getInterventions(filters?: CRMFilters) {\n    let query = supabase\n      .from('interventions')\n      .select(`\n        *,\n        client:clients(first_name, last_name, phone, address),\n        technician:technicians(first_name, last_name)\n      `)\n      .order('scheduled_date', { ascending: false });\n\n    if (filters?.status?.length) {\n      query = query.in('status', filters.status);\n    }\n    if (filters?.priority?.length) {\n      query = query.in('priority', filters.priority);\n    }\n    if (filters?.serviceType) {\n      query = query.eq('service_type', filters.serviceType);\n    }\n    if (filters?.technician) {\n      query = query.eq('technician_id', filters.technician);\n    }\n    if (filters?.dateFrom) {\n      query = query.gte('scheduled_date', filters.dateFrom);\n    }\n    if (filters?.dateTo) {\n      query = query.lte('scheduled_date', filters.dateTo);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n    return data as Intervention[];\n  },\n\n  // Get today's interventions\n  async getTodayInterventions() {\n    // Use chaining when available (test mocks), otherwise plain select\n    const base = supabase.from('today_interventions').select('*');\n    let result: {\n      data?: Intervention[];\n      error?: unknown;\n    };\n    if (typeof base?.order === 'function') {\n      const ordered = base.order('scheduled_date', { ascending: false });\n      result = typeof ordered?.limit === 'function' ? await ordered.limit(50) : await ordered;\n    } else {\n      result = await base;\n    }\n    const { data, error } = result || {};\n    \n    if (error) throw error;\n    return data as Intervention[];\n  },\n\n  // Get intervention by ID\n  async getIntervention(id: string) {\n    const { data, error } = await supabase\n      .from('interventions')\n      .select(`\n        *,\n        client:clients(*),\n        technician:technicians(*)\n      `)\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return data as Intervention;\n  },\n\n  // Create intervention\n  async createIntervention(intervention: Partial<Intervention>) {\n    const { data, error } = await supabase\n      .from('interventions')\n      .insert(intervention)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Intervention;\n  },\n\n  // Update intervention\n  async updateIntervention(id: string, updates: Partial<Intervention>) {\n    const { data, error } = await supabase\n      .from('interventions')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Intervention;\n  },\n\n  // Start intervention\n  async startIntervention(id: string) {\n    return this.updateIntervention(id, {\n      status: 'in_progress',\n      started_at: new Date().toISOString()\n    });\n  },\n\n  // Complete intervention\n  async completeIntervention(id: string, finalPrice: number, notes?: string) {\n    const { data: intervention } = await this.getIntervention(id);\n    const duration = intervention?.started_at \n      ? Math.floor((Date.now() - new Date(intervention.started_at).getTime()) / 60000)\n      : null;\n\n    return this.updateIntervention(id, {\n      status: 'completed',\n      completed_at: new Date().toISOString(),\n      final_price: finalPrice,\n      duration_minutes: duration,\n      technician_notes: notes\n    });\n  }\n};\n\n// ============================================\n// ALERT SERVICES\n// ============================================\n\nexport const alertService = {\n  // Get active alerts\n  async getActiveAlerts() {\n    // Delegate to shared stats service to align with tests (dynamic import for mocks)\n    const { getActiveAlerts } = await import('@/services/analytics/stats');\n    const alerts = await getActiveAlerts();\n    return (alerts || []) as InternalAlert[];\n  },\n\n  // Get all alerts\n  async getAlerts(filters?: CRMFilters) {\n    let query = supabase\n      .from('internal_alerts')\n      .select(`\n        *,\n        client:clients(first_name, last_name, phone)\n      `)\n      .order('created_at', { ascending: false });\n\n    if (filters?.priority?.length) {\n      query = query.in('priority', filters.priority);\n    }\n    if (filters?.status?.length) {\n      query = query.in('status', filters.status);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n    return data as InternalAlert[];\n  },\n\n  // Acknowledge alert\n  async acknowledgeAlert(id: string, userId: string) {\n    const { data, error } = await supabase\n      .from('internal_alerts')\n      .update({\n        status: 'acknowledged',\n        acknowledged_by: userId,\n        acknowledged_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as InternalAlert;\n  },\n\n  // Resolve alert\n  async resolveAlert(id: string, userId: string) {\n    const { data, error } = await supabase\n      .from('internal_alerts')\n      .update({\n        status: 'resolved',\n        resolved_by: userId,\n        resolved_at: new Date().toISOString()\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as InternalAlert;\n  }\n};\n\n// ============================================\n// TECHNICIAN SERVICES\n// ============================================\n\nexport const technicianService = {\n  // Get all technicians\n  async getTechnicians() {\n    const { data, error } = await supabase\n      .from('technicians')\n      .select('*')\n      .eq('status', 'active')\n      .order('first_name');\n    \n    if (error) throw error;\n    return data as Technician[];\n  },\n\n  // Get available technicians\n  async getAvailableTechnicians() {\n    const { data, error } = await supabase\n      .from('technicians')\n      .select('*')\n      .eq('status', 'active')\n      .eq('available', true);\n    \n    if (error) throw error;\n    return data as Technician[];\n  },\n\n  // Update technician availability\n  async updateAvailability(id: string, available: boolean) {\n    const { data, error } = await supabase\n      .from('technicians')\n      .update({ available })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return data as Technician;\n  }\n};\n\n// ============================================\n// STATISTICS SERVICES\n// ============================================\n\nexport const statsService = {\n  // Get CRM statistics\n  async getStats(): Promise<CRMStats> {\n    // Delegate to shared stats service (used by tests) and map to CRM shape\n    const { getDashboardStats } = await import('@/services/analytics/stats');\n    const s = await getDashboardStats();\n    return {\n      totalClients: s.clients.total,\n      activeClients: s.clients.active,\n      totalInterventions: s.interventions.month,\n      todayInterventions: s.interventions.today,\n      totalSMS: s.sms.sent,\n      todaySMS: s.sms.sent, // no per-day split available in shared service\n      totalRevenue: s.revenue.year,\n      monthRevenue: s.revenue.month,\n      activeAlerts: 0,\n      p1Alerts: 0,\n      p2Alerts: 0,\n      averageResponseTime: 15,\n      customerSatisfaction: 4.7\n    };\n  }\n};\n\n// ============================================\n// REAL-TIME SUBSCRIPTIONS\n// ============================================\n\nexport const realtimeService = {\n  // Subscribe to alerts\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subscribeToAlerts(callback: (payload: RealtimePayload<InternalAlert>) => void): RealtimeChannel {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const client = supabase;\n    if (typeof client?.channel !== 'function') {\n      // Test/mock environment without realtime support\n      return { _noop: true } as RealtimeChannel;\n    }\n    return client\n      .channel('alerts')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'internal_alerts'\n      }, callback)\n      .subscribe();\n  },\n\n  // Subscribe to SMS\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subscribeToSMS(callback: (payload: RealtimePayload<SMSMessage>) => void): RealtimeChannel {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const client = supabase;\n    if (typeof client?.channel !== 'function') {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return { _noop: true } as any;\n    }\n    return client\n      .channel('sms')\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'sms_messages'\n      }, callback)\n      .subscribe();\n  },\n\n  // Subscribe to interventions\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subscribeToInterventions(callback: (payload: RealtimePayload<Intervention>) => void): RealtimeChannel {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const client = supabase;\n    if (typeof client?.channel !== 'function') {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return { _noop: true } as any;\n    }\n    return client\n      .channel('interventions')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'interventions'\n      }, callback)\n      .subscribe();\n  },\n\n  // Subscribe to calls\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subscribeToCalls(callback: (payload: RealtimePayload) => void): RealtimeChannel {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const client = supabase;\n    if (typeof client?.channel !== 'function') {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return { _noop: true } as any;\n    }\n    return client\n      .channel('calls')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'vapi_calls'\n      }, callback)\n      .subscribe();\n  },\n\n  // Unsubscribe from channel\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  unsubscribe(channel: RealtimeChannel): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const client = supabase;\n    if (typeof client?.removeChannel === 'function') {\n      return client.removeChannel(channel);\n    }\n    // No-op when removeChannel is unavailable (tests/mocks)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return undefined as any;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\errors\\ErrorHandler.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":395,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":395,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":463,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13702,13705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13702,13705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'code' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":654,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":654,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\examples\\ApiUsageExamples.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\ApiGateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'csrfProtection' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Gateway - Centralized request routing and middleware orchestration\n * Implements enterprise-grade API gateway pattern with:\n * - Request routing and aggregation\n * - Rate limiting and throttling\n * - Authentication/authorization checks\n * - Request/response transformation\n * - Comprehensive logging and monitoring\n */\n\n\nimport { logger } from '@/lib/logger';\nimport { csrfProtection } from '@/services/security/csrf';\nimport { withSecurityHeaders } from '@/services/security/headers';\nimport { RateLimiter } from './RateLimiter';\nimport { RequestValidator } from './RequestValidator';\nimport { ResponseTransformer } from './ResponseTransformer';\nimport { MetricsCollector } from './MetricsCollector';\nimport { CircuitBreaker } from './CircuitBreaker';\n\nexport interface GatewayConfig {\n  baseUrl: string;\n  timeout: number;\n  retries: number;\n  rateLimiting: {\n    enabled: boolean;\n    windowMs: number;\n    maxRequests: number;\n    skipSuccessful?: boolean;\n  };\n  auth: {\n    required: boolean;\n    skipRoutes: string[];\n  };\n  monitoring: {\n    enabled: boolean;\n    sampleRate: number;\n  };\n}\n\nexport interface GatewayRequest<T = unknown> {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  endpoint: string;\n  data?: T;\n  headers?: Record<string, string>;\n  timeout?: number;\n  retries?: number;\n  skipAuth?: boolean;\n  skipRateLimit?: boolean;\n  transform?: (data: unknown) => unknown;\n}\n\nexport interface GatewayResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: unknown;\n    stack?: string;\n  };\n  meta: {\n    requestId: string;\n    timestamp: string;\n    duration: number;\n    endpoint: string;\n    cached?: boolean;\n    retryAttempt?: number;\n  };\n}\n\nexport class ApiGateway {\n  private static instance: ApiGateway;\n  private config: GatewayConfig;\n  private rateLimiter: RateLimiter;\n  private validator: RequestValidator;\n  private transformer: ResponseTransformer;\n  private metrics: MetricsCollector;\n  private circuitBreakers: Map<string, CircuitBreaker>;\n\n  private constructor(config: GatewayConfig) {\n    this.config = config;\n    this.rateLimiter = new RateLimiter(config.rateLimiting);\n    this.validator = new RequestValidator();\n    this.transformer = new ResponseTransformer();\n    this.metrics = new MetricsCollector();\n    this.circuitBreakers = new Map();\n  }\n\n  static getInstance(config?: GatewayConfig): ApiGateway {\n    if (!ApiGateway.instance) {\n      if (!config) {\n        throw new Error('ApiGateway config required for first initialization');\n      }\n      ApiGateway.instance = new ApiGateway(config);\n    }\n    return ApiGateway.instance;\n  }\n\n  /**\n   * Main gateway request handler - orchestrates all middleware\n   */\n  async request<TRequest = unknown, TResponse = unknown>(\n    request: GatewayRequest<TRequest>\n  ): Promise<GatewayResponse<TResponse>> {\n    const requestId = crypto.randomUUID();\n    const startTime = Date.now();\n\n    try {\n      // 1. Request validation and preprocessing\n      await this.validateRequest(request, requestId);\n\n      // 2. Authentication check\n      if (!request.skipAuth && this.config.auth.required) {\n        await this.authenticateRequest(request, requestId);\n      }\n\n      // 3. Rate limiting\n      if (!request.skipRateLimit && this.config.rateLimiting.enabled) {\n        await this.checkRateLimit(request, requestId);\n      }\n\n      // 4. Circuit breaker check\n      const circuitBreaker = this.getCircuitBreaker(request.endpoint);\n      if (circuitBreaker.isOpen()) {\n        throw new Error('Circuit breaker is open for ' + request.endpoint);\n      }\n\n      // 5. Execute request with retries\n      const response = await this.executeWithRetries(request, requestId);\n\n      // 6. Transform response\n      const transformedResponse = await this.transformer.transform(response, request.transform);\n\n      // 7. Collect metrics\n      this.collectMetrics(request, transformedResponse, startTime, requestId);\n\n      return {\n        success: true,\n        data: transformedResponse,\n        meta: {\n          requestId,\n          timestamp: new Date().toISOString(),\n          duration: Date.now() - startTime,\n          endpoint: request.endpoint\n        }\n      };\n\n    } catch (error) {\n      const errorResponse = this.handleError(error, request, requestId, startTime);\n\n      // Record circuit breaker failure\n      const circuitBreaker = this.getCircuitBreaker(request.endpoint);\n      circuitBreaker.recordFailure();\n\n      return errorResponse;\n    }\n  }\n\n  /**\n   * Convenient HTTP method wrappers\n   */\n  async get<T = unknown>(endpoint: string, options?: Partial<GatewayRequest>): Promise<GatewayResponse<T>> {\n    return this.request<never, T>({ method: 'GET', endpoint, ...options });\n  }\n\n  async post<TRequest = unknown, TResponse = unknown>(\n    endpoint: string,\n    data: TRequest,\n    options?: Partial<GatewayRequest>\n  ): Promise<GatewayResponse<TResponse>> {\n    return this.request<TRequest, TResponse>({ method: 'POST', endpoint, data, ...options });\n  }\n\n  async put<TRequest = unknown, TResponse = unknown>(\n    endpoint: string,\n    data: TRequest,\n    options?: Partial<GatewayRequest>\n  ): Promise<GatewayResponse<TResponse>> {\n    return this.request<TRequest, TResponse>({ method: 'PUT', endpoint, data, ...options });\n  }\n\n  async delete<T = unknown>(endpoint: string, options?: Partial<GatewayRequest>): Promise<GatewayResponse<T>> {\n    return this.request<never, T>({ method: 'DELETE', endpoint, ...options });\n  }\n\n  /**\n   * Request validation middleware\n   */\n  private async validateRequest(request: GatewayRequest, requestId: string): Promise<void> {\n    const validation = await this.validator.validate(request);\n\n    if (!validation.valid) {\n      logger.warn('Request validation failed', {\n        requestId,\n        endpoint: request.endpoint,\n        errors: validation.errors\n      });\n      throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n    }\n  }\n\n  /**\n   * Authentication middleware\n   */\n  private async authenticateRequest(request: GatewayRequest, requestId: string): Promise<void> {\n    // Skip auth for whitelisted routes\n    if (this.config.auth.skipRoutes.includes(request.endpoint)) {\n      return;\n    }\n\n    // Check CSRF token for state-changing operations\n    if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(request.method)) {\n      const csrfToken = request.headers?.['X-CSRF-Token'];\n      if (!csrfToken) {\n        logger.warn('Missing CSRF token', { requestId, endpoint: request.endpoint });\n        throw new Error('CSRF token required');\n      }\n\n      // In a full implementation, validate CSRF token here\n      // For now, just check presence\n    }\n\n    // Additional auth checks would go here (JWT validation, etc.)\n    logger.debug('Request authenticated', { requestId, endpoint: request.endpoint });\n  }\n\n  /**\n   * Rate limiting middleware\n   */\n  private async checkRateLimit(request: GatewayRequest, requestId: string): Promise<void> {\n    const identifier = this.getClientIdentifier(request);\n    const allowed = await this.rateLimiter.isAllowed(identifier, request.endpoint);\n\n    if (!allowed) {\n      logger.warn('Rate limit exceeded', {\n        requestId,\n        endpoint: request.endpoint,\n        identifier\n      });\n      throw new Error('Rate limit exceeded');\n    }\n  }\n\n  /**\n   * Execute request with retry logic\n   */\n  private async executeWithRetries<TRequest, TResponse>(\n    request: GatewayRequest<TRequest>,\n    requestId: string\n  ): Promise<TResponse> {\n    const maxRetries = request.retries ?? this.config.retries;\n    let lastError: Error;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const response = await this.executeRequest(request, requestId, attempt);\n\n        // Record circuit breaker success\n        const circuitBreaker = this.getCircuitBreaker(request.endpoint);\n        circuitBreaker.recordSuccess();\n\n        return response;\n\n      } catch (error) {\n        lastError = error as Error;\n\n        if (attempt < maxRetries && this.isRetryableError(error)) {\n          const delay = this.calculateRetryDelay(attempt);\n          logger.info('Retrying request', {\n            requestId,\n            endpoint: request.endpoint,\n            attempt: attempt + 1,\n            maxRetries,\n            delay\n          });\n          await this.sleep(delay);\n        } else {\n          break;\n        }\n      }\n    }\n\n    throw lastError!;\n  }\n\n  /**\n   * Execute the actual HTTP request\n   */\n  private async executeRequest<TRequest, TResponse>(\n    request: GatewayRequest<TRequest>,\n    requestId: string,\n    attempt: number\n  ): Promise<TResponse> {\n    const url = `${this.config.baseUrl}${request.endpoint}`;\n    const timeout = request.timeout ?? this.config.timeout;\n\n    // Build request options with security headers\n    const requestOptions = withSecurityHeaders(url, {\n      method: request.method,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Request-ID': requestId,\n        'X-Retry-Attempt': attempt.toString(),\n        ...request.headers\n      },\n      body: request.data ? JSON.stringify(request.data) : undefined,\n      signal: AbortSignal.timeout(timeout),\n    });\n\n    logger.debug('Executing HTTP request', {\n      requestId,\n      method: request.method,\n      endpoint: request.endpoint,\n      attempt\n    });\n\n    const response = await fetch(url, requestOptions);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n\n    const responseData = await response.json();\n    return responseData as TResponse;\n  }\n\n  /**\n   * Error handling with classification\n   */\n  private handleError<TRequest>(\n    error: unknown,\n    request: GatewayRequest<TRequest>,\n    requestId: string,\n    startTime: number\n  ): GatewayResponse<never> {\n    const duration = Date.now() - startTime;\n    const errorObj = this.normalizeError(error);\n\n    logger.error('Gateway request failed', {\n      requestId,\n      endpoint: request.endpoint,\n      method: request.method,\n      duration,\n      error: errorObj.message,\n      stack: errorObj.stack\n    });\n\n    // Collect error metrics\n    this.metrics.recordError(request.endpoint, errorObj.code, duration);\n\n    return {\n      success: false,\n      error: {\n        code: errorObj.code,\n        message: errorObj.message,\n        details: errorObj.details\n      },\n      meta: {\n        requestId,\n        timestamp: new Date().toISOString(),\n        duration,\n        endpoint: request.endpoint\n      }\n    };\n  }\n\n  /**\n   * Helper methods\n   */\n  private getCircuitBreaker(endpoint: string): CircuitBreaker {\n    if (!this.circuitBreakers.has(endpoint)) {\n      this.circuitBreakers.set(endpoint, new CircuitBreaker({\n        failureThreshold: 5,\n        recoveryTimeout: 60000,\n        monitoringPeriod: 10000\n      }));\n    }\n    return this.circuitBreakers.get(endpoint)!;\n  }\n\n  private getClientIdentifier(request: GatewayRequest): string {\n    // In production, use actual client identification\n    return request.headers?.['X-Client-ID'] || 'anonymous';\n  }\n\n  private isRetryableError(error: unknown): boolean {\n    if (error instanceof Error) {\n      // Retry on network errors, timeouts, and 5xx responses\n      return error.message.includes('timeout') ||\n             error.message.includes('network') ||\n             error.message.includes('HTTP 5');\n    }\n    return false;\n  }\n\n  private calculateRetryDelay(attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000;\n    const maxDelay = 10000;\n    const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n    const jitter = Math.random() * 0.1 * delay;\n    return delay + jitter;\n  }\n\n  private normalizeError(error: unknown): {\n    code: string;\n    message: string;\n    details?: unknown;\n    stack?: string;\n  } {\n    if (error instanceof Error) {\n      return {\n        code: error.name || 'Unknown',\n        message: error.message,\n        stack: error.stack\n      };\n    }\n\n    return {\n      code: 'Unknown',\n      message: String(error)\n    };\n  }\n\n  private collectMetrics<T>(\n    request: GatewayRequest,\n    response: T,\n    startTime: number,\n    requestId: string\n  ): void {\n    if (!this.config.monitoring.enabled) return;\n\n    const duration = Date.now() - startTime;\n    this.metrics.recordRequest(request.endpoint, request.method, duration, true);\n\n    if (Math.random() < this.config.monitoring.sampleRate) {\n      logger.info('Request completed', {\n        requestId,\n        endpoint: request.endpoint,\n        method: request.method,\n        duration,\n        responseSize: JSON.stringify(response).length\n      });\n    }\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Health check endpoint\n   */\n  async healthCheck(): Promise<{ status: 'healthy' | 'degraded' | 'unhealthy'; details: Record<string, unknown> }> {\n    const checks = await Promise.allSettled([\n      this.checkDatabaseConnection(),\n      this.checkExternalServices(),\n      this.checkCircuitBreakers()\n    ]);\n\n    const results = checks.map((check, index) => ({\n      name: ['database', 'external_services', 'circuit_breakers'][index],\n      status: check.status === 'fulfilled' ? 'healthy' : 'unhealthy',\n      details: check.status === 'fulfilled' ? check.value : check.reason\n    }));\n\n    const healthyCount = results.filter(r => r.status === 'healthy').length;\n    const overallStatus = healthyCount === results.length ? 'healthy' :\n                         healthyCount > 0 ? 'degraded' : 'unhealthy';\n\n    return {\n      status: overallStatus,\n      details: Object.fromEntries(results.map(r => [r.name, r]))\n    };\n  }\n\n  private async checkDatabaseConnection(): Promise<{ connected: boolean }> {\n    // Implement actual database health check\n    return { connected: true };\n  }\n\n  private async checkExternalServices(): Promise<Record<string, boolean>> {\n    // Check external service health\n    return { vapi: true, twilio: true, maps: true };\n  }\n\n  private async checkCircuitBreakers(): Promise<Record<string, string>> {\n    const status: Record<string, string> = {};\n    for (const [endpoint, breaker] of this.circuitBreakers) {\n      status[endpoint] = breaker.getState();\n    }\n    return status;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\CircuitBreaker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\MetricsCollector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\RateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\RequestValidator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":153,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":190,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":19}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4502,4505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4502,4505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5226,5229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5226,5229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00.","line":297,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":297,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":300,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":300,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Request Validator - Multi-layer validation pipeline\n * Implements comprehensive validation for API requests\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { z } from 'zod';\nimport { logger } from '@/lib/logger';\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: string[];\n  sanitized?: unknown;\n}\n\nexport interface ValidationRule {\n  name: string;\n  validate: (request: unknown) => Promise<ValidationResult> | ValidationResult;\n}\n\nexport class RequestValidator {\n  private rules: ValidationRule[] = [];\n\n  constructor() {\n    this.initializeDefaultRules();\n  }\n\n  /**\n   * Validate a request through all registered rules\n   */\n  async validate(request: unknown): Promise<ValidationResult> {\n    const allErrors: string[] = [];\n    let sanitizedRequest = request;\n\n    for (const rule of this.rules) {\n      try {\n        const result = await rule.validate(sanitizedRequest);\n\n        if (!result.valid) {\n          allErrors.push(...result.errors.map(error => `${rule.name}: ${error}`));\n        } else if (result.sanitized !== undefined) {\n          sanitizedRequest = result.sanitized;\n        }\n      } catch (error) {\n        logger.error('Validation rule failed', {\n          rule: rule.name,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        allErrors.push(`${rule.name}: Validation rule error`);\n      }\n    }\n\n    return {\n      valid: allErrors.length === 0,\n      errors: allErrors,\n      sanitized: sanitizedRequest\n    };\n  }\n\n  /**\n   * Add a custom validation rule\n   */\n  addRule(rule: ValidationRule): void {\n    this.rules.push(rule);\n  }\n\n  /**\n   * Remove a validation rule by name\n   */\n  removeRule(name: string): void {\n    this.rules = this.rules.filter(rule => rule.name !== name);\n  }\n\n  /**\n   * Initialize default validation rules\n   */\n  private initializeDefaultRules(): void {\n    // Basic structure validation\n    this.addRule({\n      name: 'structure',\n      validate: (request) => this.validateStructure(request)\n    });\n\n    // Input sanitization\n    this.addRule({\n      name: 'sanitization',\n      validate: (request) => this.sanitizeInput(request)\n    });\n\n    // Size limits\n    this.addRule({\n      name: 'size',\n      validate: (request) => this.validateSize(request)\n    });\n\n    // Security patterns\n    this.addRule({\n      name: 'security',\n      validate: (request) => this.validateSecurity(request)\n    });\n  }\n\n  /**\n   * Validate basic request structure\n   */\n  private validateStructure(request: unknown): ValidationResult {\n    const requestSchema = z.object({\n      method: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']),\n      endpoint: z.string().min(1).regex(/^\\/[a-zA-Z0-9/_-]*$/, 'Invalid endpoint format'),\n      data: z.unknown().optional(),\n      headers: z.record(z.string()).optional(),\n      timeout: z.number().positive().max(300000).optional(), // Max 5 minutes\n      retries: z.number().int().min(0).max(5).optional(),\n      skipAuth: z.boolean().optional(),\n      skipRateLimit: z.boolean().optional(),\n      transform: z.function().optional()\n    });\n\n    try {\n      const validated = requestSchema.parse(request);\n      return {\n        valid: true,\n        errors: [],\n        sanitized: validated\n      };\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return {\n          valid: false,\n          errors: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        };\n      }\n\n      return {\n        valid: false,\n        errors: ['Invalid request structure']\n      };\n    }\n  }\n\n  /**\n   * Sanitize input data to prevent injection attacks\n   */\n  private sanitizeInput(request: unknown): ValidationResult {\n    try {\n      const sanitized = this.deepSanitize(request);\n      return {\n        valid: true,\n        errors: [],\n        sanitized\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: ['Input sanitization failed']\n      };\n    }\n  }\n\n  /**\n   * Validate request size limits\n   */\n  private validateSize(request: unknown): ValidationResult {\n    const errors: string[] = [];\n\n    try {\n      const requestString = JSON.stringify(request);\n      const sizeInBytes = new Blob([requestString]).size;\n\n      // 10MB limit for requests\n      const maxSize = 10 * 1024 * 1024;\n      if (sizeInBytes > maxSize) {\n        errors.push(`Request size ${sizeInBytes} exceeds limit of ${maxSize} bytes`);\n      }\n\n      // Check data field specifically\n      const req = request as any;\n      if (req?.data) {\n        const dataString = JSON.stringify(req.data);\n        const dataSizeInBytes = new Blob([dataString]).size;\n\n        // 5MB limit for data payload\n        const maxDataSize = 5 * 1024 * 1024;\n        if (dataSizeInBytes > maxDataSize) {\n          errors.push(`Data payload size ${dataSizeInBytes} exceeds limit of ${maxDataSize} bytes`);\n        }\n      }\n\n    } catch (error) {\n      errors.push('Unable to calculate request size');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate against security patterns\n   */\n  private validateSecurity(request: unknown): ValidationResult {\n    const errors: string[] = [];\n    const req = request as any;\n\n    // Check for dangerous patterns in strings\n    const dangerousPatterns = [\n      /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, // Script tags\n      /javascript:/gi,                                        // JavaScript URLs\n      /on\\w+\\s*=/gi,                                         // Event handlers\n      /expression\\s*\\(/gi,                                   // CSS expressions\n      /eval\\s*\\(/gi,                                         // Eval calls\n      /setTimeout\\s*\\(/gi,                                   // setTimeout calls\n      /setInterval\\s*\\(/gi,                                  // setInterval calls\n    ];\n\n    const checkForPatterns = (obj: unknown, path = ''): void => {\n      if (typeof obj === 'string') {\n        for (const pattern of dangerousPatterns) {\n          if (pattern.test(obj)) {\n            errors.push(`Potentially dangerous content detected at ${path || 'root'}`);\n            break;\n          }\n        }\n      } else if (Array.isArray(obj)) {\n        obj.forEach((item, index) => {\n          checkForPatterns(item, `${path}[${index}]`);\n        });\n      } else if (obj && typeof obj === 'object') {\n        Object.entries(obj).forEach(([key, value]) => {\n          const newPath = path ? `${path}.${key}` : key;\n          checkForPatterns(value, newPath);\n        });\n      }\n    };\n\n    checkForPatterns(req);\n\n    // Check endpoint for path traversal\n    if (req?.endpoint && typeof req.endpoint === 'string') {\n      if (req.endpoint.includes('..') || req.endpoint.includes('~')) {\n        errors.push('Path traversal attempt detected in endpoint');\n      }\n    }\n\n    // Check headers for dangerous values\n    if (req?.headers && typeof req.headers === 'object') {\n      for (const [key, value] of Object.entries(req.headers)) {\n        if (typeof value === 'string') {\n          // Check for header injection\n          if (value.includes('\\n') || value.includes('\\r')) {\n            errors.push(`Header injection attempt detected in ${key}`);\n          }\n        }\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Deep sanitize an object, removing dangerous content\n   */\n  private deepSanitize(obj: unknown): unknown {\n    if (typeof obj === 'string') {\n      return this.sanitizeString(obj);\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.deepSanitize(item));\n    }\n\n    if (obj && typeof obj === 'object') {\n      const sanitized: Record<string, unknown> = {};\n      for (const [key, value] of Object.entries(obj)) {\n        // Sanitize key names\n        const sanitizedKey = this.sanitizeString(key);\n        sanitized[sanitizedKey] = this.deepSanitize(value);\n      }\n      return sanitized;\n    }\n\n    return obj;\n  }\n\n  /**\n   * Sanitize a string value\n   */\n  private sanitizeString(str: string): string {\n    return str\n      // Remove null bytes\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, '')\n      // Remove control characters except newlines and tabs\n      // eslint-disable-next-line no-control-regex\n      .replace(/[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, '')\n      // Normalize whitespace\n      .replace(/\\s+/g, ' ')\n      // Trim\n      .trim();\n  }\n\n  /**\n   * Validate specific data schemas based on endpoint\n   */\n  validateEndpointData(endpoint: string, data: unknown): ValidationResult {\n    // Define endpoint-specific schemas\n    const endpointSchemas: Record<string, z.ZodSchema> = {\n      '/api/calls': z.object({\n        phoneNumber: z.string().regex(/^\\+?[1-9]\\d{1,14}$/, 'Invalid phone number'),\n        assistantId: z.string().uuid().optional(),\n        context: z.record(z.unknown()).optional()\n      }),\n\n      '/api/sms': z.object({\n        to: z.string().regex(/^\\+?[1-9]\\d{1,14}$/, 'Invalid phone number'),\n        message: z.string().min(1).max(1600, 'Message too long'),\n        priority: z.enum(['low', 'normal', 'high']).optional()\n      }),\n\n      '/api/support': z.object({\n        type: z.enum(['call', 'chat', 'email', 'sms']),\n        message: z.string().min(1).max(5000),\n        urgency: z.enum(['low', 'normal', 'high']).optional(),\n        clientInfo: z.object({\n          name: z.string().optional(),\n          phone: z.string().optional(),\n          email: z.string().email().optional()\n        }).optional()\n      })\n    };\n\n    const schema = endpointSchemas[endpoint];\n    if (!schema) {\n      return { valid: true, errors: [] }; // No specific validation\n    }\n\n    try {\n      const validated = schema.parse(data);\n      return {\n        valid: true,\n        errors: [],\n        sanitized: validated\n      };\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return {\n          valid: false,\n          errors: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        };\n      }\n\n      return {\n        valid: false,\n        errors: ['Data validation failed']\n      };\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\gateway\\ResponseTransformer.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unused-vars').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[52,87],"text":""}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6893,6896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6893,6896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\n/**\n * Response Transformer - Handles response transformation and formatting\n * Provides consistent response structure and data transformation\n */\n\nimport { logger } from '@/lib/logger';\n\nexport interface TransformConfig {\n  maskSensitiveData?: boolean;\n  normalizeStructure?: boolean;\n  addMetadata?: boolean;\n}\n\nexport class ResponseTransformer {\n  private sensitiveFields = [\n    'password', 'token', 'secret', 'key', 'authorization',\n    'ssn', 'social_security', 'credit_card', 'bank_account'\n  ];\n\n  /**\n   * Transform response data with optional custom transformer\n   */\n  async transform<T>(\n    data: T,\n    customTransform?: (data: T) => unknown,\n    config: TransformConfig = {}\n  ): Promise<T> {\n    try {\n      let transformed = data;\n\n      // Apply custom transformation first\n      if (customTransform) {\n        transformed = customTransform(transformed) as T;\n      }\n\n      // Apply built-in transformations\n      if (config.maskSensitiveData !== false) {\n        transformed = this.maskSensitiveData(transformed);\n      }\n\n      if (config.normalizeStructure) {\n        transformed = this.normalizeStructure(transformed);\n      }\n\n      return transformed;\n\n    } catch (error) {\n      logger.error('Response transformation failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return data; // Return original data if transformation fails\n    }\n  }\n\n  /**\n   * Mask sensitive data in response\n   */\n  private maskSensitiveData<T>(data: T): T {\n    if (data === null || data === undefined) {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map(item => this.maskSensitiveData(item)) as T;\n    }\n\n    if (typeof data === 'object') {\n      const masked = { ...data } as Record<string, unknown>;\n\n      for (const [key, value] of Object.entries(masked)) {\n        const lowerKey = key.toLowerCase();\n\n        // Check if field should be masked\n        if (this.sensitiveFields.some(field => lowerKey.includes(field))) {\n          if (typeof value === 'string' && value.length > 0) {\n            // Show first 2 and last 2 characters for identifiable data\n            if (value.length > 6) {\n              masked[key] = `${value.substring(0, 2)}***${value.substring(value.length - 2)}`;\n            } else {\n              masked[key] = '***';\n            }\n          } else {\n            masked[key] = '***';\n          }\n        } else {\n          // Recursively mask nested objects\n          masked[key] = this.maskSensitiveData(value);\n        }\n      }\n\n      return masked as T;\n    }\n\n    return data;\n  }\n\n  /**\n   * Normalize response structure for consistency\n   */\n  private normalizeStructure<T>(data: T): T {\n    if (data === null || data === undefined) {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map(item => this.normalizeStructure(item)) as T;\n    }\n\n    if (typeof data === 'object') {\n      const normalized = { ...data } as Record<string, unknown>;\n\n      // Convert timestamp strings to ISO format\n      for (const [key, value] of Object.entries(normalized)) {\n        if (typeof value === 'string' && this.isTimestamp(key, value)) {\n          try {\n            const date = new Date(value);\n            if (!isNaN(date.getTime())) {\n              normalized[key] = date.toISOString();\n            }\n          } catch {\n            // Keep original value if parsing fails\n          }\n        } else if (typeof value === 'object') {\n          normalized[key] = this.normalizeStructure(value);\n        }\n      }\n\n      // Ensure consistent naming conventions\n      const standardized = this.standardizeFieldNames(normalized);\n\n      return standardized as T;\n    }\n\n    return data;\n  }\n\n  /**\n   * Check if a field value looks like a timestamp\n   */\n  private isTimestamp(key: string, value: string): boolean {\n    const timestampFields = ['created_at', 'updated_at', 'timestamp', 'date', 'time'];\n    const lowerKey = key.toLowerCase();\n\n    if (timestampFields.some(field => lowerKey.includes(field))) {\n      // Check if value looks like a date\n      return /^\\d{4}-\\d{2}-\\d{2}/.test(value) ||\n             /^\\d{10,13}$/.test(value) || // Unix timestamp\n             !isNaN(Date.parse(value));\n    }\n\n    return false;\n  }\n\n  /**\n   * Standardize field names to consistent format\n   */\n  private standardizeFieldNames(obj: Record<string, unknown>): Record<string, unknown> {\n    const standardized: Record<string, unknown> = {};\n    const fieldMappings: Record<string, string> = {\n      'id': 'id',\n      'ID': 'id',\n      'userId': 'user_id',\n      'callId': 'call_id',\n      'phoneNumber': 'phone_number',\n      'createdAt': 'created_at',\n      'updatedAt': 'updated_at',\n      'startedAt': 'started_at',\n      'endedAt': 'ended_at',\n      'customerName': 'customer_name',\n      'customerPhone': 'customer_phone',\n      'customerEmail': 'customer_email'\n    };\n\n    for (const [key, value] of Object.entries(obj)) {\n      const standardKey = fieldMappings[key] || this.camelToSnake(key);\n      standardized[standardKey] = value;\n    }\n\n    return standardized;\n  }\n\n  /**\n   * Convert camelCase to snake_case\n   */\n  private camelToSnake(str: string): string {\n    return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n  }\n\n  /**\n   * Transform error responses to consistent format\n   */\n  transformError(error: unknown): {\n    code: string;\n    message: string;\n    details?: unknown;\n    timestamp: string;\n  } {\n    if (error instanceof Error) {\n      return {\n        code: error.name || 'UnknownError',\n        message: error.message,\n        details: this.extractErrorDetails(error),\n        timestamp: new Date().toISOString()\n      };\n    }\n\n    if (typeof error === 'object' && error !== null) {\n      const errorObj = error as Record<string, unknown>;\n      return {\n        code: String(errorObj.code || errorObj.name || 'UnknownError'),\n        message: String(errorObj.message || 'An error occurred'),\n        details: errorObj.details || errorObj,\n        timestamp: new Date().toISOString()\n      };\n    }\n\n    return {\n      code: 'UnknownError',\n      message: String(error),\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Extract additional error details while masking sensitive info\n   */\n  private extractErrorDetails(error: Error): Record<string, unknown> {\n    const details: Record<string, unknown> = {};\n\n    // Add stack trace in development\n    if (process.env.NODE_ENV === 'development' && error.stack) {\n      details.stack = error.stack;\n    }\n\n    // Add any additional error properties\n    const errorProps = Object.getOwnPropertyNames(error);\n    for (const prop of errorProps) {\n      if (prop !== 'name' && prop !== 'message' && prop !== 'stack') {\n        try {\n          const value = (error as any)[prop];\n          details[prop] = this.maskSensitiveData(value);\n        } catch {\n          // Skip properties that can't be accessed\n        }\n      }\n    }\n\n    return details;\n  }\n\n  /**\n   * Transform paginated responses to consistent format\n   */\n  transformPaginatedResponse<T>(data: {\n    items: T[];\n    total?: number;\n    count?: number;\n    page?: number;\n    pageSize?: number;\n    hasMore?: boolean;\n  }): {\n    items: T[];\n    pagination: {\n      total: number;\n      count: number;\n      page: number;\n      pageSize: number;\n      hasMore: boolean;\n      totalPages: number;\n    };\n  } {\n    const items = data.items || [];\n    const total = data.total ?? data.count ?? items.length;\n    const page = data.page ?? 1;\n    const pageSize = data.pageSize ?? items.length || 25;\n    const totalPages = Math.ceil(total / pageSize);\n    const hasMore = data.hasMore ?? (page < totalPages);\n\n    return {\n      items: items.map(item => this.maskSensitiveData(item)),\n      pagination: {\n        total,\n        count: items.length,\n        page,\n        pageSize,\n        hasMore,\n        totalPages\n      }\n    };\n  }\n\n  /**\n   * Add performance metadata to response\n   */\n  addPerformanceMetadata<T>(\n    data: T,\n    startTime: number,\n    additionalMeta?: Record<string, unknown>\n  ): T & { _meta: Record<string, unknown> } {\n    const duration = Date.now() - startTime;\n\n    return {\n      ...data as object,\n      _meta: {\n        processingTime: duration,\n        timestamp: new Date().toISOString(),\n        ...additionalMeta\n      }\n    } as T & { _meta: Record<string, unknown> };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\httpClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2686,2689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2686,2689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3584,3587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3584,3587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client API typé pour le frontend (compatible Next.js/Vite)\n * - Base URL: NEXT_PUBLIC_API_BASE_URL ou VITE_API_BASE_URL\n * - Masquage PII dans les logs d'erreurs\n * - Gestion d'erreurs uniforme\n * - CSRF protection intégrée\n */\nimport { logger } from '@/lib/logger';\nimport { csrfProtection } from './security/csrf';\nimport { withSecurityHeaders } from './security/headers';\n\ninterface ImportMetaEnv {\n  NEXT_PUBLIC_API_BASE_URL?: string;\n  VITE_API_BASE_URL?: string;\n}\n\ninterface ProcessEnv {\n  NEXT_PUBLIC_API_BASE_URL?: string;\n  VITE_API_BASE_URL?: string;\n}\n\nexport function getApiBaseUrl(): string {\n  const env = ((import.meta as { env?: ImportMetaEnv })?.env) || {};\n  const penv = ((globalThis as { process?: { env?: ProcessEnv } })?.process?.env) || {};\n  const fromImport = env.NEXT_PUBLIC_API_BASE_URL || env.VITE_API_BASE_URL;\n  const fromProcess = penv.NEXT_PUBLIC_API_BASE_URL || penv.VITE_API_BASE_URL;\n  const fromGlobal = (globalThis as { NEXT_PUBLIC_API_BASE_URL?: string; VITE_API_BASE_URL?: string }).NEXT_PUBLIC_API_BASE_URL ||\n                     (globalThis as { NEXT_PUBLIC_API_BASE_URL?: string; VITE_API_BASE_URL?: string }).VITE_API_BASE_URL;\n  return String(fromImport || fromProcess || fromGlobal || 'http://localhost:8080');\n}\n\nconst API_BASE_URL = getApiBaseUrl();\n\nfunction maskPII(input: unknown): unknown {\n  try {\n    if (!input) return input;\n    const s = typeof input === 'string' ? input : JSON.stringify(input);\n    let out = s.replace(/([A-Z0-9._%+-])[A-Z0-9._%+-]*(@[A-Z0-9.-]+\\.[A-Z]{2,})/gi, '$1***$2');\n    out = out.replace(/(\\+?\\d{1,3}[\\s.-]?)?(\\d{3})[\\s.-]?(\\d{3})[\\s.-]?(\\d{4})/g, (_m, _c, a) => `${a}-***-****`);\n    return typeof input === 'string' ? out : JSON.parse(out);\n  } catch {\n    return input;\n  }\n}\n\nexport async function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  // Get CSRF token\n  const csrfToken = csrfProtection.getTokenFromMeta() || csrfProtection.getTokenFromCookie();\n\n  // Merge security headers with request\n  const secureOptions = withSecurityHeaders(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': csrfToken || '',\n      ...(options?.headers || {})\n    },\n    credentials: 'include',\n  });\n\n  try {\n    const res = await fetch(url, secureOptions);\n    if (!res.ok) {\n      const text = await res.text();\n      logger.warn('[API] Réponse non OK', { url, status: res.status });\n      throw new Error(`${res.status} ${res.statusText}: ${text}`);\n    }\n    return (await res.json()) as T;\n  } catch (error) {\n    logger.error('[API] Échec requête', { url, error: maskPII(error as any) });\n    throw error;\n  }\n}\n\n// Pagination générique\nexport interface Paginated<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\nexport const apiClient = {\n  get constraints() {\n    return {\n      list: async (params?: { page?: number; pageSize?: number; search?: string; category?: string; priority?: 'P1'|'P2'|'P3'|'P4'; sort?: string; }) => {\n        const q = new URLSearchParams();\n        if (params?.page) q.set('page', String(params.page));\n        if (params?.pageSize) q.set('pageSize', String(params.pageSize));\n        if (params?.search) q.set('search', params.search);\n        if (params?.category) q.set('category', params.category);\n        if (params?.priority) q.set('priority', params.priority);\n        if (params?.sort) q.set('sort', params.sort);\n        const endpoint = `/api/constraints${q.toString() ? `?${q}` : ''}`;\n        return apiFetch<any>(endpoint);\n      }\n    };\n  }\n};\n\nexport default apiClient;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\integration\\ServiceOrchestrator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\legacyApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIError' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabaseServices } from '@/services/supabaseServices';\nimport { logger } from '@/lib/logger';\nimport { supabase } from '@/integrations/supabase/client';\nimport type {\n  CallData,\n  LeadData,\n  AnalyticsData,\n  SettingsData,\n  ConnectionTestResult,\n  APIResponse,\n  APIError\n} from '@/types/api';\n\n// Configuration de l'API\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080';\n\n// Helper pour les requêtes avec gestion d'erreur\nasync function fetchApi<T>(endpoint: string, options?: RequestInit): Promise<T> {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options?.headers,\n      },\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json() as T;\n  } catch (error) {\n    logger.error(`Error fetching ${endpoint}:`, error);\n    throw error;\n  }\n}\n\n// API Services qui combinent backend local et Supabase\nexport const api = {\n  // Appels\n  async getCalls(): Promise<CallData[]> {\n    try {\n      // Essayer d'abord le backend local\n      return await fetchApi<CallData[]>('/api/calls');\n    } catch {\n      // Fallback sur Supabase\n      const calls = await supabaseServices.getRecentCalls(50);\n      return calls.map(call => ({\n        id: call.id,\n        phoneNumber: call.phone_number,\n        startTime: new Date(call.started_at),\n        endTime: call.ended_at ? new Date(call.ended_at) : undefined,\n        duration: call.duration || 0,\n        transcript: call.transcript || '',\n        priority: (call.priority as CallData['priority']) || 'P4',\n        status: (call.status as CallData['status']) || 'completed',\n        recordingUrl: call.recording_url,\n        metadata: (call.metadata as CallData['metadata']) || {},\n      }));\n    }\n  },\n\n  async getCall(id: string): Promise<CallData | null> {\n    try {\n      return await fetchApi<CallData>(`/api/calls/${id}`);\n    } catch {\n      const { data } = await supabase\n        .from('vapi_calls')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (!data) return null;\n\n      return {\n        id: data.id,\n        phoneNumber: data.phone_number,\n        startTime: new Date(data.started_at),\n        endTime: data.ended_at ? new Date(data.ended_at) : undefined,\n        duration: data.duration || 0,\n        transcript: data.transcript || '',\n        priority: (data.priority as CallData['priority']) || 'P4',\n        status: (data.status as CallData['status']) || 'completed',\n        recordingUrl: data.recording_url,\n        metadata: (data.metadata as CallData['metadata']) || {},\n      };\n    }\n  },\n\n  // Leads\n  async getLeads(): Promise<LeadData[]> {\n    try {\n      return await fetchApi<LeadData[]>('/api/leads');\n    } catch {\n      const leads = await supabaseServices.getLeads();\n      return leads.map(lead => ({\n        id: lead.id,\n        email: lead.email,\n        phone: lead.phone,\n        name: lead.name,\n        status: (lead.status as LeadData['status']) || 'new',\n        source: lead.source,\n        created_at: lead.created_at,\n        updated_at: lead.updated_at,\n        metadata: (lead.metadata as LeadData['metadata']) || {},\n      }));\n    }\n  },\n\n  async createLead(lead: Partial<LeadData>): Promise<LeadData> {\n    try {\n      return await fetchApi<LeadData>('/api/leads', {\n        method: 'POST',\n        body: JSON.stringify(lead),\n      });\n    } catch {\n      const { data, error } = await supabase\n        .from('leads')\n        .insert(lead)\n        .select()\n        .single();\n      if (error) throw error;\n\n      return {\n        id: data.id,\n        email: data.email,\n        phone: data.phone,\n        name: data.name,\n        status: (data.status as LeadData['status']) || 'new',\n        source: data.source,\n        created_at: data.created_at,\n        updated_at: data.updated_at,\n        metadata: (data.metadata as LeadData['metadata']) || {},\n      };\n    }\n  },\n\n  // Analytics\n  async getAnalytics(): Promise<AnalyticsData> {\n    try {\n      return await fetchApi<AnalyticsData>('/api/analytics');\n    } catch {\n      // Utiliser les métriques de Supabase\n      const metrics = await supabaseServices.getDashboardMetrics();\n      return {\n        totalCalls: metrics.totalCalls,\n        todayCalls: metrics.todayCalls,\n        totalLeads: metrics.totalLeads,\n        conversionRate: metrics.conversionRate,\n        metrics: [\n          { name: 'Calls', value: metrics.totalCalls, trend: 'stable' },\n          { name: 'Leads', value: metrics.totalLeads, trend: 'stable' },\n        ],\n        timeRange: {\n          start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n          end: new Date(),\n          period: 'month'\n        }\n      };\n    }\n  },\n\n  // Configuration & Settings\n  async getSettings(): Promise<SettingsData> {\n    try {\n      return await fetchApi<SettingsData>('/api/settings');\n    } catch {\n      // Retourner des settings par défaut\n      return {\n        constraints: [],\n        pricing: {\n          baseRate: 0,\n          minimumCharge: 0,\n          currency: 'USD'\n        },\n        prompts: {\n          greeting: 'Hello!',\n          farewell: 'Goodbye!',\n          errorMessage: 'An error occurred'\n        },\n        webhooks: {\n          url: import.meta.env.VITE_VAPI_WEBHOOK_URL || '',\n          events: [],\n          timeout: 5000\n        }\n      };\n    }\n  },\n\n  async updateSettings(settings: Partial<SettingsData>): Promise<SettingsData> {\n    try {\n      return await fetchApi<SettingsData>('/api/settings', {\n        method: 'PUT',\n        body: JSON.stringify(settings),\n      });\n    } catch (error) {\n      logger.error('Error updating settings:', error);\n      throw error;\n    }\n  },\n\n  // Test de connexion\n  async testConnection(): Promise<ConnectionTestResult> {\n    const results: ConnectionTestResult = {\n      backend: false,\n      supabase: false,\n      timestamp: new Date(),\n      details: {}\n    };\n\n    // Test backend local\n    try {\n      const startTime = Date.now();\n      await fetch(`${API_BASE_URL}/health`);\n      results.backend = true;\n      results.details.backendUrl = API_BASE_URL;\n      results.details.latency = Date.now() - startTime;\n    } catch (error) {\n      results.backend = false;\n      results.details.error = error instanceof Error ? error.message : 'Unknown error';\n    }\n\n    // Test Supabase\n    try {\n      const { error } = await supabase.from('vapi_calls').select('count').limit(1);\n      results.supabase = !error;\n      if (error) {\n        results.details.error = error.message;\n      }\n    } catch (error) {\n      results.supabase = false;\n      results.details.error = error instanceof Error ? error.message : 'Unknown error';\n    }\n\n    return results;\n  },\n};\n\n// Export only supabaseServices (supabase client is internal)\nexport { supabaseServices };\n\nexport default api;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\security\\SecurityMiddleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'csrfProtection' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withSecurityHeaders' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Middleware Stack - Comprehensive security layer\n * Implements multiple security controls including CORS, rate limiting,\n * request size limits, API key management, and audit logging\n */\n\nimport { logger } from '@/lib/logger';\nimport { csrfProtection } from './csrf';\nimport { withSecurityHeaders } from './headers';\n\nexport interface SecurityConfig {\n  cors: {\n    enabled: boolean;\n    allowedOrigins: string[];\n    allowedMethods: string[];\n    allowedHeaders: string[];\n    credentials: boolean;\n    maxAge: number;\n  };\n  rateLimiting: {\n    enabled: boolean;\n    windowMs: number;\n    maxRequests: number;\n    skipSuccessfulRequests: boolean;\n    keyGenerator?: (request: SecurityRequest) => string;\n  };\n  requestLimits: {\n    maxBodySize: number;\n    maxHeaderSize: number;\n    maxUrlLength: number;\n  };\n  apiKeys: {\n    enabled: boolean;\n    headerName: string;\n    requiredScopes?: string[];\n  };\n  auditLogging: {\n    enabled: boolean;\n    logLevel: 'minimal' | 'standard' | 'detailed';\n    sensitiveFields: string[];\n    retentionDays: number;\n  };\n  contentSecurity: {\n    validateContentType: boolean;\n    allowedContentTypes: string[];\n    validateJsonSchema: boolean;\n  };\n}\n\nexport interface SecurityRequest {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  body?: unknown;\n  clientId?: string;\n  userId?: string;\n  timestamp: number;\n  requestId: string;\n}\n\nexport interface SecurityResponse {\n  allowed: boolean;\n  blocked?: {\n    reason: string;\n    code: string;\n    retryAfter?: number;\n  };\n  headers?: Record<string, string>;\n  transformed?: {\n    headers?: Record<string, string>;\n    body?: unknown;\n  };\n}\n\nexport interface AuditEvent {\n  id: string;\n  timestamp: string;\n  type: 'request' | 'security_violation' | 'authentication' | 'authorization';\n  source: string;\n  userId?: string;\n  clientId?: string;\n  action: string;\n  resource: string;\n  outcome: 'success' | 'failure' | 'blocked';\n  details: Record<string, unknown>;\n  ipAddress?: string;\n  userAgent?: string;\n  correlationId?: string;\n}\n\nexport class SecurityMiddleware {\n  private static instance: SecurityMiddleware;\n  private config: SecurityConfig;\n  private rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n  private apiKeyCache = new Map<string, { valid: boolean; scopes: string[]; expiry: number }>();\n  private auditEvents: AuditEvent[] = [];\n  private suspiciousActivities = new Map<string, number>();\n\n  private constructor(config: SecurityConfig) {\n    this.config = config;\n    this.startPeriodicCleanup();\n  }\n\n  static getInstance(config?: SecurityConfig): SecurityMiddleware {\n    if (!SecurityMiddleware.instance) {\n      if (!config) {\n        config = SecurityMiddleware.getDefaultConfig();\n      }\n      SecurityMiddleware.instance = new SecurityMiddleware(config);\n    }\n    return SecurityMiddleware.instance;\n  }\n\n  /**\n   * Main security middleware processing pipeline\n   */\n  async processRequest(request: SecurityRequest): Promise<SecurityResponse> {\n    const startTime = Date.now();\n\n    try {\n      // 1. CORS validation\n      const corsResult = await this.validateCORS(request);\n      if (!corsResult.allowed) {\n        await this.auditSecurityViolation(request, 'cors_violation', corsResult.blocked!.reason);\n        return corsResult;\n      }\n\n      // 2. Request size validation\n      const sizeResult = await this.validateRequestSize(request);\n      if (!sizeResult.allowed) {\n        await this.auditSecurityViolation(request, 'size_limit_exceeded', sizeResult.blocked!.reason);\n        return sizeResult;\n      }\n\n      // 3. Content security validation\n      const contentResult = await this.validateContentSecurity(request);\n      if (!contentResult.allowed) {\n        await this.auditSecurityViolation(request, 'content_security_violation', contentResult.blocked!.reason);\n        return contentResult;\n      }\n\n      // 4. Rate limiting\n      const rateLimitResult = await this.checkRateLimit(request);\n      if (!rateLimitResult.allowed) {\n        await this.auditSecurityViolation(request, 'rate_limit_exceeded', rateLimitResult.blocked!.reason);\n        return rateLimitResult;\n      }\n\n      // 5. API key validation\n      const apiKeyResult = await this.validateApiKey(request);\n      if (!apiKeyResult.allowed) {\n        await this.auditSecurityViolation(request, 'api_key_invalid', apiKeyResult.blocked!.reason);\n        return apiKeyResult;\n      }\n\n      // 6. CSRF protection for state-changing operations\n      if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(request.method)) {\n        const csrfResult = await this.validateCSRF(request);\n        if (!csrfResult.allowed) {\n          await this.auditSecurityViolation(request, 'csrf_validation_failed', csrfResult.blocked!.reason);\n          return csrfResult;\n        }\n      }\n\n      // 7. Suspicious activity detection\n      await this.detectSuspiciousActivity(request);\n\n      // 8. Apply security headers\n      const securityHeaders = this.generateSecurityHeaders(request);\n\n      // 9. Audit successful request\n      await this.auditRequest(request, 'success', Date.now() - startTime);\n\n      return {\n        allowed: true,\n        headers: securityHeaders,\n        transformed: {\n          headers: { ...request.headers, ...securityHeaders }\n        }\n      };\n\n    } catch (error) {\n      logger.error('Security middleware error', {\n        requestId: request.requestId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      await this.auditSecurityViolation(\n        request,\n        'middleware_error',\n        'Security middleware processing failed'\n      );\n\n      return {\n        allowed: false,\n        blocked: {\n          reason: 'Security validation failed',\n          code: 'SECURITY_ERROR'\n        }\n      };\n    }\n  }\n\n  /**\n   * CORS validation\n   */\n  private async validateCORS(request: SecurityRequest): Promise<SecurityResponse> {\n    if (!this.config.cors.enabled) {\n      return { allowed: true };\n    }\n\n    const origin = request.headers['origin'] || request.headers['Origin'];\n\n    // Allow requests without origin (same-origin, mobile apps, etc.)\n    if (!origin) {\n      return { allowed: true };\n    }\n\n    // Check if origin is allowed\n    const allowedOrigins = this.config.cors.allowedOrigins;\n    const isAllowed = allowedOrigins.includes('*') ||\n                     allowedOrigins.includes(origin) ||\n                     allowedOrigins.some(allowed => {\n                       // Support wildcard subdomains\n                       if (allowed.startsWith('*.')) {\n                         const domain = allowed.substring(2);\n                         return origin.endsWith(domain);\n                       }\n                       return false;\n                     });\n\n    if (!isAllowed) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: `Origin ${origin} not allowed`,\n          code: 'CORS_ORIGIN_NOT_ALLOWED'\n        }\n      };\n    }\n\n    // Generate CORS headers\n    const corsHeaders: Record<string, string> = {\n      'Access-Control-Allow-Origin': allowedOrigins.includes('*') ? '*' : origin,\n      'Access-Control-Allow-Methods': this.config.cors.allowedMethods.join(', '),\n      'Access-Control-Allow-Headers': this.config.cors.allowedHeaders.join(', '),\n      'Access-Control-Max-Age': this.config.cors.maxAge.toString()\n    };\n\n    if (this.config.cors.credentials) {\n      corsHeaders['Access-Control-Allow-Credentials'] = 'true';\n    }\n\n    return {\n      allowed: true,\n      headers: corsHeaders\n    };\n  }\n\n  /**\n   * Request size validation\n   */\n  private async validateRequestSize(request: SecurityRequest): Promise<SecurityResponse> {\n    const { maxBodySize, maxHeaderSize, maxUrlLength } = this.config.requestLimits;\n\n    // Check URL length\n    if (request.url.length > maxUrlLength) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: `URL length ${request.url.length} exceeds limit of ${maxUrlLength}`,\n          code: 'URL_TOO_LONG'\n        }\n      };\n    }\n\n    // Check headers size\n    const headerSize = JSON.stringify(request.headers).length;\n    if (headerSize > maxHeaderSize) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: `Headers size ${headerSize} exceeds limit of ${maxHeaderSize}`,\n          code: 'HEADERS_TOO_LARGE'\n        }\n      };\n    }\n\n    // Check body size\n    if (request.body) {\n      const bodySize = JSON.stringify(request.body).length;\n      if (bodySize > maxBodySize) {\n        return {\n          allowed: false,\n          blocked: {\n            reason: `Body size ${bodySize} exceeds limit of ${maxBodySize}`,\n            code: 'BODY_TOO_LARGE'\n          }\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Content security validation\n   */\n  private async validateContentSecurity(request: SecurityRequest): Promise<SecurityResponse> {\n    if (!this.config.contentSecurity.validateContentType) {\n      return { allowed: true };\n    }\n\n    const contentType = request.headers['content-type'] || request.headers['Content-Type'];\n\n    // Skip validation for GET requests\n    if (request.method === 'GET' || !request.body) {\n      return { allowed: true };\n    }\n\n    if (!contentType) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: 'Missing Content-Type header',\n          code: 'MISSING_CONTENT_TYPE'\n        }\n      };\n    }\n\n    const baseContentType = contentType.split(';')[0].trim();\n    const allowedTypes = this.config.contentSecurity.allowedContentTypes;\n\n    if (!allowedTypes.includes(baseContentType)) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: `Content type ${baseContentType} not allowed`,\n          code: 'INVALID_CONTENT_TYPE'\n        }\n      };\n    }\n\n    // Additional JSON validation\n    if (baseContentType === 'application/json' &&\n        this.config.contentSecurity.validateJsonSchema) {\n      try {\n        // Validate that body is valid JSON if content-type is JSON\n        if (typeof request.body === 'string') {\n          JSON.parse(request.body);\n        }\n      } catch {\n        return {\n          allowed: false,\n          blocked: {\n            reason: 'Invalid JSON in request body',\n            code: 'INVALID_JSON'\n          }\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Rate limiting check\n   */\n  private async checkRateLimit(request: SecurityRequest): Promise<SecurityResponse> {\n    if (!this.config.rateLimiting.enabled) {\n      return { allowed: true };\n    }\n\n    const key = this.config.rateLimiting.keyGenerator ?\n      this.config.rateLimiting.keyGenerator(request) :\n      this.generateRateLimitKey(request);\n\n    const now = Date.now();\n    const windowMs = this.config.rateLimiting.windowMs;\n    const maxRequests = this.config.rateLimiting.maxRequests;\n\n    let entry = this.rateLimitStore.get(key);\n\n    // Reset window if expired\n    if (!entry || now > entry.resetTime) {\n      entry = {\n        count: 0,\n        resetTime: now + windowMs\n      };\n      this.rateLimitStore.set(key, entry);\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= maxRequests) {\n      const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n\n      return {\n        allowed: false,\n        blocked: {\n          reason: `Rate limit exceeded: ${entry.count}/${maxRequests} requests`,\n          code: 'RATE_LIMIT_EXCEEDED',\n          retryAfter\n        },\n        headers: {\n          'X-RateLimit-Limit': maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': entry.resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        }\n      };\n    }\n\n    // Increment counter\n    entry.count++;\n\n    return {\n      allowed: true,\n      headers: {\n        'X-RateLimit-Limit': maxRequests.toString(),\n        'X-RateLimit-Remaining': (maxRequests - entry.count).toString(),\n        'X-RateLimit-Reset': entry.resetTime.toString()\n      }\n    };\n  }\n\n  /**\n   * API key validation\n   */\n  private async validateApiKey(request: SecurityRequest): Promise<SecurityResponse> {\n    if (!this.config.apiKeys.enabled) {\n      return { allowed: true };\n    }\n\n    const apiKey = request.headers[this.config.apiKeys.headerName.toLowerCase()];\n\n    if (!apiKey) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: `Missing API key in ${this.config.apiKeys.headerName} header`,\n          code: 'MISSING_API_KEY'\n        }\n      };\n    }\n\n    // Check cache first\n    const cached = this.apiKeyCache.get(apiKey);\n    if (cached && Date.now() < cached.expiry) {\n      if (!cached.valid) {\n        return {\n          allowed: false,\n          blocked: {\n            reason: 'Invalid API key',\n            code: 'INVALID_API_KEY'\n          }\n        };\n      }\n\n      // Check scopes if required\n      if (this.config.apiKeys.requiredScopes) {\n        const hasRequiredScopes = this.config.apiKeys.requiredScopes.every(\n          scope => cached.scopes.includes(scope)\n        );\n\n        if (!hasRequiredScopes) {\n          return {\n            allowed: false,\n            blocked: {\n              reason: 'Insufficient API key scopes',\n              code: 'INSUFFICIENT_SCOPES'\n            }\n          };\n        }\n      }\n\n      return { allowed: true };\n    }\n\n    // Validate API key (this would typically call an external service)\n    const validation = await this.validateApiKeyExternal(apiKey);\n\n    // Cache result\n    this.apiKeyCache.set(apiKey, {\n      valid: validation.valid,\n      scopes: validation.scopes || [],\n      expiry: Date.now() + (5 * 60 * 1000) // 5 minute cache\n    });\n\n    if (!validation.valid) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: 'Invalid API key',\n          code: 'INVALID_API_KEY'\n        }\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * CSRF validation\n   */\n  private async validateCSRF(request: SecurityRequest): Promise<SecurityResponse> {\n    const csrfToken = request.headers['x-csrf-token'] || request.headers['X-CSRF-Token'];\n\n    if (!csrfToken) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: 'Missing CSRF token',\n          code: 'MISSING_CSRF_TOKEN'\n        }\n      };\n    }\n\n    // For now, just check that token exists\n    // In production, this would validate against stored token\n    if (csrfToken.length < 16) {\n      return {\n        allowed: false,\n        blocked: {\n          reason: 'Invalid CSRF token format',\n          code: 'INVALID_CSRF_TOKEN'\n        }\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Detect suspicious activity patterns\n   */\n  private async detectSuspiciousActivity(request: SecurityRequest): Promise<void> {\n    const clientIdentifier = request.clientId || request.headers['x-forwarded-for'] || 'unknown';\n    const suspicious = this.suspiciousActivities.get(clientIdentifier) || 0;\n\n    // Check for suspicious patterns\n    let suspicionScore = 0;\n\n    // Rapid requests from same client\n    suspicionScore += suspicious > 100 ? 2 : 0;\n\n    // Unusual request patterns\n    if (request.url.includes('..') || request.url.includes('~')) {\n      suspicionScore += 3;\n    }\n\n    // SQL injection patterns\n    const sqlPatterns = /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER)\\b)/i;\n    if (sqlPatterns.test(request.url) ||\n        (request.body && sqlPatterns.test(JSON.stringify(request.body)))) {\n      suspicionScore += 5;\n    }\n\n    // XSS patterns\n    const xssPatterns = /<script|javascript:|onload=|onerror=/i;\n    if (xssPatterns.test(request.url) ||\n        (request.body && xssPatterns.test(JSON.stringify(request.body)))) {\n      suspicionScore += 4;\n    }\n\n    if (suspicionScore > 3) {\n      await this.auditSecurityViolation(\n        request,\n        'suspicious_activity',\n        `Suspicion score: ${suspicionScore}`\n      );\n\n      // Increase suspicion counter\n      this.suspiciousActivities.set(clientIdentifier, suspicious + suspicionScore);\n\n      logger.warn('Suspicious activity detected', {\n        clientIdentifier,\n        suspicionScore,\n        totalSuspicion: suspicious + suspicionScore,\n        requestId: request.requestId\n      });\n    }\n  }\n\n  /**\n   * Generate security headers\n   */\n  private generateSecurityHeaders(request: SecurityRequest): Record<string, string> {\n    return {\n      'X-Content-Type-Options': 'nosniff',\n      'X-Frame-Options': 'DENY',\n      'X-XSS-Protection': '1; mode=block',\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\n      'X-Request-ID': request.requestId\n    };\n  }\n\n  /**\n   * Audit logging methods\n   */\n  private async auditRequest(\n    request: SecurityRequest,\n    outcome: 'success' | 'failure',\n    duration: number\n  ): Promise<void> {\n    if (!this.config.auditLogging.enabled) {\n      return;\n    }\n\n    const auditEvent: AuditEvent = {\n      id: crypto.randomUUID(),\n      timestamp: new Date().toISOString(),\n      type: 'request',\n      source: 'security_middleware',\n      userId: request.userId,\n      clientId: request.clientId,\n      action: request.method,\n      resource: request.url,\n      outcome,\n      details: {\n        duration,\n        userAgent: request.headers['user-agent'],\n        contentType: request.headers['content-type']\n      },\n      ipAddress: request.headers['x-forwarded-for'] || request.headers['x-real-ip'],\n      userAgent: request.headers['user-agent'],\n      correlationId: request.requestId\n    };\n\n    this.auditEvents.push(auditEvent);\n    this.cleanupAuditEvents();\n\n    // Log based on level\n    if (this.config.auditLogging.logLevel !== 'minimal') {\n      logger.info('Security audit event', auditEvent);\n    }\n  }\n\n  private async auditSecurityViolation(\n    request: SecurityRequest,\n    violationType: string,\n    reason: string\n  ): Promise<void> {\n    const auditEvent: AuditEvent = {\n      id: crypto.randomUUID(),\n      timestamp: new Date().toISOString(),\n      type: 'security_violation',\n      source: 'security_middleware',\n      userId: request.userId,\n      clientId: request.clientId,\n      action: violationType,\n      resource: request.url,\n      outcome: 'blocked',\n      details: {\n        reason,\n        method: request.method,\n        userAgent: request.headers['user-agent']\n      },\n      ipAddress: request.headers['x-forwarded-for'] || request.headers['x-real-ip'],\n      userAgent: request.headers['user-agent'],\n      correlationId: request.requestId\n    };\n\n    this.auditEvents.push(auditEvent);\n    this.cleanupAuditEvents();\n\n    logger.warn('Security violation detected', auditEvent);\n  }\n\n  /**\n   * Helper methods\n   */\n  private generateRateLimitKey(request: SecurityRequest): string {\n    // Use client ID if available, otherwise use IP\n    return request.clientId ||\n           request.headers['x-forwarded-for'] ||\n           request.headers['x-real-ip'] ||\n           'unknown';\n  }\n\n  private async validateApiKeyExternal(apiKey: string): Promise<{\n    valid: boolean;\n    scopes?: string[];\n  }> {\n    // This would typically validate against an external service\n    // For now, just check basic format\n    if (apiKey.length < 32) {\n      return { valid: false };\n    }\n\n    // Mock validation - in production, this would call your API key service\n    return {\n      valid: true,\n      scopes: ['read', 'write']\n    };\n  }\n\n  private startPeriodicCleanup(): void {\n    // Cleanup expired entries every 5 minutes\n    setInterval(() => {\n      this.cleanupRateLimitStore();\n      this.cleanupApiKeyCache();\n      this.cleanupSuspiciousActivities();\n    }, 5 * 60 * 1000);\n  }\n\n  private cleanupRateLimitStore(): void {\n    const now = Date.now();\n    for (const [key, entry] of this.rateLimitStore) {\n      if (now > entry.resetTime) {\n        this.rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  private cleanupApiKeyCache(): void {\n    const now = Date.now();\n    for (const [key, entry] of this.apiKeyCache) {\n      if (now > entry.expiry) {\n        this.apiKeyCache.delete(key);\n      }\n    }\n  }\n\n  private cleanupSuspiciousActivities(): void {\n    // Reset suspicion scores periodically\n    this.suspiciousActivities.clear();\n  }\n\n  private cleanupAuditEvents(): void {\n    const maxEvents = 10000;\n    if (this.auditEvents.length > maxEvents) {\n      this.auditEvents = this.auditEvents.slice(-maxEvents);\n    }\n  }\n\n  /**\n   * Get security statistics\n   */\n  getSecurityStats(): {\n    rateLimits: { active: number; violations: number };\n    apiKeys: { cached: number; valid: number };\n    auditEvents: { total: number; violations: number };\n    suspiciousClients: number;\n  } {\n    const violations = this.auditEvents.filter(\n      event => event.type === 'security_violation'\n    ).length;\n\n    const validApiKeys = Array.from(this.apiKeyCache.values())\n      .filter(entry => entry.valid).length;\n\n    return {\n      rateLimits: {\n        active: this.rateLimitStore.size,\n        violations: 0 // Would track this in production\n      },\n      apiKeys: {\n        cached: this.apiKeyCache.size,\n        valid: validApiKeys\n      },\n      auditEvents: {\n        total: this.auditEvents.length,\n        violations\n      },\n      suspiciousClients: this.suspiciousActivities.size\n    };\n  }\n\n  /**\n   * Default configuration\n   */\n  private static getDefaultConfig(): SecurityConfig {\n    return {\n      cors: {\n        enabled: true,\n        allowedOrigins: ['http://localhost:3000', 'https://*.vercel.app'],\n        allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n        allowedHeaders: ['Content-Type', 'Authorization', 'X-CSRF-Token', 'X-Requested-With'],\n        credentials: true,\n        maxAge: 86400\n      },\n      rateLimiting: {\n        enabled: true,\n        windowMs: 60 * 1000, // 1 minute\n        maxRequests: 100,\n        skipSuccessfulRequests: false\n      },\n      requestLimits: {\n        maxBodySize: 10 * 1024 * 1024, // 10MB\n        maxHeaderSize: 16 * 1024,       // 16KB\n        maxUrlLength: 2048              // 2KB\n      },\n      apiKeys: {\n        enabled: false,\n        headerName: 'X-API-Key'\n      },\n      auditLogging: {\n        enabled: true,\n        logLevel: 'standard',\n        sensitiveFields: ['password', 'token', 'secret', 'key'],\n        retentionDays: 30\n      },\n      contentSecurity: {\n        validateContentType: true,\n        allowedContentTypes: ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'],\n        validateJsonSchema: true\n      }\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\security\\csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\security\\headers.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":6,"column":1,"severity":1,"nodeType":null,"fix":{"range":[95,150],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Security Headers Configuration\n * Implements CSP, HSTS, and other security headers\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { logger } from '@/lib/logger';\n\n// Content Security Policy directives\nexport const CSP_DIRECTIVES = {\n  'default-src': [\"'self'\"],\n  'script-src': [\n    \"'self'\",\n    \"'unsafe-inline'\", // Required for React development - remove in production\n    \"'unsafe-eval'\", // Required for development - remove in production\n    'https://apis.google.com', // Google Maps\n    'https://maps.googleapis.com',\n  ],\n  'style-src': [\n    \"'self'\",\n    \"'unsafe-inline'\", // Required for styled components\n    'https://fonts.googleapis.com',\n  ],\n  'font-src': [\n    \"'self'\",\n    'https://fonts.gstatic.com',\n  ],\n  'img-src': [\n    \"'self'\",\n    'data:',\n    'blob:',\n    'https://*.googleapis.com',\n    'https://*.gstatic.com',\n    'https://*.supabase.co',\n  ],\n  'connect-src': [\n    \"'self'\",\n    'https://*.supabase.co',\n    'wss://*.supabase.co',\n    'https://api.vapi.ai',\n    'https://api.openai.com',\n    'https://maps.googleapis.com',\n  ],\n  'frame-src': [\n    \"'self'\",\n    'https://maps.google.com',\n  ],\n  'object-src': [\"'none'\"],\n  'base-uri': [\"'self'\"],\n  'form-action': [\"'self'\"],\n  'frame-ancestors': [\"'none'\"],\n  'upgrade-insecure-requests': [],\n};\n\n/**\n * Generate CSP header string\n */\nexport function generateCSP(): string {\n  const isProduction = import.meta.env.PROD;\n\n  const directives = { ...CSP_DIRECTIVES };\n\n  // Remove unsafe-inline and unsafe-eval in production\n  if (isProduction) {\n    directives['script-src'] = directives['script-src'].filter(\n      src => src !== \"'unsafe-inline'\" && src !== \"'unsafe-eval'\"\n    );\n  }\n\n  return Object.entries(directives)\n    .map(([key, values]) => {\n      if (values.length === 0) return key;\n      return `${key} ${values.join(' ')}`;\n    })\n    .join('; ');\n}\n\n/**\n * Security headers configuration\n */\nexport const SECURITY_HEADERS = {\n  // Content Security Policy\n  'Content-Security-Policy': generateCSP(),\n\n  // Strict Transport Security (HSTS)\n  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n\n  // Prevent MIME type sniffing\n  'X-Content-Type-Options': 'nosniff',\n\n  // XSS Protection (legacy browsers)\n  'X-XSS-Protection': '1; mode=block',\n\n  // Prevent clickjacking\n  'X-Frame-Options': 'DENY',\n\n  // Referrer Policy\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\n\n  // Permissions Policy (formerly Feature Policy)\n  'Permissions-Policy': [\n    'camera=()',\n    'microphone=()',\n    'geolocation=(self)',\n    'payment=()',\n    'usb=()',\n    'magnetometer=()',\n    'gyroscope=()',\n    'accelerometer=()',\n  ].join(', '),\n};\n\n/**\n * Apply security headers to the document\n * Note: This only works for meta tags, not all headers\n */\nexport function applySecurityHeaders(): void {\n  // CSP can be set as meta tag\n  const cspMeta = document.createElement('meta');\n  cspMeta.httpEquiv = 'Content-Security-Policy';\n  cspMeta.content = generateCSP();\n  document.head.appendChild(cspMeta);\n\n  // Referrer policy can be set as meta tag\n  const referrerMeta = document.createElement('meta');\n  referrerMeta.name = 'referrer';\n  referrerMeta.content = 'strict-origin-when-cross-origin';\n  document.head.appendChild(referrerMeta);\n\n  logger.info('Security headers applied via meta tags');\n}\n\n/**\n * Middleware for adding security headers to fetch requests\n */\nexport function withSecurityHeaders(\n  url: string | URL,\n  options: RequestInit = {}\n): RequestInit {\n  const secureHeaders = {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n  };\n\n  return {\n    ...options,\n    headers: {\n      ...secureHeaders,\n      ...options.headers,\n    },\n  };\n}\n\n/**\n * Validate response headers for security\n */\nexport function validateResponseHeaders(headers: Headers): {\n  valid: boolean;\n  issues: string[];\n} {\n  const issues: string[] = [];\n\n  // Check for security headers\n  if (!headers.get('x-content-type-options')) {\n    issues.push('Missing X-Content-Type-Options header');\n  }\n\n  if (!headers.get('x-frame-options')) {\n    issues.push('Missing X-Frame-Options header');\n  }\n\n  // Check for sensitive information leakage\n  const serverHeader = headers.get('server');\n  if (serverHeader && (serverHeader.includes('/') || serverHeader.includes('version'))) {\n    issues.push('Server header exposes version information');\n  }\n\n  const poweredBy = headers.get('x-powered-by');\n  if (poweredBy) {\n    issues.push('X-Powered-By header should be removed');\n  }\n\n  return {\n    valid: issues.length === 0,\n    issues,\n  };\n}\n\n/**\n * Create Vite plugin for security headers (for vite.config.ts)\n */\nimport type { ServerRequest, ServerResponse, NextFunction } from '@/types/api.types';\n\nexport const viteSecurityHeaders = {\n  name: 'security-headers',\n  configureServer(server: {\n    middlewares: {\n      use: (middleware: (req: ServerRequest, res: ServerResponse, next: NextFunction) => void) => void;\n    };\n  }) {\n    server.middlewares.use((_req: ServerRequest, res: ServerResponse, next: NextFunction) => {\n      // Apply security headers to all responses\n      Object.entries(SECURITY_HEADERS).forEach(([key, value]) => {\n        res.setHeader(key, value);\n      });\n      next();\n    });\n  },\n  configurePreviewServer(server: {\n    middlewares: {\n      use: (middleware: (req: ServerRequest, res: ServerResponse, next: NextFunction) => void) => void;\n    };\n  }) {\n    server.middlewares.use((_req: ServerRequest, res: ServerResponse, next: NextFunction) => {\n      // Apply security headers to preview server\n      Object.entries(SECURITY_HEADERS).forEach(([key, value]) => {\n        res.setHeader(key, value);\n      });\n      next();\n    });\n  },\n};\n\n/**\n * Subresource Integrity (SRI) hash generator\n */\nexport async function generateSRIHash(content: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(content);\n  const hashBuffer = await crypto.subtle.digest('SHA-384', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashBase64 = btoa(String.fromCharCode(...hashArray));\n  return `sha384-${hashBase64}`;\n}\n\n/**\n * Add SRI to script tags\n */\nexport async function addSRIToScripts(): Promise<void> {\n  const scripts = document.querySelectorAll('script[src]');\n\n  for (const script of scripts) {\n    const src = script.getAttribute('src');\n    if (!src || src.startsWith('http')) continue; // Skip external scripts\n\n    try {\n      const response = await fetch(src);\n      const content = await response.text();\n      const sri = await generateSRIHash(content);\n      script.setAttribute('integrity', sri);\n      script.setAttribute('crossorigin', 'anonymous');\n    } catch (error) {\n      logger.warn('Failed to add SRI to script', { src, error });\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\supabaseServices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\validation\\schemas.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SafeUrl' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":31,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n/**\n * Input Validation Schemas\n * Prevents injection attacks and validates all external API inputs\n */\n\n// Sanitization helpers\nconst sanitizeString = (val: string) => {\n  return val\n    .replace(/[<>]/g, '') // Remove HTML tags\n    .replace(/['\"]/g, '') // Remove quotes that could cause injection\n    .replace(/[;]/g, '') // Remove semicolons\n    .replace(/[\\r\\n]/g, ' ') // Remove line breaks\n    .trim();\n};\n\n// Custom Zod types with sanitization\nconst SafeString = (minLength = 0, maxLength = 1000) =>\n  z.string()\n    .min(minLength)\n    .max(maxLength)\n    .transform(sanitizeString);\n\nconst SafeStringWithRegex = (pattern: RegExp, message: string) =>\n  z.string()\n    .regex(pattern, message)\n    .transform(sanitizeString);\n\nconst SafeEmail = z.string().email().transform(val => val.toLowerCase().trim());\nconst SafeUrl = z.string().url().refine(\n  url => url.startsWith('https://') || url.startsWith('http://'),\n  'URL must start with http:// or https://'\n);\n\n// Geographic coordinates validation\nconst LatitudeSchema = z.number().min(-90).max(90);\nconst LongitudeSchema = z.number().min(-180).max(180);\n\n// ============================================\n// Google Maps API Schemas\n// ============================================\n\nexport const GeocodeAddressSchema = z.object({\n  address: SafeString(1, 500),\n  country: SafeString(0, 2).optional(), // ISO country code\n  bounds: z.object({\n    northeast: z.object({\n      lat: LatitudeSchema,\n      lng: LongitudeSchema,\n    }),\n    southwest: z.object({\n      lat: LatitudeSchema,\n      lng: LongitudeSchema,\n    }),\n  }).optional(),\n});\n\nexport const WaypointSchema = z.object({\n  lat: LatitudeSchema,\n  lng: LongitudeSchema,\n  label: SafeString(0, 100).optional(),\n});\n\nexport const OptimizeRouteSchema = z.object({\n  waypoints: z.array(WaypointSchema).min(2).max(25), // Google Maps limit\n  travelMode: z.enum(['DRIVING', 'WALKING', 'BICYCLING', 'TRANSIT']).default('DRIVING'),\n  avoidHighways: z.boolean().default(false),\n  avoidTolls: z.boolean().default(false),\n});\n\n// ============================================\n// VAPI Call Schemas\n// ============================================\n\nexport const VAPICallSchema = z.object({\n  phoneNumber: z.string().regex(\n    /^\\+?[1-9]\\d{1,14}$/,\n    'Invalid E.164 phone number format'\n  ),\n  assistantId: z.string().uuid(),\n  metadata: z.record(SafeString()).optional(),\n  voicemailDetection: z.boolean().default(true),\n  maxDuration: z.number().min(1).max(3600).optional(), // seconds\n});\n\nexport const VAPIMessageSchema = z.object({\n  role: z.enum(['system', 'user', 'assistant']),\n  content: SafeString(1, 4000),\n  timestamp: z.string().datetime().optional(),\n});\n\n// ============================================\n// OpenAI Assistant Schemas\n// ============================================\n\nexport const OpenAIMessageSchema = z.object({\n  role: z.enum(['user', 'assistant']),\n  content: SafeString(1, 4000),\n  threadId: z.string().optional(),\n});\n\nexport const OpenAICompletionSchema = z.object({\n  messages: z.array(OpenAIMessageSchema).min(1).max(100),\n  temperature: z.number().min(0).max(2).default(0.7),\n  maxTokens: z.number().min(1).max(4000).default(1000),\n  topP: z.number().min(0).max(1).default(1),\n  frequencyPenalty: z.number().min(-2).max(2).default(0),\n  presencePenalty: z.number().min(-2).max(2).default(0),\n});\n\n// ============================================\n// Supabase Query Schemas\n// ============================================\n\nexport const SupabaseFilterSchema = z.object({\n  column: SafeStringWithRegex(/^[a-zA-Z_][a-zA-Z0-9_]*$/, 'Invalid column name'),\n  operator: z.enum(['eq', 'neq', 'gt', 'gte', 'lt', 'lte', 'like', 'ilike', 'in', 'is']),\n  value: z.union([\n    z.string(),\n    z.number(),\n    z.boolean(),\n    z.null(),\n    z.array(z.union([z.string(), z.number()])),\n  ]),\n});\n\nexport const SupabaseQuerySchema = z.object({\n  table: SafeStringWithRegex(/^[a-zA-Z_][a-zA-Z0-9_]*$/, 'Invalid table name'),\n  select: SafeStringWithRegex(/^[a-zA-Z0-9_,\\s*()]*$/, 'Invalid select clause').optional(),\n  filters: z.array(SupabaseFilterSchema).max(10).optional(),\n  orderBy: z.object({\n    column: SafeStringWithRegex(/^[a-zA-Z_][a-zA-Z0-9_]*$/, 'Invalid column name'),\n    ascending: z.boolean().default(true),\n  }).optional(),\n  limit: z.number().min(1).max(1000).default(100),\n  offset: z.number().min(0).default(0),\n});\n\n// ============================================\n// User Input Schemas\n// ============================================\n\nexport const UserProfileUpdateSchema = z.object({\n  name: SafeString(1, 100).optional(),\n  email: SafeEmail.optional(),\n  phone: z.string().regex(/^\\+?[1-9]\\d{1,14}$/).optional(),\n  company: SafeString(0, 100).optional(),\n  role: z.enum(['admin', 'agent', 'client']).optional(),\n  metadata: z.record(SafeString()).optional(),\n});\n\nexport const ClientCreateSchema = z.object({\n  name: SafeString(1, 100),\n  email: SafeEmail,\n  phone: z.string().regex(/^\\+?[1-9]\\d{1,14}$/),\n  company: SafeString(0, 100).optional(),\n  address: SafeString(0, 500).optional(),\n  notes: SafeString(0, 2000).optional(),\n  tags: z.array(SafeString(0, 50)).max(20).optional(),\n});\n\nexport const InterventionCreateSchema = z.object({\n  clientId: z.string().uuid(),\n  type: z.enum(['urgence', 'entretien', 'installation', 'reparation']),\n  description: SafeString(1, 2000),\n  scheduledAt: z.string().datetime(),\n  duration: z.number().min(15).max(480), // minutes\n  address: SafeString(0, 500),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).default('medium'),\n  assignedTo: z.string().uuid().optional(),\n});\n\n// ============================================\n// File Upload Schemas\n// ============================================\n\nexport const FileUploadSchema = z.object({\n  filename: SafeStringWithRegex(/^[a-zA-Z0-9_\\-.]+$/, 'Invalid filename'),\n  mimetype: z.enum([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'application/pdf',\n    'text/plain',\n    'text/csv',\n    'application/json',\n  ]),\n  size: z.number().min(1).max(10485760), // 10MB max\n  content: z.instanceof(ArrayBuffer).optional(), // For validation of actual content\n});\n\n// ============================================\n// Search and Filter Schemas\n// ============================================\n\nexport const SearchQuerySchema = z.object({\n  query: SafeString(1, 200),\n  filters: z.record(z.union([z.string(), z.number(), z.boolean()])).optional(),\n  page: z.number().min(1).default(1),\n  perPage: z.number().min(1).max(100).default(20),\n  sortBy: SafeStringWithRegex(/^[a-zA-Z_][a-zA-Z0-9_]*$/, 'Invalid sort field').optional(),\n  sortOrder: z.enum(['asc', 'desc']).default('asc'),\n});\n\n// ============================================\n// Webhook Validation Schemas\n// ============================================\n\nexport const WebhookPayloadSchema = z.object({\n  event: SafeString(0, 100),\n  timestamp: z.string().datetime(),\n  signature: z.string().regex(/^[a-fA-F0-9]{64}$/), // SHA256 hex\n  data: z.record(z.unknown()),\n});\n\n// ============================================\n// Validation Utilities\n// ============================================\n\n/**\n * Validate input against schema and return sanitized data\n */\nexport function validateInput<T>(\n  schema: z.ZodSchema<T>,\n  data: unknown\n): { success: true; data: T } | { success: false; errors: string[] } {\n  try {\n    const result = schema.parse(data);\n    return { success: true, data: result };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors = error.errors.map(e => `${e.path.join('.')}: ${e.message}`);\n      return { success: false, errors };\n    }\n    return { success: false, errors: ['Unknown validation error'] };\n  }\n}\n\n/**\n * Create a validated API function wrapper\n */\nexport function createValidatedFunction<TInput, TOutput>(\n  schema: z.ZodSchema<TInput>,\n  fn: (input: TInput) => Promise<TOutput>\n) {\n  return async (input: unknown): Promise<TOutput> => {\n    const validation = validateInput(schema, input);\n    if (!validation.success) {\n      throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n    }\n    return fn(validation.data);\n  };\n}\n\n/**\n * SQL Injection Prevention\n * Additional layer for database queries\n */\nexport function sanitizeSQL(value: string): string {\n  // Remove common SQL injection patterns\n  return value\n    .replace(/;/g, '') // Remove statement terminators\n    .replace(/--/g, '') // Remove comments\n    .replace(/\\/\\*/g, '') // Remove multi-line comments\n    .replace(/\\*\\//g, '')\n    .replace(/\\bunion\\b/gi, '') // Remove UNION keyword\n    .replace(/\\bselect\\b/gi, '') // Remove SELECT keyword (when not expected)\n    .replace(/\\bdrop\\b/gi, '') // Remove DROP keyword\n    .replace(/\\binsert\\b/gi, '') // Remove INSERT keyword\n    .replace(/\\bupdate\\b/gi, '') // Remove UPDATE keyword\n    .replace(/\\bdelete\\b/gi, '') // Remove DELETE keyword\n    .replace(/\\bexec\\b/gi, '') // Remove EXEC keyword\n    .replace(/\\bexecute\\b/gi, '') // Remove EXECUTE keyword\n    .trim();\n}\n\n/**\n * XSS Prevention\n * HTML entity encoding for display\n */\nexport function encodeHTML(str: string): string {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\services\\webhooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":301,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":331,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Production Webhook Services for Drain Fortin\n * Handles all external API integrations with proper error handling\n */\n\nimport { API_CONFIG, apiClient, webhookUtils } from '@/config/api.config';\nimport type {\n  WebhookClientData,\n  WebhookCallData,\n  WebhookInterventionData,\n  WebhookFeedbackData\n} from '@/types/api.types';\n\nexport interface VapiCallRequest {\n  phoneNumber: string;\n  assistantId?: string;\n  context?: {\n    clientId?: string;\n    campaignId?: string;\n    metadata?: Record<string, unknown>;\n    priority?: 'low' | 'normal' | 'high';\n    [key: string]: unknown;\n  };\n  clientName?: string;\n  urgency?: 'low' | 'normal' | 'high';\n}\n\nexport interface TwilioSmsRequest {\n  to: string;\n  message: string;\n  clientName?: string;\n  serviceType?: string;\n  priority?: string;\n}\n\nexport interface SupportFeedbackRequest {\n  type: 'call' | 'chat' | 'email' | 'sms';\n  message: string;\n  clientInfo?: {\n    name?: string;\n    phone?: string;\n    email?: string;\n  };\n  urgency?: 'low' | 'normal' | 'high';\n  metadata?: Record<string, unknown>;\n}\n\n// VAPI Voice AI Service\nexport const VapiService = {\n  async makeCall(request: VapiCallRequest) {\n    const { data, error } = await apiClient.post('/functions/v1/vapi-call', {\n      phone_number: request.phoneNumber,\n      assistant_id: request.assistantId || API_CONFIG.vapi.assistantId,\n      context: {\n        client_name: request.clientName,\n        urgency: request.urgency || 'normal',\n        timestamp: new Date().toISOString(),\n        ...request.context\n      }\n    });\n\n    if (error) {\n      throw new Error(`Erreur VAPI: ${error}`);\n    }\n\n    return data;\n  },\n\n  async initiateEmergencyCall(phoneNumber: string, clientName: string) {\n    return this.makeCall({\n      phoneNumber,\n      clientName,\n      urgency: 'high',\n      context: {\n        call_type: 'emergency',\n        auto_greeting: `Bonjour ${clientName}, vous avez contacté Drain Fortin pour une urgence plomberie. Je vais vous mettre en relation avec un technicien.`\n      }\n    });\n  },\n\n  async initiateFollowUpCall(phoneNumber: string, clientName: string, interventionId: string) {\n    return this.makeCall({\n      phoneNumber,\n      clientName,\n      urgency: 'normal',\n      context: {\n        call_type: 'follow_up',\n        intervention_id: interventionId,\n        auto_greeting: `Bonjour ${clientName}, nous vous contactons pour un suivi de votre intervention Drain Fortin. Comment s'est déroulé le service?`\n      }\n    });\n  },\n\n  async initiateSupportCall(phoneNumber: string, clientName?: string) {\n    return this.makeCall({\n      phoneNumber,\n      clientName: clientName || 'Client',\n      urgency: 'normal',\n      context: {\n        call_type: 'support',\n        auto_greeting: 'Bonjour, merci de contacter le support Drain Fortin. Comment puis-je vous aider aujourd\\'hui?'\n      }\n    });\n  }\n};\n\n// Twilio SMS Service\nexport const TwilioService = {\n  async sendSms(request: TwilioSmsRequest) {\n    const { data, error } = await apiClient.post('/functions/v1/send-sms', {\n      to: request.to,\n      message: request.message,\n      client_name: request.clientName,\n      service_type: request.serviceType,\n      priority: request.priority || 'normal'\n    });\n\n    if (error) {\n      throw new Error(`Erreur SMS: ${error}`);\n    }\n\n    return data;\n  },\n\n  async sendEmergencyConfirmation(phoneNumber: string, clientName: string, estimatedArrival: string) {\n    return this.sendSms({\n      to: phoneNumber,\n      clientName,\n      message: `Bonjour ${clientName}, votre demande d'urgence Drain Fortin a été prise en compte. Technicien en route, arrivée prévue: ${estimatedArrival}. Urgence? Appelez: +1 438-601-2625`,\n      serviceType: 'emergency',\n      priority: 'high'\n    });\n  },\n\n  async sendInterventionReminder(phoneNumber: string, clientName: string, appointmentDate: string) {\n    return this.sendSms({\n      to: phoneNumber,\n      clientName,\n      message: `Rappel RDV Drain Fortin - ${clientName}, intervention prévue le ${appointmentDate}. Pour modifier: +1 438-601-2625`,\n      serviceType: 'appointment',\n      priority: 'normal'\n    });\n  },\n\n  async sendCompletionSurvey(phoneNumber: string, clientName: string, interventionId: string) {\n    const surveyLink = `${window.location.origin}/feedback?id=${interventionId}`;\n    return this.sendSms({\n      to: phoneNumber,\n      clientName,\n      message: `Merci ${clientName}! Votre intervention Drain Fortin est terminée. Évaluez notre service: ${surveyLink}`,\n      serviceType: 'feedback',\n      priority: 'low'\n    });\n  },\n\n  async sendCustomMessage(phoneNumber: string, message: string, clientName?: string) {\n    return this.sendSms({\n      to: phoneNumber,\n      message: message,\n      clientName: clientName || 'Client',\n      serviceType: 'custom',\n      priority: 'normal'\n    });\n  }\n};\n\n// n8n Automation Service\nexport const N8nService = {\n  async triggerNewClientWorkflow(clientData: WebhookClientData) {\n    return webhookUtils.triggerN8nWebhook('newClient', {\n      event: 'client_created',\n      client: clientData,\n      actions_required: [\n        'send_welcome_email',\n        'create_crm_record',\n        'schedule_follow_up'\n      ]\n    });\n  },\n\n  async triggerEmergencyCallWorkflow(callData: WebhookCallData) {\n    return webhookUtils.triggerN8nWebhook('emergencyCall', {\n      event: 'emergency_call',\n      call: callData,\n      actions_required: [\n        'notify_on_duty_technician',\n        'send_sms_confirmation',\n        'create_intervention_record',\n        'alert_supervisor_if_P1'\n      ]\n    });\n  },\n\n  async triggerInterventionCompletedWorkflow(interventionData: WebhookInterventionData) {\n    return webhookUtils.triggerN8nWebhook('interventionCompleted', {\n      event: 'intervention_completed',\n      intervention: interventionData,\n      actions_required: [\n        'generate_invoice',\n        'send_completion_sms',\n        'schedule_feedback_call',\n        'update_client_history'\n      ]\n    });\n  },\n\n  async triggerFeedbackWorkflow(feedbackData: WebhookFeedbackData) {\n    return webhookUtils.triggerN8nWebhook('feedback', {\n      event: 'customer_feedback',\n      feedback: feedbackData,\n      actions_required: [\n        'analyze_sentiment',\n        'route_to_manager_if_negative',\n        'update_client_satisfaction_score',\n        'trigger_follow_up_if_needed'\n      ]\n    });\n  }\n};\n\n// Support Service - Unified support interface\nexport const SupportService = {\n  async submitFeedback(request: SupportFeedbackRequest) {\n    // Log the support request\n    const { data, error } = await apiClient.post('/functions/v1/support-feedback', {\n      type: request.type,\n      message: request.message,\n      client_info: request.clientInfo,\n      urgency: request.urgency || 'normal',\n      metadata: {\n        user_agent: navigator.userAgent,\n        timestamp: new Date().toISOString(),\n        page_url: window.location.href,\n        ...request.metadata\n      }\n    });\n\n    if (error) {\n      throw new Error(`Erreur support: ${error}`);\n    }\n\n    // Trigger n8n workflow for feedback processing\n    await N8nService.triggerFeedbackWorkflow({\n      id: (data as { id?: string })?.id || 'unknown',\n      rating: 0,\n      comment: request.message,\n      metadata: {\n        type: request.type,\n        clientInfo: request.clientInfo,\n        urgency: request.urgency,\n        ...request.metadata\n      }\n    });\n\n    return data;\n  },\n\n  async initiateLiveSupport(clientInfo?: { name?: string; phone?: string; email?: string }) {\n    const phone = clientInfo?.phone || '+14386012625'; // Default support number\n    const clientName = clientInfo?.name || 'Client';\n\n    return VapiService.initiateSupportCall(phone, clientName);\n  },\n\n  async requestCallback(phoneNumber: string, preferredTime?: string, message?: string) {\n    return this.submitFeedback({\n      type: 'call',\n      message: `Demande de rappel${preferredTime ? ` à ${preferredTime}` : ''}${message ? `: ${message}` : ''}`,\n      clientInfo: { phone: phoneNumber },\n      urgency: 'normal',\n      metadata: { \n        callback_request: true, \n        preferred_time: preferredTime \n      }\n    });\n  }\n};\n\n// Google Maps Service for geolocation\nexport const MapsService = {\n  async geocodeAddress(address: string) {\n    const apiKey = API_CONFIG.maps.apiKey;\n    if (!apiKey) {\n      console.warn('Google Maps API key not configured');\n      return { lat: null, lng: null, error: 'API key not configured' };\n    }\n\n    try {\n      const response = await fetch(\n        `${API_CONFIG.maps?.baseUrl || 'https://maps.googleapis.com/maps/api'}/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`\n      );\n      \n      const data = await response.json();\n      \n      if (data.status === 'OK' && data.results?.[0]) {\n        const location = data.results[0].geometry.location;\n        return { lat: location.lat, lng: location.lng, error: null };\n      }\n      \n      return { lat: null, lng: null, error: data.error_message || 'Adresse non trouvée' };\n    } catch (_error) {\n      return { lat: null, lng: null, error: 'Erreur géocodage' };\n    }\n  },\n\n  async getRouteDistance(origin: string, destination: string) {\n    const apiKey = API_CONFIG.maps.apiKey;\n    if (!apiKey) {\n      return { distance: null, duration: null, error: 'API key not configured' };\n    }\n\n    try {\n      const response = await fetch(\n        `${API_CONFIG.maps?.baseUrl || 'https://maps.googleapis.com/maps/api'}/distancematrix/json?origins=${encodeURIComponent(origin)}&destinations=${encodeURIComponent(destination)}&key=${apiKey}`\n      );\n      \n      const data = await response.json();\n      \n      if (data.status === 'OK' && data.rows?.[0]?.elements?.[0]) {\n        const element = data.rows[0].elements[0];\n        if (element.status === 'OK') {\n          return {\n            distance: element.distance.text,\n            duration: element.duration.text,\n            error: null\n          };\n        }\n      }\n      \n      return { distance: null, duration: null, error: 'Route non trouvée' };\n    } catch (_error) {\n      return { distance: null, duration: null, error: 'Erreur calcul route' };\n    }\n  },\n\n  generateMapUrl(address: string, zoom = 15) {\n    const apiKey = API_CONFIG.maps.apiKey;\n    const encodedAddress = encodeURIComponent(address);\n    return `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=${encodedAddress}&zoom=${zoom}`;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\shared\\types\\crm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\shared\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\shared\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\shared\\types\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\types\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\types\\api.types.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[18,54],"text":""}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'z' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\n/**\n * API Type Definitions\n * Centralized type definitions for API requests and responses\n */\n\nimport { z } from 'zod';\n\n// ============================================\n// Base API Types\n// ============================================\n\nexport interface ApiResponse<T = unknown> {\n  data: T;\n  status: number;\n  message?: string;\n  error?: ApiError;\n  metadata?: ApiMetadata;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: Record<string, unknown>;\n  statusCode?: number;\n  retryable?: boolean;\n}\n\nexport interface ApiMetadata {\n  timestamp: number;\n  requestId?: string;\n  version?: string;\n  pagination?: PaginationInfo;\n}\n\nexport interface PaginationInfo {\n  page: number;\n  perPage: number;\n  total: number;\n  hasMore: boolean;\n}\n\n// ============================================\n// Request Types\n// ============================================\n\nexport interface ApiRequest<T = unknown> {\n  endpoint: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  body?: T;\n  params?: Record<string, string | number | boolean>;\n  headers?: Record<string, string>;\n}\n\nexport interface ApiQueryOptions {\n  page?: number;\n  limit?: number;\n  sort?: string;\n  order?: 'asc' | 'desc';\n  filters?: Record<string, unknown>;\n  include?: string[];\n  fields?: string[];\n}\n\n// ============================================\n// Supabase Types\n// ============================================\n\nexport interface SupabaseQueryBuilder<T = unknown> {\n  select: (columns?: string) => SupabaseQueryBuilder<T>;\n  filter: (column: string, operator: string, value: unknown) => SupabaseQueryBuilder<T>;\n  eq: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  neq: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  gt: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  gte: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  lt: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  lte: (column: string, value: unknown) => SupabaseQueryBuilder<T>;\n  like: (column: string, pattern: string) => SupabaseQueryBuilder<T>;\n  ilike: (column: string, pattern: string) => SupabaseQueryBuilder<T>;\n  in: (column: string, values: unknown[]) => SupabaseQueryBuilder<T>;\n  or: (filter: string) => SupabaseQueryBuilder<T>;\n  order: (column: string, options?: { ascending?: boolean }) => SupabaseQueryBuilder<T>;\n  limit: (count: number) => SupabaseQueryBuilder<T>;\n  range: (from: number, to: number) => SupabaseQueryBuilder<T>;\n  single: () => Promise<T>;\n  execute: () => Promise<{ data: T[]; error: ApiError | null }>;\n}\n\n// Enhanced Supabase query builder type that matches actual Supabase client\nexport type SupabaseQuery<T = unknown> = SupabaseQueryBuilder<T>;\n\nexport interface SupabaseResponse<T = unknown> {\n  data: T | T[] | null;\n  error: {\n    message: string;\n    details?: string;\n    hint?: string;\n    code?: string;\n  } | null;\n  count?: number;\n  status?: number;\n  statusText?: string;\n}\n\n// ============================================\n// External Service Types\n// ============================================\n\nexport interface VAPIResponse {\n  id: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  phoneNumber: string;\n  assistantId: string;\n  duration?: number;\n  cost?: number;\n  transcript?: string;\n  metadata?: Record<string, unknown>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface GoogleMapsGeocodeResponse {\n  results: Array<{\n    formatted_address: string;\n    geometry: {\n      location: {\n        lat: number;\n        lng: number;\n      };\n      location_type: string;\n      viewport: {\n        northeast: { lat: number; lng: number };\n        southwest: { lat: number; lng: number };\n      };\n    };\n    place_id: string;\n    types: string[];\n  }>;\n  status: 'OK' | 'ZERO_RESULTS' | 'OVER_QUERY_LIMIT' | 'REQUEST_DENIED' | 'INVALID_REQUEST';\n}\n\nexport interface OpenAIResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: 'assistant' | 'user' | 'system';\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\n// ============================================\n// WebSocket Types\n// ============================================\n\nexport interface WebSocketMessage<T = unknown> {\n  event: string;\n  type: 'broadcast' | 'presence' | 'postgres_changes';\n  payload: T;\n  timestamp?: number;\n  ref?: string;\n}\n\nexport interface RealtimeSubscription {\n  channel: string;\n  event: string;\n  callback: (payload: unknown) => void;\n  unsubscribe: () => void;\n}\n\n// Specific WebSocket message types\nexport interface VAPIWebSocketMessage {\n  event: 'call_start' | 'call_end' | 'transcription' | 'error';\n  data: {\n    callId?: string;\n    phoneNumber?: string;\n    status?: string;\n    transcript?: string;\n    error?: string;\n  };\n}\n\nexport interface AlertWebSocketMessage {\n  type: 'emergency' | 'info' | 'warning';\n  title: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Realtime subscription payload types\nexport interface RealtimeInsertPayload<T = Record<string, unknown>> {\n  eventType: 'INSERT';\n  new: T;\n  old: null;\n  schema: string;\n  table: string;\n}\n\nexport interface RealtimeUpdatePayload<T = Record<string, unknown>> {\n  eventType: 'UPDATE';\n  new: T;\n  old: T;\n  schema: string;\n  table: string;\n}\n\nexport interface RealtimeDeletePayload<T = Record<string, unknown>> {\n  eventType: 'DELETE';\n  new: null;\n  old: T;\n  schema: string;\n  table: string;\n}\n\nexport type RealtimePayload<T = Record<string, unknown>> =\n  | RealtimeInsertPayload<T>\n  | RealtimeUpdatePayload<T>\n  | RealtimeDeletePayload<T>;\n\n// ============================================\n// Form Data Types\n// ============================================\n\nexport interface FormSubmitEvent<T = Record<string, unknown>> extends Event {\n  currentTarget: HTMLFormElement;\n  preventDefault: () => void;\n  formData?: T;\n}\n\nexport interface FileUploadEvent extends Event {\n  target: HTMLInputElement & { files: FileList | null };\n}\n\n// ============================================\n// Validation Types\n// ============================================\n\nexport type ValidationResult<T> =\n  | { success: true; data: T }\n  | { success: false; errors: string[] };\n\nexport interface ValidationSchema {\n  validate: <T>(data: unknown) => ValidationResult<T>;\n  parse: <T>(data: unknown) => T;\n  safeParse: <T>(data: unknown) => ValidationResult<T>;\n}\n\n// ============================================\n// Type Guards\n// ============================================\n\nexport function isApiError(error: unknown): error is ApiError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'code' in error &&\n    'message' in error\n  );\n}\n\nexport function isSupabaseError(error: unknown): error is SupabaseResponse['error'] {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'message' in error &&\n    typeof (error as SupabaseResponse['error'])?.message === 'string'\n  );\n}\n\nexport function isApiResponse<T>(response: unknown): response is ApiResponse<T> {\n  return (\n    typeof response === 'object' &&\n    response !== null &&\n    'data' in response &&\n    'status' in response\n  );\n}\n\n// ============================================\n// Service & Webhook Types\n// ============================================\n\nexport interface WebhookClientData {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  company?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface WebhookCallData {\n  id: string;\n  phoneNumber: string;\n  direction: 'inbound' | 'outbound';\n  status: string;\n  duration?: number;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface WebhookInterventionData {\n  id: string;\n  clientId: string;\n  type: string;\n  status: string;\n  scheduledAt: string;\n  completedAt?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface WebhookFeedbackData {\n  id: string;\n  rating: number;\n  comment?: string;\n  clientId?: string;\n  interventionId?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface BatchOperation {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  endpoint: string;\n  data?: Record<string, unknown>;\n  id?: string;\n}\n\nexport interface HttpRequestOptions {\n  timeout?: number;\n  retries?: number;\n  validateResponse?: (data: unknown) => boolean;\n  headers?: Record<string, string>;\n}\n\nexport interface CallContext {\n  clientId?: string;\n  campaignId?: string;\n  metadata?: Record<string, unknown>;\n  priority?: 'low' | 'normal' | 'high';\n}\n\n// ============================================\n// Utility Types\n// ============================================\n\nexport type AsyncFunction<T = unknown, R = unknown> = (args: T) => Promise<R>;\nexport type EventHandler<T = Event> = (event: T) => void | Promise<void>;\nexport type Callback<T = unknown> = (data: T) => void;\nexport type ErrorCallback = (error: Error | ApiError) => void;\n\n// Make certain properties optional\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n// Make certain properties required\nexport type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\n\n// Extract the type of array elements\nexport type ArrayElement<ArrayType extends readonly unknown[]> =\n  ArrayType extends readonly (infer ElementType)[] ? ElementType : never;\n\n// Server middleware types\nexport interface ServerRequest {\n  url?: string;\n  method?: string;\n  headers?: Record<string, string>;\n}\n\nexport interface ServerResponse {\n  setHeader: (name: string, value: string) => void;\n  writeHead?: (status: number, headers?: Record<string, string>) => void;\n  end?: (data?: string) => void;\n}\n\nexport type NextFunction = () => void;\nexport type MiddlewareFunction = (req: ServerRequest, res: ServerResponse, next: NextFunction) => void;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\types\\index.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":57,"column":3,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":61,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\types\\models.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\utils\\colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\utils\\scoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\_shared\\cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\_shared\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\health-check\\index.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[756,759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[756,759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3551,3554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3551,3554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3682,3685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3682,3685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\n8n-webhook\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\send-bulk-sms\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":16,"suggestions":[{"fix":{"range":[1805,1891],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":16,"suggestions":[{"fix":{"range":[4847,4925],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1912,1915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1912,1915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface BulkSMSRequest {\n  message: string;\n  recipients: {\n    name: string;\n    phone: string;\n    client_id?: string;\n  }[];\n  service_type?: string;\n  priority?: 'low' | 'normal' | 'high' | 'urgent';\n  schedule_at?: string; // ISO string pour envoi différé\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\n    const twilioAccountSid = Deno.env.get('TWILIO_ACCOUNT_SID');\n    const twilioAuthToken = Deno.env.get('TWILIO_AUTH_TOKEN');\n    const twilioPhoneNumber = Deno.env.get('TWILIO_PHONE_NUMBER');\n    \n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n    if (req.method !== 'POST') {\n      throw new Error('Method not allowed');\n    }\n\n    const bulkRequest: BulkSMSRequest = await req.json();\n\n    // Validation des données obligatoires\n    if (!bulkRequest.message || !bulkRequest.recipients || bulkRequest.recipients.length === 0) {\n      throw new Error('Le message et la liste des destinataires sont obligatoires');\n    }\n\n    // Validation des destinataires\n    for (const recipient of bulkRequest.recipients) {\n      if (!recipient.name || !recipient.phone) {\n        throw new Error('Chaque destinataire doit avoir un nom et un numéro de téléphone');\n      }\n    }\n\n    console.log(`Envoi de SMS en masse à ${bulkRequest.recipients.length} destinataires`);\n\n    const results: any[] = [];\n    const isSimulated = !twilioAccountSid || !twilioAuthToken || !twilioPhoneNumber;\n\n    if (isSimulated) {\n      console.warn('Twilio non configuré, simulation d\\'envoi SMS en masse');\n    }\n\n    // Traitement par lot pour éviter de surcharger l'API\n    const batchSize = 10;\n    for (let i = 0; i < bulkRequest.recipients.length; i += batchSize) {\n      const batch = bulkRequest.recipients.slice(i, i + batchSize);\n      \n      const batchPromises = batch.map(async (recipient) => {\n        try {\n          let twilioData = null;\n          \n          if (!isSimulated) {\n            // Envoi réel via Twilio\n            const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\n            const credentials = btoa(`${twilioAccountSid}:${twilioAuthToken}`);\n\n            const formData = new URLSearchParams();\n            formData.append('To', recipient.phone);\n            formData.append('From', twilioPhoneNumber);\n            formData.append('Body', bulkRequest.message);\n\n            if (bulkRequest.schedule_at) {\n              // Note: Twilio ne supporte pas nativement l'envoi différé via l'API REST\n              // Il faudrait utiliser un système de queue/cron\n              console.warn('Envoi différé non supporté par cette implémentation');\n            }\n\n            const twilioResponse = await fetch(twilioUrl, {\n              method: 'POST',\n              headers: {\n                'Authorization': `Basic ${credentials}`,\n                'Content-Type': 'application/x-www-form-urlencoded',\n              },\n              body: formData\n            });\n\n            twilioData = await twilioResponse.json();\n            \n            if (!twilioResponse.ok) {\n              throw new Error(`Erreur Twilio: ${twilioData.message || 'Erreur inconnue'}`);\n            }\n          }\n\n          return {\n            recipient,\n            success: true,\n            status: isSimulated ? 'simulated' : twilioData?.status,\n            sid: twilioData?.sid,\n            twilio_data: twilioData\n          };\n\n        } catch (error) {\n          console.error(`Erreur envoi SMS à ${recipient.name} (${recipient.phone}):`, error);\n          return {\n            recipient,\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            status: 'failed'\n          };\n        }\n      });\n\n      // Attendre que le lot se termine avant de passer au suivant\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n\n      // Pause entre les lots pour respecter les limites de taux\n      if (i + batchSize < bulkRequest.recipients.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n\n    // Statistiques des résultats\n    const successful = results.filter(r => r.success).length;\n    const failed = results.filter(r => !r.success).length;\n\n    console.log(`SMS en masse terminé: ${successful} réussis, ${failed} échoués`);\n\n    // Logger l'envoi en masse dans sms_logs\n    const { data: smsLog, error: logError } = await supabase\n      .from('sms_logs')\n      .insert({\n        customer_phone: 'BULK',\n        customer_name: `Envoi en masse (${bulkRequest.recipients.length} destinataires)`,\n        service_type: bulkRequest.service_type || 'bulk',\n        priority: bulkRequest.priority || 'normal',\n        message: bulkRequest.message,\n        recipients: results.map(r => ({\n          name: r.recipient.name,\n          phone: r.recipient.phone,\n          status: r.status,\n          sid: r.sid,\n          success: r.success,\n          error: r.error\n        }))\n      })\n      .select()\n      .single();\n\n    if (logError) {\n      console.error('Erreur log SMS en masse:', logError);\n    }\n\n    // Logger l'action dans audit_logs\n    const { error: auditError } = await supabase\n      .from('audit_logs')\n      .insert({\n        user_email: 'system',\n        action: 'BULK_SMS_SENT',\n        resource_type: 'sms_logs',\n        resource_id: smsLog?.id,\n        new_values: {\n          message: bulkRequest.message,\n          recipients_count: bulkRequest.recipients.length,\n          successful_count: successful,\n          failed_count: failed\n        },\n        metadata: {\n          source: 'send-bulk-sms-function',\n          simulated: isSimulated,\n          service_type: bulkRequest.service_type,\n          priority: bulkRequest.priority\n        }\n      });\n\n    if (auditError) {\n      console.warn('Erreur audit log:', auditError);\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: `SMS en masse ${isSimulated ? 'simulé' : 'envoyé'}`,\n        summary: {\n          total: bulkRequest.recipients.length,\n          successful,\n          failed,\n          simulated: isSimulated\n        },\n        results,\n        sms_log: smsLog\n      }),\n      {\n        status: 200,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Erreur send-bulk-sms:', error);\n    \n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Erreur interne du serveur'\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\send-sms\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":95,"endColumn":16,"suggestions":[{"fix":{"range":[3014,3065],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\nimport { corsHeaders, handleCors } from '../_shared/cors.ts';\nimport { createServiceClient } from '../_shared/supabase.ts';\n\ninterface SMSRequest {\n  to: string; // Numéro de téléphone du destinataire\n  message: string;\n  customer_name?: string;\n  service_type?: string;\n  priority?: string;\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCors(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabase = createServiceClient();\n    const twilioAccountSid = Deno.env.get('TWILIO_ACCOUNT_SID');\n    const twilioAuthToken = Deno.env.get('TWILIO_AUTH_TOKEN');\n    const twilioPhoneNumber = Deno.env.get('TWILIO_PHONE_NUMBER');\n\n    if (req.method !== 'POST') {\n      throw new Error('Method not allowed');\n    }\n\n    const smsRequest: SMSRequest = await req.json();\n\n    // Validation des données obligatoires\n    if (!smsRequest.to || !smsRequest.message) {\n      throw new Error('Le numéro de téléphone et le message sont obligatoires');\n    }\n\n    // Vérifier si Twilio est configuré\n    if (!twilioAccountSid || !twilioAuthToken || !twilioPhoneNumber) {\n      console.warn('Twilio non configuré, simulation d\\'envoi SMS');\n      \n      // Logger le SMS \"simulé\" dans la base\n      const { data: smsLog, error: logError } = await supabase\n        .from('sms_logs')\n        .insert({\n          customer_phone: smsRequest.to,\n          customer_name: smsRequest.customer_name || 'Inconnu',\n          service_type: smsRequest.service_type || 'general',\n          priority: smsRequest.priority || 'normal',\n          message: smsRequest.message,\n          recipients: [{ phone: smsRequest.to, status: 'simulated' }]\n        })\n        .select()\n        .single();\n\n      if (logError) {\n        console.error('Erreur log SMS:', logError);\n      }\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          message: 'SMS simulé (Twilio non configuré)',\n          sms_log: smsLog,\n          simulated: true\n        }),\n        {\n          status: 200,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Envoyer le SMS via Twilio\n    const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\n    const credentials = btoa(`${twilioAccountSid}:${twilioAuthToken}`);\n\n    const formData = new URLSearchParams();\n    formData.append('To', smsRequest.to);\n    formData.append('From', twilioPhoneNumber);\n    formData.append('Body', smsRequest.message);\n\n    const twilioResponse = await fetch(twilioUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${credentials}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: formData\n    });\n\n    const twilioData = await twilioResponse.json();\n\n    if (!twilioResponse.ok) {\n      throw new Error(`Erreur Twilio: ${twilioData.message || 'Erreur inconnue'}`);\n    }\n\n    console.log('SMS envoyé avec succès:', twilioData);\n\n    // Logger le SMS dans la base de données\n    const { data: smsLog, error: logError } = await supabase\n      .from('sms_logs')\n      .insert({\n        customer_phone: smsRequest.to,\n        customer_name: smsRequest.customer_name || 'Inconnu',\n        service_type: smsRequest.service_type || 'general',\n        priority: smsRequest.priority || 'normal',\n        message: smsRequest.message,\n        recipients: [{\n          phone: smsRequest.to,\n          status: twilioData.status,\n          sid: twilioData.sid,\n          twilio_data: twilioData\n        }]\n      })\n      .select()\n      .single();\n\n    if (logError) {\n      console.error('Erreur log SMS:', logError);\n    }\n\n    // Logger l'action dans audit_logs\n    const { error: auditError } = await supabase\n      .from('audit_logs')\n      .insert({\n        user_email: 'system',\n        action: 'SMS_SENT',\n        resource_type: 'sms_logs',\n        resource_id: smsLog?.id,\n        new_values: {\n          to: smsRequest.to,\n          message: smsRequest.message,\n          twilio_sid: twilioData.sid\n        },\n        metadata: {\n          source: 'send-sms-function',\n          twilio_status: twilioData.status\n        }\n      });\n\n    if (auditError) {\n      console.warn('Erreur audit log:', auditError);\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'SMS envoyé avec succès',\n        twilio_data: twilioData,\n        sms_log: smsLog\n      }),\n      {\n        status: 200,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Erreur send-sms:', error);\n    \n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Erreur interne du serveur'\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\support-feedback\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":16,"suggestions":[{"fix":{"range":[1788,1835],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\nimport { corsHeaders, handleCors } from '../_shared/cors.ts';\nimport { createServiceClient } from '../_shared/supabase.ts';\n\ninterface SupportRequest {\n  client_name: string;\n  client_phone?: string;\n  client_email?: string;\n  subject: string;\n  description: string;\n  category?: 'general' | 'technical' | 'billing' | 'urgent' | 'feedback';\n  priority?: 'low' | 'normal' | 'high' | 'urgent';\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCors(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabase = createServiceClient();\n\n    if (req.method !== 'POST') {\n      throw new Error('Method not allowed');\n    }\n\n    const supportRequest: SupportRequest = await req.json();\n\n    // Validation des données obligatoires\n    if (!supportRequest.client_name || !supportRequest.subject || !supportRequest.description) {\n      throw new Error('client_name, subject et description sont obligatoires');\n    }\n\n    // Créer le ticket de support dans la base de données\n    const { data: ticket, error: ticketError } = await supabase\n      .from('support_tickets')\n      .insert({\n        client_name: supportRequest.client_name,\n        client_phone: supportRequest.client_phone,\n        client_email: supportRequest.client_email,\n        subject: supportRequest.subject,\n        description: supportRequest.description,\n        category: supportRequest.category || 'general',\n        priority: supportRequest.priority || 'normal',\n        status: 'open'\n      })\n      .select()\n      .single();\n\n    if (ticketError) {\n      console.error('Erreur création ticket:', ticketError);\n      throw new Error(`Erreur création ticket: ${ticketError.message}`);\n    }\n\n    console.log('Ticket de support créé:', ticket);\n\n    // Logger l'action dans audit_logs\n    const { error: auditError } = await supabase\n      .from('audit_logs')\n      .insert({\n        user_email: supportRequest.client_email || 'anonymous',\n        action: 'CREATE',\n        resource_type: 'support_tickets',\n        resource_id: ticket.id,\n        new_values: ticket,\n        metadata: {\n          source: 'support-feedback-function',\n          client_name: supportRequest.client_name\n        }\n      });\n\n    if (auditError) {\n      console.warn('Erreur audit log:', auditError);\n    }\n\n    // Si le ticket est urgent, créer une alerte\n    if (supportRequest.priority === 'urgent') {\n      const { error: alertError } = await supabase\n        .from('alerts')\n        .insert({\n          type: 'support_urgent',\n          message: `Ticket urgent créé: ${supportRequest.subject}`,\n          priority: 'high',\n          metadata: {\n            ticket_id: ticket.id,\n            client_name: supportRequest.client_name,\n            client_phone: supportRequest.client_phone\n          }\n        });\n\n      if (alertError) {\n        console.warn('Erreur création alerte:', alertError);\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        ticket,\n        message: 'Ticket de support créé avec succès'\n      }),\n      {\n        status: 201,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Erreur support-feedback:', error);\n    \n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Erreur interne du serveur'\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\supabase\\functions\\vapi-call\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: error, warn.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":60,"endColumn":16,"suggestions":[{"fix":{"range":[2085,2174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\nimport { corsHeaders, handleCors } from '../_shared/cors.ts';\nimport { createServiceClient } from '../_shared/supabase.ts';\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  const corsResponse = handleCors(req);\n  if (corsResponse) return corsResponse;\n\n  const start = Date.now();\n  try {\n    if (req.method !== 'POST') {\n      return new Response(JSON.stringify({ success: false, error: 'Method not allowed' }), { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    const { phone_number, assistant_id, context } = await req.json();\n\n    const supabase = createServiceClient();\n\n    // If VAPI credentials exist, call external API, otherwise simulate\n    const vapiKey = Deno.env.get('VAPI_API_KEY');\n    let external:\n      | { called: true; status: number; id?: string }\n      | { called: false; reason: string } = { called: false, reason: 'no_credentials' };\n\n    if (vapiKey) {\n      try {\n        // Placeholder: example external call - adjust path if needed\n        const resp = await fetch('https://api.vapi.ai/v1/calls', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${vapiKey}` },\n          body: JSON.stringify({ phoneNumber: phone_number, assistantId: assistant_id, context }),\n        });\n        const data = await resp.json();\n        external = { called: true, status: resp.status, id: data?.id };\n      } catch (_) {\n        external = { called: false, reason: 'external_error' };\n      }\n    }\n\n    // Log call in DB (simulate if needed)\n    const { data: row, error } = await supabase\n      .from('vapi_calls')\n      .insert({\n        call_id: crypto.randomUUID(),\n        phone_number,\n        customer_name: context?.client_name ?? null,\n        priority: context?.urgency ?? null,\n        status: 'pending',\n        metadata: { context, external },\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    const latency = Date.now() - start;\n    console.log(JSON.stringify({ service: 'vapi-call', status: 'ok', latency_ms: latency }));\n\n    return new Response(\n      JSON.stringify({ success: true, data: row, metrics: { p50_ms: latency, p95_ms: latency, p99_ms: latency } }),\n      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  } catch (e) {\n    const latency = Date.now() - start;\n    console.error(JSON.stringify({ service: 'vapi-call', status: 'error', error: String(e), latency_ms: latency }));\n    return new Response(JSON.stringify({ success: false, error: 'Internal error' }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jean-Samuel\\drain fortin prod f\\prompt-plumber-hub\\vitest.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
